
uart_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041cc  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800428c  0800428c  0000528c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042c4  080042c4  0000600c  2**0
                  CONTENTS
  4 .ARM          00000000  080042c4  080042c4  0000600c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080042c4  080042c4  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080042c4  080042c4  000052c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080042c8  080042c8  000052c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080042cc  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000acc  2000000c  080042d8  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ad8  080042d8  00006ad8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e148  00000000  00000000  00006034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002451  00000000  00000000  0001417c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d30  00000000  00000000  000165d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a51  00000000  00000000  00017300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a6e6  00000000  00000000  00017d51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000116de  00000000  00000000  00032437  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098cd7  00000000  00000000  00043b15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dc7ec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e80  00000000  00000000  000dc830  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000047  00000000  00000000  000df6b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004274 	.word	0x08004274

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08004274 	.word	0x08004274

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000226:	4b0c      	ldr	r3, [pc, #48]	@ (8000258 <MX_DMA_Init+0x38>)
 8000228:	695a      	ldr	r2, [r3, #20]
 800022a:	4b0b      	ldr	r3, [pc, #44]	@ (8000258 <MX_DMA_Init+0x38>)
 800022c:	2101      	movs	r1, #1
 800022e:	430a      	orrs	r2, r1
 8000230:	615a      	str	r2, [r3, #20]
 8000232:	4b09      	ldr	r3, [pc, #36]	@ (8000258 <MX_DMA_Init+0x38>)
 8000234:	695b      	ldr	r3, [r3, #20]
 8000236:	2201      	movs	r2, #1
 8000238:	4013      	ands	r3, r2
 800023a:	607b      	str	r3, [r7, #4]
 800023c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800023e:	2200      	movs	r2, #0
 8000240:	2100      	movs	r1, #0
 8000242:	200a      	movs	r0, #10
 8000244:	f000 fda2 	bl	8000d8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000248:	200a      	movs	r0, #10
 800024a:	f000 fdb4 	bl	8000db6 <HAL_NVIC_EnableIRQ>

}
 800024e:	46c0      	nop			@ (mov r8, r8)
 8000250:	46bd      	mov	sp, r7
 8000252:	b002      	add	sp, #8
 8000254:	bd80      	pop	{r7, pc}
 8000256:	46c0      	nop			@ (mov r8, r8)
 8000258:	40021000 	.word	0x40021000

0800025c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800025c:	b590      	push	{r4, r7, lr}
 800025e:	b089      	sub	sp, #36	@ 0x24
 8000260:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000262:	240c      	movs	r4, #12
 8000264:	193b      	adds	r3, r7, r4
 8000266:	0018      	movs	r0, r3
 8000268:	2314      	movs	r3, #20
 800026a:	001a      	movs	r2, r3
 800026c:	2100      	movs	r1, #0
 800026e:	f003 ffca 	bl	8004206 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000272:	4b2a      	ldr	r3, [pc, #168]	@ (800031c <MX_GPIO_Init+0xc0>)
 8000274:	695a      	ldr	r2, [r3, #20]
 8000276:	4b29      	ldr	r3, [pc, #164]	@ (800031c <MX_GPIO_Init+0xc0>)
 8000278:	2180      	movs	r1, #128	@ 0x80
 800027a:	0289      	lsls	r1, r1, #10
 800027c:	430a      	orrs	r2, r1
 800027e:	615a      	str	r2, [r3, #20]
 8000280:	4b26      	ldr	r3, [pc, #152]	@ (800031c <MX_GPIO_Init+0xc0>)
 8000282:	695a      	ldr	r2, [r3, #20]
 8000284:	2380      	movs	r3, #128	@ 0x80
 8000286:	029b      	lsls	r3, r3, #10
 8000288:	4013      	ands	r3, r2
 800028a:	60bb      	str	r3, [r7, #8]
 800028c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800028e:	4b23      	ldr	r3, [pc, #140]	@ (800031c <MX_GPIO_Init+0xc0>)
 8000290:	695a      	ldr	r2, [r3, #20]
 8000292:	4b22      	ldr	r3, [pc, #136]	@ (800031c <MX_GPIO_Init+0xc0>)
 8000294:	2180      	movs	r1, #128	@ 0x80
 8000296:	0309      	lsls	r1, r1, #12
 8000298:	430a      	orrs	r2, r1
 800029a:	615a      	str	r2, [r3, #20]
 800029c:	4b1f      	ldr	r3, [pc, #124]	@ (800031c <MX_GPIO_Init+0xc0>)
 800029e:	695a      	ldr	r2, [r3, #20]
 80002a0:	2380      	movs	r3, #128	@ 0x80
 80002a2:	031b      	lsls	r3, r3, #12
 80002a4:	4013      	ands	r3, r2
 80002a6:	607b      	str	r3, [r7, #4]
 80002a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_RESET);
 80002aa:	2380      	movs	r3, #128	@ 0x80
 80002ac:	009b      	lsls	r3, r3, #2
 80002ae:	481c      	ldr	r0, [pc, #112]	@ (8000320 <MX_GPIO_Init+0xc4>)
 80002b0:	2200      	movs	r2, #0
 80002b2:	0019      	movs	r1, r3
 80002b4:	f001 f92a 	bl	800150c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80002b8:	193b      	adds	r3, r7, r4
 80002ba:	2201      	movs	r2, #1
 80002bc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80002be:	193b      	adds	r3, r7, r4
 80002c0:	2288      	movs	r2, #136	@ 0x88
 80002c2:	0352      	lsls	r2, r2, #13
 80002c4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002c6:	193b      	adds	r3, r7, r4
 80002c8:	2200      	movs	r2, #0
 80002ca:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002cc:	193a      	adds	r2, r7, r4
 80002ce:	2390      	movs	r3, #144	@ 0x90
 80002d0:	05db      	lsls	r3, r3, #23
 80002d2:	0011      	movs	r1, r2
 80002d4:	0018      	movs	r0, r3
 80002d6:	f000 ffa1 	bl	800121c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD5_Pin;
 80002da:	0021      	movs	r1, r4
 80002dc:	187b      	adds	r3, r7, r1
 80002de:	2280      	movs	r2, #128	@ 0x80
 80002e0:	0092      	lsls	r2, r2, #2
 80002e2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002e4:	187b      	adds	r3, r7, r1
 80002e6:	2201      	movs	r2, #1
 80002e8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002ea:	187b      	adds	r3, r7, r1
 80002ec:	2200      	movs	r2, #0
 80002ee:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002f0:	187b      	adds	r3, r7, r1
 80002f2:	2200      	movs	r2, #0
 80002f4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD5_GPIO_Port, &GPIO_InitStruct);
 80002f6:	187b      	adds	r3, r7, r1
 80002f8:	4a09      	ldr	r2, [pc, #36]	@ (8000320 <MX_GPIO_Init+0xc4>)
 80002fa:	0019      	movs	r1, r3
 80002fc:	0010      	movs	r0, r2
 80002fe:	f000 ff8d 	bl	800121c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8000302:	2200      	movs	r2, #0
 8000304:	2100      	movs	r1, #0
 8000306:	2005      	movs	r0, #5
 8000308:	f000 fd40 	bl	8000d8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 800030c:	2005      	movs	r0, #5
 800030e:	f000 fd52 	bl	8000db6 <HAL_NVIC_EnableIRQ>

}
 8000312:	46c0      	nop			@ (mov r8, r8)
 8000314:	46bd      	mov	sp, r7
 8000316:	b009      	add	sp, #36	@ 0x24
 8000318:	bd90      	pop	{r4, r7, pc}
 800031a:	46c0      	nop			@ (mov r8, r8)
 800031c:	40021000 	.word	0x40021000
 8000320:	48000800 	.word	0x48000800

08000324 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b082      	sub	sp, #8
 8000328:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	uint8_t counter = 0;
 800032a:	1dfb      	adds	r3, r7, #7
 800032c:	2200      	movs	r2, #0
 800032e:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000330:	f000 fc1c 	bl	8000b6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000334:	f000 f842 	bl	80003bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000338:	f7ff ff90 	bl	800025c <MX_GPIO_Init>
  MX_DMA_Init();
 800033c:	f7ff ff70 	bl	8000220 <MX_DMA_Init>
  MX_TIM16_Init();
 8000340:	f000 f998 	bl	8000674 <MX_TIM16_Init>
  MX_TIM3_Init();
 8000344:	f000 f916 	bl	8000574 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000348:	f000 fa8a 	bl	8000860 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

	memset(start_buff, '1', START_BUFF_SIZE / 4);
 800034c:	2380      	movs	r3, #128	@ 0x80
 800034e:	005a      	lsls	r2, r3, #1
 8000350:	4b14      	ldr	r3, [pc, #80]	@ (80003a4 <main+0x80>)
 8000352:	2131      	movs	r1, #49	@ 0x31
 8000354:	0018      	movs	r0, r3
 8000356:	f003 ff56 	bl	8004206 <memset>
	memset(start_buff + 256, '2', START_BUFF_SIZE / 4);
 800035a:	4b13      	ldr	r3, [pc, #76]	@ (80003a8 <main+0x84>)
 800035c:	2280      	movs	r2, #128	@ 0x80
 800035e:	0052      	lsls	r2, r2, #1
 8000360:	2132      	movs	r1, #50	@ 0x32
 8000362:	0018      	movs	r0, r3
 8000364:	f003 ff4f 	bl	8004206 <memset>
	memset(start_buff + 512, '3', START_BUFF_SIZE / 4);
 8000368:	4b10      	ldr	r3, [pc, #64]	@ (80003ac <main+0x88>)
 800036a:	2280      	movs	r2, #128	@ 0x80
 800036c:	0052      	lsls	r2, r2, #1
 800036e:	2133      	movs	r1, #51	@ 0x33
 8000370:	0018      	movs	r0, r3
 8000372:	f003 ff48 	bl	8004206 <memset>
	memset(start_buff + 768, '4', START_BUFF_SIZE / 4);
 8000376:	4b0e      	ldr	r3, [pc, #56]	@ (80003b0 <main+0x8c>)
 8000378:	2280      	movs	r2, #128	@ 0x80
 800037a:	0052      	lsls	r2, r2, #1
 800037c:	2134      	movs	r1, #52	@ 0x34
 800037e:	0018      	movs	r0, r3
 8000380:	f003 ff41 	bl	8004206 <memset>
//		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
//		HAL_Delay(100);
//		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
//		HAL_Delay(100);

		receive_data_from_uart_dma(rx_dma, RX_DMA_SIZE, final_buff,
 8000384:	2380      	movs	r3, #128	@ 0x80
 8000386:	00db      	lsls	r3, r3, #3
 8000388:	4a0a      	ldr	r2, [pc, #40]	@ (80003b4 <main+0x90>)
 800038a:	2180      	movs	r1, #128	@ 0x80
 800038c:	0049      	lsls	r1, r1, #1
 800038e:	480a      	ldr	r0, [pc, #40]	@ (80003b8 <main+0x94>)
 8000390:	f000 fb40 	bl	8000a14 <receive_data_from_uart_dma>
		FINAL_BUFF_SIZE);
		counter++;
 8000394:	1dfb      	adds	r3, r7, #7
 8000396:	781a      	ldrb	r2, [r3, #0]
 8000398:	1dfb      	adds	r3, r7, #7
 800039a:	3201      	adds	r2, #1
 800039c:	701a      	strb	r2, [r3, #0]
		receive_data_from_uart_dma(rx_dma, RX_DMA_SIZE, final_buff,
 800039e:	46c0      	nop			@ (mov r8, r8)
 80003a0:	e7f0      	b.n	8000384 <main+0x60>
 80003a2:	46c0      	nop			@ (mov r8, r8)
 80003a4:	20000528 	.word	0x20000528
 80003a8:	20000628 	.word	0x20000628
 80003ac:	20000728 	.word	0x20000728
 80003b0:	20000828 	.word	0x20000828
 80003b4:	20000128 	.word	0x20000128
 80003b8:	20000028 	.word	0x20000028

080003bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003bc:	b590      	push	{r4, r7, lr}
 80003be:	b099      	sub	sp, #100	@ 0x64
 80003c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003c2:	242c      	movs	r4, #44	@ 0x2c
 80003c4:	193b      	adds	r3, r7, r4
 80003c6:	0018      	movs	r0, r3
 80003c8:	2334      	movs	r3, #52	@ 0x34
 80003ca:	001a      	movs	r2, r3
 80003cc:	2100      	movs	r1, #0
 80003ce:	f003 ff1a 	bl	8004206 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003d2:	231c      	movs	r3, #28
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	0018      	movs	r0, r3
 80003d8:	2310      	movs	r3, #16
 80003da:	001a      	movs	r2, r3
 80003dc:	2100      	movs	r1, #0
 80003de:	f003 ff12 	bl	8004206 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003e2:	003b      	movs	r3, r7
 80003e4:	0018      	movs	r0, r3
 80003e6:	231c      	movs	r3, #28
 80003e8:	001a      	movs	r2, r3
 80003ea:	2100      	movs	r1, #0
 80003ec:	f003 ff0b 	bl	8004206 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 80003f0:	193b      	adds	r3, r7, r4
 80003f2:	2220      	movs	r2, #32
 80003f4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80003f6:	193b      	adds	r3, r7, r4
 80003f8:	2201      	movs	r2, #1
 80003fa:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80003fc:	193b      	adds	r3, r7, r4
 80003fe:	2200      	movs	r2, #0
 8000400:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000402:	193b      	adds	r3, r7, r4
 8000404:	0018      	movs	r0, r3
 8000406:	f001 f8c5 	bl	8001594 <HAL_RCC_OscConfig>
 800040a:	1e03      	subs	r3, r0, #0
 800040c:	d001      	beq.n	8000412 <SystemClock_Config+0x56>
  {
    Error_Handler();
 800040e:	f000 f828 	bl	8000462 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000412:	211c      	movs	r1, #28
 8000414:	187b      	adds	r3, r7, r1
 8000416:	2207      	movs	r2, #7
 8000418:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 800041a:	187b      	adds	r3, r7, r1
 800041c:	2203      	movs	r2, #3
 800041e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000420:	187b      	adds	r3, r7, r1
 8000422:	2200      	movs	r2, #0
 8000424:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000426:	187b      	adds	r3, r7, r1
 8000428:	2200      	movs	r2, #0
 800042a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800042c:	187b      	adds	r3, r7, r1
 800042e:	2101      	movs	r1, #1
 8000430:	0018      	movs	r0, r3
 8000432:	f001 fc35 	bl	8001ca0 <HAL_RCC_ClockConfig>
 8000436:	1e03      	subs	r3, r0, #0
 8000438:	d001      	beq.n	800043e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800043a:	f000 f812 	bl	8000462 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800043e:	003b      	movs	r3, r7
 8000440:	2201      	movs	r2, #1
 8000442:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000444:	003b      	movs	r3, r7
 8000446:	2200      	movs	r2, #0
 8000448:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800044a:	003b      	movs	r3, r7
 800044c:	0018      	movs	r0, r3
 800044e:	f001 fd93 	bl	8001f78 <HAL_RCCEx_PeriphCLKConfig>
 8000452:	1e03      	subs	r3, r0, #0
 8000454:	d001      	beq.n	800045a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000456:	f000 f804 	bl	8000462 <Error_Handler>
  }
}
 800045a:	46c0      	nop			@ (mov r8, r8)
 800045c:	46bd      	mov	sp, r7
 800045e:	b019      	add	sp, #100	@ 0x64
 8000460:	bd90      	pop	{r4, r7, pc}

08000462 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000462:	b580      	push	{r7, lr}
 8000464:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000466:	b672      	cpsid	i
}
 8000468:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800046a:	46c0      	nop			@ (mov r8, r8)
 800046c:	e7fd      	b.n	800046a <Error_Handler+0x8>
	...

08000470 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b082      	sub	sp, #8
 8000474:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000476:	4b0f      	ldr	r3, [pc, #60]	@ (80004b4 <HAL_MspInit+0x44>)
 8000478:	699a      	ldr	r2, [r3, #24]
 800047a:	4b0e      	ldr	r3, [pc, #56]	@ (80004b4 <HAL_MspInit+0x44>)
 800047c:	2101      	movs	r1, #1
 800047e:	430a      	orrs	r2, r1
 8000480:	619a      	str	r2, [r3, #24]
 8000482:	4b0c      	ldr	r3, [pc, #48]	@ (80004b4 <HAL_MspInit+0x44>)
 8000484:	699b      	ldr	r3, [r3, #24]
 8000486:	2201      	movs	r2, #1
 8000488:	4013      	ands	r3, r2
 800048a:	607b      	str	r3, [r7, #4]
 800048c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800048e:	4b09      	ldr	r3, [pc, #36]	@ (80004b4 <HAL_MspInit+0x44>)
 8000490:	69da      	ldr	r2, [r3, #28]
 8000492:	4b08      	ldr	r3, [pc, #32]	@ (80004b4 <HAL_MspInit+0x44>)
 8000494:	2180      	movs	r1, #128	@ 0x80
 8000496:	0549      	lsls	r1, r1, #21
 8000498:	430a      	orrs	r2, r1
 800049a:	61da      	str	r2, [r3, #28]
 800049c:	4b05      	ldr	r3, [pc, #20]	@ (80004b4 <HAL_MspInit+0x44>)
 800049e:	69da      	ldr	r2, [r3, #28]
 80004a0:	2380      	movs	r3, #128	@ 0x80
 80004a2:	055b      	lsls	r3, r3, #21
 80004a4:	4013      	ands	r3, r2
 80004a6:	603b      	str	r3, [r7, #0]
 80004a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004aa:	46c0      	nop			@ (mov r8, r8)
 80004ac:	46bd      	mov	sp, r7
 80004ae:	b002      	add	sp, #8
 80004b0:	bd80      	pop	{r7, pc}
 80004b2:	46c0      	nop			@ (mov r8, r8)
 80004b4:	40021000 	.word	0x40021000

080004b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80004bc:	46c0      	nop			@ (mov r8, r8)
 80004be:	e7fd      	b.n	80004bc <NMI_Handler+0x4>

080004c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004c4:	46c0      	nop			@ (mov r8, r8)
 80004c6:	e7fd      	b.n	80004c4 <HardFault_Handler+0x4>

080004c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80004cc:	46c0      	nop			@ (mov r8, r8)
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bd80      	pop	{r7, pc}

080004d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004d2:	b580      	push	{r7, lr}
 80004d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004d6:	46c0      	nop			@ (mov r8, r8)
 80004d8:	46bd      	mov	sp, r7
 80004da:	bd80      	pop	{r7, pc}

080004dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004e0:	f000 fb8c 	bl	8000bfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004e4:	46c0      	nop			@ (mov r8, r8)
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bd80      	pop	{r7, pc}

080004ea <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 80004ea:	b580      	push	{r7, lr}
 80004ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80004ee:	2001      	movs	r0, #1
 80004f0:	f001 f82a 	bl	8001548 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 80004f4:	46c0      	nop			@ (mov r8, r8)
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}
	...

080004fc <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000500:	4b05      	ldr	r3, [pc, #20]	@ (8000518 <DMA1_Channel2_3_IRQHandler+0x1c>)
 8000502:	0018      	movs	r0, r3
 8000504:	f000 fd9f 	bl	8001046 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000508:	4b04      	ldr	r3, [pc, #16]	@ (800051c <DMA1_Channel2_3_IRQHandler+0x20>)
 800050a:	0018      	movs	r0, r3
 800050c:	f000 fd9b 	bl	8001046 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8000510:	46c0      	nop			@ (mov r8, r8)
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}
 8000516:	46c0      	nop			@ (mov r8, r8)
 8000518:	20000a8c 	.word	0x20000a8c
 800051c:	20000a48 	.word	0x20000a48

08000520 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000524:	4b03      	ldr	r3, [pc, #12]	@ (8000534 <TIM3_IRQHandler+0x14>)
 8000526:	0018      	movs	r0, r3
 8000528:	f001 fecc 	bl	80022c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800052c:	46c0      	nop			@ (mov r8, r8)
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}
 8000532:	46c0      	nop			@ (mov r8, r8)
 8000534:	20000928 	.word	0x20000928

08000538 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 800053c:	4b03      	ldr	r3, [pc, #12]	@ (800054c <TIM16_IRQHandler+0x14>)
 800053e:	0018      	movs	r0, r3
 8000540:	f001 fec0 	bl	80022c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8000544:	46c0      	nop			@ (mov r8, r8)
 8000546:	46bd      	mov	sp, r7
 8000548:	bd80      	pop	{r7, pc}
 800054a:	46c0      	nop			@ (mov r8, r8)
 800054c:	20000970 	.word	0x20000970

08000550 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000554:	4b03      	ldr	r3, [pc, #12]	@ (8000564 <USART1_IRQHandler+0x14>)
 8000556:	0018      	movs	r0, r3
 8000558:	f002 fda2 	bl	80030a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800055c:	46c0      	nop			@ (mov r8, r8)
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
 8000562:	46c0      	nop			@ (mov r8, r8)
 8000564:	200009c0 	.word	0x200009c0

08000568 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800056c:	46c0      	nop			@ (mov r8, r8)
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}
	...

08000574 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim16;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b08e      	sub	sp, #56	@ 0x38
 8000578:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800057a:	2328      	movs	r3, #40	@ 0x28
 800057c:	18fb      	adds	r3, r7, r3
 800057e:	0018      	movs	r0, r3
 8000580:	2310      	movs	r3, #16
 8000582:	001a      	movs	r2, r3
 8000584:	2100      	movs	r1, #0
 8000586:	f003 fe3e 	bl	8004206 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800058a:	2320      	movs	r3, #32
 800058c:	18fb      	adds	r3, r7, r3
 800058e:	0018      	movs	r0, r3
 8000590:	2308      	movs	r3, #8
 8000592:	001a      	movs	r2, r3
 8000594:	2100      	movs	r1, #0
 8000596:	f003 fe36 	bl	8004206 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800059a:	1d3b      	adds	r3, r7, #4
 800059c:	0018      	movs	r0, r3
 800059e:	231c      	movs	r3, #28
 80005a0:	001a      	movs	r2, r3
 80005a2:	2100      	movs	r1, #0
 80005a4:	f003 fe2f 	bl	8004206 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80005a8:	4b2f      	ldr	r3, [pc, #188]	@ (8000668 <MX_TIM3_Init+0xf4>)
 80005aa:	4a30      	ldr	r2, [pc, #192]	@ (800066c <MX_TIM3_Init+0xf8>)
 80005ac:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 199;
 80005ae:	4b2e      	ldr	r3, [pc, #184]	@ (8000668 <MX_TIM3_Init+0xf4>)
 80005b0:	22c7      	movs	r2, #199	@ 0xc7
 80005b2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005b4:	4b2c      	ldr	r3, [pc, #176]	@ (8000668 <MX_TIM3_Init+0xf4>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80005ba:	4b2b      	ldr	r3, [pc, #172]	@ (8000668 <MX_TIM3_Init+0xf4>)
 80005bc:	4a2c      	ldr	r2, [pc, #176]	@ (8000670 <MX_TIM3_Init+0xfc>)
 80005be:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005c0:	4b29      	ldr	r3, [pc, #164]	@ (8000668 <MX_TIM3_Init+0xf4>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005c6:	4b28      	ldr	r3, [pc, #160]	@ (8000668 <MX_TIM3_Init+0xf4>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80005cc:	4b26      	ldr	r3, [pc, #152]	@ (8000668 <MX_TIM3_Init+0xf4>)
 80005ce:	0018      	movs	r0, r3
 80005d0:	f001 fdd0 	bl	8002174 <HAL_TIM_Base_Init>
 80005d4:	1e03      	subs	r3, r0, #0
 80005d6:	d001      	beq.n	80005dc <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80005d8:	f7ff ff43 	bl	8000462 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005dc:	2128      	movs	r1, #40	@ 0x28
 80005de:	187b      	adds	r3, r7, r1
 80005e0:	2280      	movs	r2, #128	@ 0x80
 80005e2:	0152      	lsls	r2, r2, #5
 80005e4:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80005e6:	187a      	adds	r2, r7, r1
 80005e8:	4b1f      	ldr	r3, [pc, #124]	@ (8000668 <MX_TIM3_Init+0xf4>)
 80005ea:	0011      	movs	r1, r2
 80005ec:	0018      	movs	r0, r3
 80005ee:	f002 f81d 	bl	800262c <HAL_TIM_ConfigClockSource>
 80005f2:	1e03      	subs	r3, r0, #0
 80005f4:	d001      	beq.n	80005fa <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 80005f6:	f7ff ff34 	bl	8000462 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80005fa:	4b1b      	ldr	r3, [pc, #108]	@ (8000668 <MX_TIM3_Init+0xf4>)
 80005fc:	0018      	movs	r0, r3
 80005fe:	f001 fe09 	bl	8002214 <HAL_TIM_PWM_Init>
 8000602:	1e03      	subs	r3, r0, #0
 8000604:	d001      	beq.n	800060a <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000606:	f7ff ff2c 	bl	8000462 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800060a:	2120      	movs	r1, #32
 800060c:	187b      	adds	r3, r7, r1
 800060e:	2200      	movs	r2, #0
 8000610:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000612:	187b      	adds	r3, r7, r1
 8000614:	2200      	movs	r2, #0
 8000616:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000618:	187a      	adds	r2, r7, r1
 800061a:	4b13      	ldr	r3, [pc, #76]	@ (8000668 <MX_TIM3_Init+0xf4>)
 800061c:	0011      	movs	r1, r2
 800061e:	0018      	movs	r0, r3
 8000620:	f002 fc24 	bl	8002e6c <HAL_TIMEx_MasterConfigSynchronization>
 8000624:	1e03      	subs	r3, r0, #0
 8000626:	d001      	beq.n	800062c <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8000628:	f7ff ff1b 	bl	8000462 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800062c:	1d3b      	adds	r3, r7, #4
 800062e:	2260      	movs	r2, #96	@ 0x60
 8000630:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000632:	1d3b      	adds	r3, r7, #4
 8000634:	2200      	movs	r2, #0
 8000636:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000638:	1d3b      	adds	r3, r7, #4
 800063a:	2200      	movs	r2, #0
 800063c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800063e:	1d3b      	adds	r3, r7, #4
 8000640:	2200      	movs	r2, #0
 8000642:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000644:	1d39      	adds	r1, r7, #4
 8000646:	4b08      	ldr	r3, [pc, #32]	@ (8000668 <MX_TIM3_Init+0xf4>)
 8000648:	2208      	movs	r2, #8
 800064a:	0018      	movs	r0, r3
 800064c:	f001 ff28 	bl	80024a0 <HAL_TIM_PWM_ConfigChannel>
 8000650:	1e03      	subs	r3, r0, #0
 8000652:	d001      	beq.n	8000658 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 8000654:	f7ff ff05 	bl	8000462 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000658:	4b03      	ldr	r3, [pc, #12]	@ (8000668 <MX_TIM3_Init+0xf4>)
 800065a:	0018      	movs	r0, r3
 800065c:	f000 f878 	bl	8000750 <HAL_TIM_MspPostInit>

}
 8000660:	46c0      	nop			@ (mov r8, r8)
 8000662:	46bd      	mov	sp, r7
 8000664:	b00e      	add	sp, #56	@ 0x38
 8000666:	bd80      	pop	{r7, pc}
 8000668:	20000928 	.word	0x20000928
 800066c:	40000400 	.word	0x40000400
 8000670:	000003e7 	.word	0x000003e7

08000674 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000678:	4b0f      	ldr	r3, [pc, #60]	@ (80006b8 <MX_TIM16_Init+0x44>)
 800067a:	4a10      	ldr	r2, [pc, #64]	@ (80006bc <MX_TIM16_Init+0x48>)
 800067c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 47999;
 800067e:	4b0e      	ldr	r3, [pc, #56]	@ (80006b8 <MX_TIM16_Init+0x44>)
 8000680:	4a0f      	ldr	r2, [pc, #60]	@ (80006c0 <MX_TIM16_Init+0x4c>)
 8000682:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000684:	4b0c      	ldr	r3, [pc, #48]	@ (80006b8 <MX_TIM16_Init+0x44>)
 8000686:	2200      	movs	r2, #0
 8000688:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 999;
 800068a:	4b0b      	ldr	r3, [pc, #44]	@ (80006b8 <MX_TIM16_Init+0x44>)
 800068c:	4a0d      	ldr	r2, [pc, #52]	@ (80006c4 <MX_TIM16_Init+0x50>)
 800068e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000690:	4b09      	ldr	r3, [pc, #36]	@ (80006b8 <MX_TIM16_Init+0x44>)
 8000692:	2200      	movs	r2, #0
 8000694:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 1;
 8000696:	4b08      	ldr	r3, [pc, #32]	@ (80006b8 <MX_TIM16_Init+0x44>)
 8000698:	2201      	movs	r2, #1
 800069a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800069c:	4b06      	ldr	r3, [pc, #24]	@ (80006b8 <MX_TIM16_Init+0x44>)
 800069e:	2200      	movs	r2, #0
 80006a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80006a2:	4b05      	ldr	r3, [pc, #20]	@ (80006b8 <MX_TIM16_Init+0x44>)
 80006a4:	0018      	movs	r0, r3
 80006a6:	f001 fd65 	bl	8002174 <HAL_TIM_Base_Init>
 80006aa:	1e03      	subs	r3, r0, #0
 80006ac:	d001      	beq.n	80006b2 <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 80006ae:	f7ff fed8 	bl	8000462 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80006b2:	46c0      	nop			@ (mov r8, r8)
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	20000970 	.word	0x20000970
 80006bc:	40014400 	.word	0x40014400
 80006c0:	0000bb7f 	.word	0x0000bb7f
 80006c4:	000003e7 	.word	0x000003e7

080006c8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b084      	sub	sp, #16
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a1b      	ldr	r2, [pc, #108]	@ (8000744 <HAL_TIM_Base_MspInit+0x7c>)
 80006d6:	4293      	cmp	r3, r2
 80006d8:	d114      	bne.n	8000704 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80006da:	4b1b      	ldr	r3, [pc, #108]	@ (8000748 <HAL_TIM_Base_MspInit+0x80>)
 80006dc:	69da      	ldr	r2, [r3, #28]
 80006de:	4b1a      	ldr	r3, [pc, #104]	@ (8000748 <HAL_TIM_Base_MspInit+0x80>)
 80006e0:	2102      	movs	r1, #2
 80006e2:	430a      	orrs	r2, r1
 80006e4:	61da      	str	r2, [r3, #28]
 80006e6:	4b18      	ldr	r3, [pc, #96]	@ (8000748 <HAL_TIM_Base_MspInit+0x80>)
 80006e8:	69db      	ldr	r3, [r3, #28]
 80006ea:	2202      	movs	r2, #2
 80006ec:	4013      	ands	r3, r2
 80006ee:	60fb      	str	r3, [r7, #12]
 80006f0:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80006f2:	2200      	movs	r2, #0
 80006f4:	2100      	movs	r1, #0
 80006f6:	2010      	movs	r0, #16
 80006f8:	f000 fb48 	bl	8000d8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80006fc:	2010      	movs	r0, #16
 80006fe:	f000 fb5a 	bl	8000db6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8000702:	e01a      	b.n	800073a <HAL_TIM_Base_MspInit+0x72>
  else if(tim_baseHandle->Instance==TIM16)
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4a10      	ldr	r2, [pc, #64]	@ (800074c <HAL_TIM_Base_MspInit+0x84>)
 800070a:	4293      	cmp	r3, r2
 800070c:	d115      	bne.n	800073a <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800070e:	4b0e      	ldr	r3, [pc, #56]	@ (8000748 <HAL_TIM_Base_MspInit+0x80>)
 8000710:	699a      	ldr	r2, [r3, #24]
 8000712:	4b0d      	ldr	r3, [pc, #52]	@ (8000748 <HAL_TIM_Base_MspInit+0x80>)
 8000714:	2180      	movs	r1, #128	@ 0x80
 8000716:	0289      	lsls	r1, r1, #10
 8000718:	430a      	orrs	r2, r1
 800071a:	619a      	str	r2, [r3, #24]
 800071c:	4b0a      	ldr	r3, [pc, #40]	@ (8000748 <HAL_TIM_Base_MspInit+0x80>)
 800071e:	699a      	ldr	r2, [r3, #24]
 8000720:	2380      	movs	r3, #128	@ 0x80
 8000722:	029b      	lsls	r3, r3, #10
 8000724:	4013      	ands	r3, r2
 8000726:	60bb      	str	r3, [r7, #8]
 8000728:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 800072a:	2200      	movs	r2, #0
 800072c:	2100      	movs	r1, #0
 800072e:	2015      	movs	r0, #21
 8000730:	f000 fb2c 	bl	8000d8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8000734:	2015      	movs	r0, #21
 8000736:	f000 fb3e 	bl	8000db6 <HAL_NVIC_EnableIRQ>
}
 800073a:	46c0      	nop			@ (mov r8, r8)
 800073c:	46bd      	mov	sp, r7
 800073e:	b004      	add	sp, #16
 8000740:	bd80      	pop	{r7, pc}
 8000742:	46c0      	nop			@ (mov r8, r8)
 8000744:	40000400 	.word	0x40000400
 8000748:	40021000 	.word	0x40021000
 800074c:	40014400 	.word	0x40014400

08000750 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000750:	b590      	push	{r4, r7, lr}
 8000752:	b089      	sub	sp, #36	@ 0x24
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000758:	240c      	movs	r4, #12
 800075a:	193b      	adds	r3, r7, r4
 800075c:	0018      	movs	r0, r3
 800075e:	2314      	movs	r3, #20
 8000760:	001a      	movs	r2, r3
 8000762:	2100      	movs	r1, #0
 8000764:	f003 fd4f 	bl	8004206 <memset>
  if(timHandle->Instance==TIM3)
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4a15      	ldr	r2, [pc, #84]	@ (80007c4 <HAL_TIM_MspPostInit+0x74>)
 800076e:	4293      	cmp	r3, r2
 8000770:	d124      	bne.n	80007bc <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000772:	4b15      	ldr	r3, [pc, #84]	@ (80007c8 <HAL_TIM_MspPostInit+0x78>)
 8000774:	695a      	ldr	r2, [r3, #20]
 8000776:	4b14      	ldr	r3, [pc, #80]	@ (80007c8 <HAL_TIM_MspPostInit+0x78>)
 8000778:	2180      	movs	r1, #128	@ 0x80
 800077a:	0309      	lsls	r1, r1, #12
 800077c:	430a      	orrs	r2, r1
 800077e:	615a      	str	r2, [r3, #20]
 8000780:	4b11      	ldr	r3, [pc, #68]	@ (80007c8 <HAL_TIM_MspPostInit+0x78>)
 8000782:	695a      	ldr	r2, [r3, #20]
 8000784:	2380      	movs	r3, #128	@ 0x80
 8000786:	031b      	lsls	r3, r3, #12
 8000788:	4013      	ands	r3, r2
 800078a:	60bb      	str	r3, [r7, #8]
 800078c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800078e:	193b      	adds	r3, r7, r4
 8000790:	2280      	movs	r2, #128	@ 0x80
 8000792:	0052      	lsls	r2, r2, #1
 8000794:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000796:	0021      	movs	r1, r4
 8000798:	187b      	adds	r3, r7, r1
 800079a:	2202      	movs	r2, #2
 800079c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079e:	187b      	adds	r3, r7, r1
 80007a0:	2200      	movs	r2, #0
 80007a2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a4:	187b      	adds	r3, r7, r1
 80007a6:	2200      	movs	r2, #0
 80007a8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_TIM3;
 80007aa:	187b      	adds	r3, r7, r1
 80007ac:	2200      	movs	r2, #0
 80007ae:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007b0:	187b      	adds	r3, r7, r1
 80007b2:	4a06      	ldr	r2, [pc, #24]	@ (80007cc <HAL_TIM_MspPostInit+0x7c>)
 80007b4:	0019      	movs	r1, r3
 80007b6:	0010      	movs	r0, r2
 80007b8:	f000 fd30 	bl	800121c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80007bc:	46c0      	nop			@ (mov r8, r8)
 80007be:	46bd      	mov	sp, r7
 80007c0:	b009      	add	sp, #36	@ 0x24
 80007c2:	bd90      	pop	{r4, r7, pc}
 80007c4:	40000400 	.word	0x40000400
 80007c8:	40021000 	.word	0x40021000
 80007cc:	48000800 	.word	0x48000800

080007d0 <HAL_UART_RxCpltCallback>:
/* USER CODE BEGIN 0 */
uint8_t uart1_rx_cnt = 0; // Receive buffer count

volatile bool is_data_ready_to_be_read = false;
volatile bool is_rx_full_completed = false;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a06      	ldr	r2, [pc, #24]	@ (80007f8 <HAL_UART_RxCpltCallback+0x28>)
 80007de:	4293      	cmp	r3, r2
 80007e0:	d105      	bne.n	80007ee <HAL_UART_RxCpltCallback+0x1e>
		is_data_ready_to_be_read = true;
 80007e2:	4b06      	ldr	r3, [pc, #24]	@ (80007fc <HAL_UART_RxCpltCallback+0x2c>)
 80007e4:	2201      	movs	r2, #1
 80007e6:	701a      	strb	r2, [r3, #0]
		is_rx_full_completed = true;
 80007e8:	4b05      	ldr	r3, [pc, #20]	@ (8000800 <HAL_UART_RxCpltCallback+0x30>)
 80007ea:	2201      	movs	r2, #1
 80007ec:	701a      	strb	r2, [r3, #0]
	}
}
 80007ee:	46c0      	nop			@ (mov r8, r8)
 80007f0:	46bd      	mov	sp, r7
 80007f2:	b002      	add	sp, #8
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	46c0      	nop			@ (mov r8, r8)
 80007f8:	40013800 	.word	0x40013800
 80007fc:	200009b8 	.word	0x200009b8
 8000800:	200009b9 	.word	0x200009b9

08000804 <HAL_UART_TxCpltCallback>:

volatile bool is_tx_completed = false;
volatile bool is_tx_full_completed = false;
/* Регистр TXE пуст */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	4a06      	ldr	r2, [pc, #24]	@ (800082c <HAL_UART_TxCpltCallback+0x28>)
 8000812:	4293      	cmp	r3, r2
 8000814:	d105      	bne.n	8000822 <HAL_UART_TxCpltCallback+0x1e>
		is_tx_completed = true;
 8000816:	4b06      	ldr	r3, [pc, #24]	@ (8000830 <HAL_UART_TxCpltCallback+0x2c>)
 8000818:	2201      	movs	r2, #1
 800081a:	701a      	strb	r2, [r3, #0]
		is_tx_full_completed = true;
 800081c:	4b05      	ldr	r3, [pc, #20]	@ (8000834 <HAL_UART_TxCpltCallback+0x30>)
 800081e:	2201      	movs	r2, #1
 8000820:	701a      	strb	r2, [r3, #0]
	}
}
 8000822:	46c0      	nop			@ (mov r8, r8)
 8000824:	46bd      	mov	sp, r7
 8000826:	b002      	add	sp, #8
 8000828:	bd80      	pop	{r7, pc}
 800082a:	46c0      	nop			@ (mov r8, r8)
 800082c:	40013800 	.word	0x40013800
 8000830:	200009ba 	.word	0x200009ba
 8000834:	200009bb 	.word	0x200009bb

08000838 <HAL_UART_RxHalfCpltCallback>:

volatile bool is_rx_half_completed = false;
void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart) {
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4a04      	ldr	r2, [pc, #16]	@ (8000858 <HAL_UART_RxHalfCpltCallback+0x20>)
 8000846:	4293      	cmp	r3, r2
 8000848:	d102      	bne.n	8000850 <HAL_UART_RxHalfCpltCallback+0x18>
		is_rx_half_completed = true;
 800084a:	4b04      	ldr	r3, [pc, #16]	@ (800085c <HAL_UART_RxHalfCpltCallback+0x24>)
 800084c:	2201      	movs	r2, #1
 800084e:	701a      	strb	r2, [r3, #0]
	}
}
 8000850:	46c0      	nop			@ (mov r8, r8)
 8000852:	46bd      	mov	sp, r7
 8000854:	b002      	add	sp, #8
 8000856:	bd80      	pop	{r7, pc}
 8000858:	40013800 	.word	0x40013800
 800085c:	200009bc 	.word	0x200009bc

08000860 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000864:	4b14      	ldr	r3, [pc, #80]	@ (80008b8 <MX_USART1_UART_Init+0x58>)
 8000866:	4a15      	ldr	r2, [pc, #84]	@ (80008bc <MX_USART1_UART_Init+0x5c>)
 8000868:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800086a:	4b13      	ldr	r3, [pc, #76]	@ (80008b8 <MX_USART1_UART_Init+0x58>)
 800086c:	2296      	movs	r2, #150	@ 0x96
 800086e:	0192      	lsls	r2, r2, #6
 8000870:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000872:	4b11      	ldr	r3, [pc, #68]	@ (80008b8 <MX_USART1_UART_Init+0x58>)
 8000874:	2200      	movs	r2, #0
 8000876:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000878:	4b0f      	ldr	r3, [pc, #60]	@ (80008b8 <MX_USART1_UART_Init+0x58>)
 800087a:	2200      	movs	r2, #0
 800087c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800087e:	4b0e      	ldr	r3, [pc, #56]	@ (80008b8 <MX_USART1_UART_Init+0x58>)
 8000880:	2200      	movs	r2, #0
 8000882:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000884:	4b0c      	ldr	r3, [pc, #48]	@ (80008b8 <MX_USART1_UART_Init+0x58>)
 8000886:	220c      	movs	r2, #12
 8000888:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800088a:	4b0b      	ldr	r3, [pc, #44]	@ (80008b8 <MX_USART1_UART_Init+0x58>)
 800088c:	2200      	movs	r2, #0
 800088e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000890:	4b09      	ldr	r3, [pc, #36]	@ (80008b8 <MX_USART1_UART_Init+0x58>)
 8000892:	2200      	movs	r2, #0
 8000894:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000896:	4b08      	ldr	r3, [pc, #32]	@ (80008b8 <MX_USART1_UART_Init+0x58>)
 8000898:	2200      	movs	r2, #0
 800089a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800089c:	4b06      	ldr	r3, [pc, #24]	@ (80008b8 <MX_USART1_UART_Init+0x58>)
 800089e:	2200      	movs	r2, #0
 80008a0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008a2:	4b05      	ldr	r3, [pc, #20]	@ (80008b8 <MX_USART1_UART_Init+0x58>)
 80008a4:	0018      	movs	r0, r3
 80008a6:	f002 fb4f 	bl	8002f48 <HAL_UART_Init>
 80008aa:	1e03      	subs	r3, r0, #0
 80008ac:	d001      	beq.n	80008b2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80008ae:	f7ff fdd8 	bl	8000462 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008b2:	46c0      	nop			@ (mov r8, r8)
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	200009c0 	.word	0x200009c0
 80008bc:	40013800 	.word	0x40013800

080008c0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80008c0:	b590      	push	{r4, r7, lr}
 80008c2:	b08b      	sub	sp, #44	@ 0x2c
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c8:	2414      	movs	r4, #20
 80008ca:	193b      	adds	r3, r7, r4
 80008cc:	0018      	movs	r0, r3
 80008ce:	2314      	movs	r3, #20
 80008d0:	001a      	movs	r2, r3
 80008d2:	2100      	movs	r1, #0
 80008d4:	f003 fc97 	bl	8004206 <memset>
  if(uartHandle->Instance==USART1)
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4a47      	ldr	r2, [pc, #284]	@ (80009fc <HAL_UART_MspInit+0x13c>)
 80008de:	4293      	cmp	r3, r2
 80008e0:	d000      	beq.n	80008e4 <HAL_UART_MspInit+0x24>
 80008e2:	e087      	b.n	80009f4 <HAL_UART_MspInit+0x134>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80008e4:	4b46      	ldr	r3, [pc, #280]	@ (8000a00 <HAL_UART_MspInit+0x140>)
 80008e6:	699a      	ldr	r2, [r3, #24]
 80008e8:	4b45      	ldr	r3, [pc, #276]	@ (8000a00 <HAL_UART_MspInit+0x140>)
 80008ea:	2180      	movs	r1, #128	@ 0x80
 80008ec:	01c9      	lsls	r1, r1, #7
 80008ee:	430a      	orrs	r2, r1
 80008f0:	619a      	str	r2, [r3, #24]
 80008f2:	4b43      	ldr	r3, [pc, #268]	@ (8000a00 <HAL_UART_MspInit+0x140>)
 80008f4:	699a      	ldr	r2, [r3, #24]
 80008f6:	2380      	movs	r3, #128	@ 0x80
 80008f8:	01db      	lsls	r3, r3, #7
 80008fa:	4013      	ands	r3, r2
 80008fc:	613b      	str	r3, [r7, #16]
 80008fe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000900:	4b3f      	ldr	r3, [pc, #252]	@ (8000a00 <HAL_UART_MspInit+0x140>)
 8000902:	695a      	ldr	r2, [r3, #20]
 8000904:	4b3e      	ldr	r3, [pc, #248]	@ (8000a00 <HAL_UART_MspInit+0x140>)
 8000906:	2180      	movs	r1, #128	@ 0x80
 8000908:	0289      	lsls	r1, r1, #10
 800090a:	430a      	orrs	r2, r1
 800090c:	615a      	str	r2, [r3, #20]
 800090e:	4b3c      	ldr	r3, [pc, #240]	@ (8000a00 <HAL_UART_MspInit+0x140>)
 8000910:	695a      	ldr	r2, [r3, #20]
 8000912:	2380      	movs	r3, #128	@ 0x80
 8000914:	029b      	lsls	r3, r3, #10
 8000916:	4013      	ands	r3, r2
 8000918:	60fb      	str	r3, [r7, #12]
 800091a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800091c:	193b      	adds	r3, r7, r4
 800091e:	22c0      	movs	r2, #192	@ 0xc0
 8000920:	00d2      	lsls	r2, r2, #3
 8000922:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000924:	0021      	movs	r1, r4
 8000926:	187b      	adds	r3, r7, r1
 8000928:	2202      	movs	r2, #2
 800092a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	187b      	adds	r3, r7, r1
 800092e:	2200      	movs	r2, #0
 8000930:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000932:	187b      	adds	r3, r7, r1
 8000934:	2203      	movs	r2, #3
 8000936:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000938:	187b      	adds	r3, r7, r1
 800093a:	2201      	movs	r2, #1
 800093c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800093e:	187a      	adds	r2, r7, r1
 8000940:	2390      	movs	r3, #144	@ 0x90
 8000942:	05db      	lsls	r3, r3, #23
 8000944:	0011      	movs	r1, r2
 8000946:	0018      	movs	r0, r3
 8000948:	f000 fc68 	bl	800121c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel3;
 800094c:	4b2d      	ldr	r3, [pc, #180]	@ (8000a04 <HAL_UART_MspInit+0x144>)
 800094e:	4a2e      	ldr	r2, [pc, #184]	@ (8000a08 <HAL_UART_MspInit+0x148>)
 8000950:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000952:	4b2c      	ldr	r3, [pc, #176]	@ (8000a04 <HAL_UART_MspInit+0x144>)
 8000954:	2200      	movs	r2, #0
 8000956:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000958:	4b2a      	ldr	r3, [pc, #168]	@ (8000a04 <HAL_UART_MspInit+0x144>)
 800095a:	2200      	movs	r2, #0
 800095c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800095e:	4b29      	ldr	r3, [pc, #164]	@ (8000a04 <HAL_UART_MspInit+0x144>)
 8000960:	2280      	movs	r2, #128	@ 0x80
 8000962:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000964:	4b27      	ldr	r3, [pc, #156]	@ (8000a04 <HAL_UART_MspInit+0x144>)
 8000966:	2200      	movs	r2, #0
 8000968:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800096a:	4b26      	ldr	r3, [pc, #152]	@ (8000a04 <HAL_UART_MspInit+0x144>)
 800096c:	2200      	movs	r2, #0
 800096e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000970:	4b24      	ldr	r3, [pc, #144]	@ (8000a04 <HAL_UART_MspInit+0x144>)
 8000972:	2200      	movs	r2, #0
 8000974:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000976:	4b23      	ldr	r3, [pc, #140]	@ (8000a04 <HAL_UART_MspInit+0x144>)
 8000978:	2200      	movs	r2, #0
 800097a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800097c:	4b21      	ldr	r3, [pc, #132]	@ (8000a04 <HAL_UART_MspInit+0x144>)
 800097e:	0018      	movs	r0, r3
 8000980:	f000 fa36 	bl	8000df0 <HAL_DMA_Init>
 8000984:	1e03      	subs	r3, r0, #0
 8000986:	d001      	beq.n	800098c <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8000988:	f7ff fd6b 	bl	8000462 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	4a1d      	ldr	r2, [pc, #116]	@ (8000a04 <HAL_UART_MspInit+0x144>)
 8000990:	675a      	str	r2, [r3, #116]	@ 0x74
 8000992:	4b1c      	ldr	r3, [pc, #112]	@ (8000a04 <HAL_UART_MspInit+0x144>)
 8000994:	687a      	ldr	r2, [r7, #4]
 8000996:	625a      	str	r2, [r3, #36]	@ 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8000998:	4b1c      	ldr	r3, [pc, #112]	@ (8000a0c <HAL_UART_MspInit+0x14c>)
 800099a:	4a1d      	ldr	r2, [pc, #116]	@ (8000a10 <HAL_UART_MspInit+0x150>)
 800099c:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800099e:	4b1b      	ldr	r3, [pc, #108]	@ (8000a0c <HAL_UART_MspInit+0x14c>)
 80009a0:	2210      	movs	r2, #16
 80009a2:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009a4:	4b19      	ldr	r3, [pc, #100]	@ (8000a0c <HAL_UART_MspInit+0x14c>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80009aa:	4b18      	ldr	r3, [pc, #96]	@ (8000a0c <HAL_UART_MspInit+0x14c>)
 80009ac:	2280      	movs	r2, #128	@ 0x80
 80009ae:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80009b0:	4b16      	ldr	r3, [pc, #88]	@ (8000a0c <HAL_UART_MspInit+0x14c>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80009b6:	4b15      	ldr	r3, [pc, #84]	@ (8000a0c <HAL_UART_MspInit+0x14c>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80009bc:	4b13      	ldr	r3, [pc, #76]	@ (8000a0c <HAL_UART_MspInit+0x14c>)
 80009be:	2200      	movs	r2, #0
 80009c0:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80009c2:	4b12      	ldr	r3, [pc, #72]	@ (8000a0c <HAL_UART_MspInit+0x14c>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80009c8:	4b10      	ldr	r3, [pc, #64]	@ (8000a0c <HAL_UART_MspInit+0x14c>)
 80009ca:	0018      	movs	r0, r3
 80009cc:	f000 fa10 	bl	8000df0 <HAL_DMA_Init>
 80009d0:	1e03      	subs	r3, r0, #0
 80009d2:	d001      	beq.n	80009d8 <HAL_UART_MspInit+0x118>
    {
      Error_Handler();
 80009d4:	f7ff fd45 	bl	8000462 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	4a0c      	ldr	r2, [pc, #48]	@ (8000a0c <HAL_UART_MspInit+0x14c>)
 80009dc:	671a      	str	r2, [r3, #112]	@ 0x70
 80009de:	4b0b      	ldr	r3, [pc, #44]	@ (8000a0c <HAL_UART_MspInit+0x14c>)
 80009e0:	687a      	ldr	r2, [r7, #4]
 80009e2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80009e4:	2200      	movs	r2, #0
 80009e6:	2100      	movs	r1, #0
 80009e8:	201b      	movs	r0, #27
 80009ea:	f000 f9cf 	bl	8000d8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80009ee:	201b      	movs	r0, #27
 80009f0:	f000 f9e1 	bl	8000db6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80009f4:	46c0      	nop			@ (mov r8, r8)
 80009f6:	46bd      	mov	sp, r7
 80009f8:	b00b      	add	sp, #44	@ 0x2c
 80009fa:	bd90      	pop	{r4, r7, pc}
 80009fc:	40013800 	.word	0x40013800
 8000a00:	40021000 	.word	0x40021000
 8000a04:	20000a48 	.word	0x20000a48
 8000a08:	40020030 	.word	0x40020030
 8000a0c:	20000a8c 	.word	0x20000a8c
 8000a10:	4002001c 	.word	0x4002001c

08000a14 <receive_data_from_uart_dma>:

}

uint32_t index_byte = 0;
void receive_data_from_uart_dma(char *rx_buff, uint16_t rx_buff_len,
		char *final_buff, uint16_t final_buff_len) {
 8000a14:	b5b0      	push	{r4, r5, r7, lr}
 8000a16:	b086      	sub	sp, #24
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	60f8      	str	r0, [r7, #12]
 8000a1c:	0008      	movs	r0, r1
 8000a1e:	607a      	str	r2, [r7, #4]
 8000a20:	0019      	movs	r1, r3
 8000a22:	250a      	movs	r5, #10
 8000a24:	197b      	adds	r3, r7, r5
 8000a26:	1c02      	adds	r2, r0, #0
 8000a28:	801a      	strh	r2, [r3, #0]
 8000a2a:	2308      	movs	r3, #8
 8000a2c:	18fb      	adds	r3, r7, r3
 8000a2e:	1c0a      	adds	r2, r1, #0
 8000a30:	801a      	strh	r2, [r3, #0]

	uint16_t rx_half_len = rx_buff_len / 2;
 8000a32:	2416      	movs	r4, #22
 8000a34:	193b      	adds	r3, r7, r4
 8000a36:	197a      	adds	r2, r7, r5
 8000a38:	8812      	ldrh	r2, [r2, #0]
 8000a3a:	0852      	lsrs	r2, r2, #1
 8000a3c:	801a      	strh	r2, [r3, #0]

	HAL_UART_Receive_DMA(&huart1, (uint8_t*) rx_buff, rx_buff_len);
 8000a3e:	197b      	adds	r3, r7, r5
 8000a40:	881a      	ldrh	r2, [r3, #0]
 8000a42:	68f9      	ldr	r1, [r7, #12]
 8000a44:	4b30      	ldr	r3, [pc, #192]	@ (8000b08 <receive_data_from_uart_dma+0xf4>)
 8000a46:	0018      	movs	r0, r3
 8000a48:	f002 fad2 	bl	8002ff0 <HAL_UART_Receive_DMA>

	if (is_rx_half_completed) {
 8000a4c:	4b2f      	ldr	r3, [pc, #188]	@ (8000b0c <receive_data_from_uart_dma+0xf8>)
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	b2db      	uxtb	r3, r3
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d01a      	beq.n	8000a8c <receive_data_from_uart_dma+0x78>
		is_rx_half_completed = false;
 8000a56:	4b2d      	ldr	r3, [pc, #180]	@ (8000b0c <receive_data_from_uart_dma+0xf8>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	701a      	strb	r2, [r3, #0]

		memcpy(final_buff + index_byte, rx_buff, rx_half_len);
 8000a5c:	4b2c      	ldr	r3, [pc, #176]	@ (8000b10 <receive_data_from_uart_dma+0xfc>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	687a      	ldr	r2, [r7, #4]
 8000a62:	18d0      	adds	r0, r2, r3
 8000a64:	193b      	adds	r3, r7, r4
 8000a66:	881a      	ldrh	r2, [r3, #0]
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	0019      	movs	r1, r3
 8000a6c:	f003 fbf8 	bl	8004260 <memcpy>
		memset(rx_buff, '\0', rx_half_len);
 8000a70:	193b      	adds	r3, r7, r4
 8000a72:	881a      	ldrh	r2, [r3, #0]
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	2100      	movs	r1, #0
 8000a78:	0018      	movs	r0, r3
 8000a7a:	f003 fbc4 	bl	8004206 <memset>
		index_byte += rx_half_len;
 8000a7e:	193b      	adds	r3, r7, r4
 8000a80:	881a      	ldrh	r2, [r3, #0]
 8000a82:	4b23      	ldr	r3, [pc, #140]	@ (8000b10 <receive_data_from_uart_dma+0xfc>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	18d2      	adds	r2, r2, r3
 8000a88:	4b21      	ldr	r3, [pc, #132]	@ (8000b10 <receive_data_from_uart_dma+0xfc>)
 8000a8a:	601a      	str	r2, [r3, #0]
	}

	if (is_rx_full_completed) {
 8000a8c:	4b21      	ldr	r3, [pc, #132]	@ (8000b14 <receive_data_from_uart_dma+0x100>)
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d023      	beq.n	8000ade <receive_data_from_uart_dma+0xca>
		is_rx_full_completed = false;
 8000a96:	4b1f      	ldr	r3, [pc, #124]	@ (8000b14 <receive_data_from_uart_dma+0x100>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	701a      	strb	r2, [r3, #0]

		memcpy(final_buff + index_byte, rx_buff + index_byte, rx_half_len);
 8000a9c:	4b1c      	ldr	r3, [pc, #112]	@ (8000b10 <receive_data_from_uart_dma+0xfc>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	687a      	ldr	r2, [r7, #4]
 8000aa2:	18d0      	adds	r0, r2, r3
 8000aa4:	4b1a      	ldr	r3, [pc, #104]	@ (8000b10 <receive_data_from_uart_dma+0xfc>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	68fa      	ldr	r2, [r7, #12]
 8000aaa:	18d1      	adds	r1, r2, r3
 8000aac:	2416      	movs	r4, #22
 8000aae:	193b      	adds	r3, r7, r4
 8000ab0:	881b      	ldrh	r3, [r3, #0]
 8000ab2:	001a      	movs	r2, r3
 8000ab4:	f003 fbd4 	bl	8004260 <memcpy>
		memset(rx_buff + rx_half_len, '\0', rx_half_len);
 8000ab8:	0021      	movs	r1, r4
 8000aba:	187b      	adds	r3, r7, r1
 8000abc:	881b      	ldrh	r3, [r3, #0]
 8000abe:	68fa      	ldr	r2, [r7, #12]
 8000ac0:	18d0      	adds	r0, r2, r3
 8000ac2:	000c      	movs	r4, r1
 8000ac4:	187b      	adds	r3, r7, r1
 8000ac6:	881b      	ldrh	r3, [r3, #0]
 8000ac8:	001a      	movs	r2, r3
 8000aca:	2100      	movs	r1, #0
 8000acc:	f003 fb9b 	bl	8004206 <memset>
		index_byte += rx_half_len;
 8000ad0:	193b      	adds	r3, r7, r4
 8000ad2:	881a      	ldrh	r2, [r3, #0]
 8000ad4:	4b0e      	ldr	r3, [pc, #56]	@ (8000b10 <receive_data_from_uart_dma+0xfc>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	18d2      	adds	r2, r2, r3
 8000ada:	4b0d      	ldr	r3, [pc, #52]	@ (8000b10 <receive_data_from_uart_dma+0xfc>)
 8000adc:	601a      	str	r2, [r3, #0]
	}

		if (index_byte == final_buff_len) {
 8000ade:	2108      	movs	r1, #8
 8000ae0:	187b      	adds	r3, r7, r1
 8000ae2:	881a      	ldrh	r2, [r3, #0]
 8000ae4:	4b0a      	ldr	r3, [pc, #40]	@ (8000b10 <receive_data_from_uart_dma+0xfc>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	429a      	cmp	r2, r3
 8000aea:	d109      	bne.n	8000b00 <receive_data_from_uart_dma+0xec>
			index_byte = 0;
 8000aec:	4b08      	ldr	r3, [pc, #32]	@ (8000b10 <receive_data_from_uart_dma+0xfc>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	601a      	str	r2, [r3, #0]
			memset(final_buff, '\0', final_buff_len);
 8000af2:	187b      	adds	r3, r7, r1
 8000af4:	881a      	ldrh	r2, [r3, #0]
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	2100      	movs	r1, #0
 8000afa:	0018      	movs	r0, r3
 8000afc:	f003 fb83 	bl	8004206 <memset>
		}

}
 8000b00:	46c0      	nop			@ (mov r8, r8)
 8000b02:	46bd      	mov	sp, r7
 8000b04:	b006      	add	sp, #24
 8000b06:	bdb0      	pop	{r4, r5, r7, pc}
 8000b08:	200009c0 	.word	0x200009c0
 8000b0c:	200009bc 	.word	0x200009bc
 8000b10:	20000ad0 	.word	0x20000ad0
 8000b14:	200009b9 	.word	0x200009b9

08000b18 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b18:	480d      	ldr	r0, [pc, #52]	@ (8000b50 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b1a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b1c:	f7ff fd24 	bl	8000568 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b20:	480c      	ldr	r0, [pc, #48]	@ (8000b54 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b22:	490d      	ldr	r1, [pc, #52]	@ (8000b58 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b24:	4a0d      	ldr	r2, [pc, #52]	@ (8000b5c <LoopForever+0xe>)
  movs r3, #0
 8000b26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b28:	e002      	b.n	8000b30 <LoopCopyDataInit>

08000b2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b2e:	3304      	adds	r3, #4

08000b30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b34:	d3f9      	bcc.n	8000b2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b36:	4a0a      	ldr	r2, [pc, #40]	@ (8000b60 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b38:	4c0a      	ldr	r4, [pc, #40]	@ (8000b64 <LoopForever+0x16>)
  movs r3, #0
 8000b3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b3c:	e001      	b.n	8000b42 <LoopFillZerobss>

08000b3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b40:	3204      	adds	r2, #4

08000b42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b44:	d3fb      	bcc.n	8000b3e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b46:	f003 fb67 	bl	8004218 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b4a:	f7ff fbeb 	bl	8000324 <main>

08000b4e <LoopForever>:

LoopForever:
    b LoopForever
 8000b4e:	e7fe      	b.n	8000b4e <LoopForever>
  ldr   r0, =_estack
 8000b50:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000b54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b58:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b5c:	080042cc 	.word	0x080042cc
  ldr r2, =_sbss
 8000b60:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b64:	20000ad8 	.word	0x20000ad8

08000b68 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b68:	e7fe      	b.n	8000b68 <ADC1_COMP_IRQHandler>
	...

08000b6c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b70:	4b07      	ldr	r3, [pc, #28]	@ (8000b90 <HAL_Init+0x24>)
 8000b72:	681a      	ldr	r2, [r3, #0]
 8000b74:	4b06      	ldr	r3, [pc, #24]	@ (8000b90 <HAL_Init+0x24>)
 8000b76:	2110      	movs	r1, #16
 8000b78:	430a      	orrs	r2, r1
 8000b7a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000b7c:	2000      	movs	r0, #0
 8000b7e:	f000 f809 	bl	8000b94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b82:	f7ff fc75 	bl	8000470 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b86:	2300      	movs	r3, #0
}
 8000b88:	0018      	movs	r0, r3
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	46c0      	nop			@ (mov r8, r8)
 8000b90:	40022000 	.word	0x40022000

08000b94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b94:	b590      	push	{r4, r7, lr}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b9c:	4b14      	ldr	r3, [pc, #80]	@ (8000bf0 <HAL_InitTick+0x5c>)
 8000b9e:	681c      	ldr	r4, [r3, #0]
 8000ba0:	4b14      	ldr	r3, [pc, #80]	@ (8000bf4 <HAL_InitTick+0x60>)
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	0019      	movs	r1, r3
 8000ba6:	23fa      	movs	r3, #250	@ 0xfa
 8000ba8:	0098      	lsls	r0, r3, #2
 8000baa:	f7ff faad 	bl	8000108 <__udivsi3>
 8000bae:	0003      	movs	r3, r0
 8000bb0:	0019      	movs	r1, r3
 8000bb2:	0020      	movs	r0, r4
 8000bb4:	f7ff faa8 	bl	8000108 <__udivsi3>
 8000bb8:	0003      	movs	r3, r0
 8000bba:	0018      	movs	r0, r3
 8000bbc:	f000 f90b 	bl	8000dd6 <HAL_SYSTICK_Config>
 8000bc0:	1e03      	subs	r3, r0, #0
 8000bc2:	d001      	beq.n	8000bc8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	e00f      	b.n	8000be8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	2b03      	cmp	r3, #3
 8000bcc:	d80b      	bhi.n	8000be6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bce:	6879      	ldr	r1, [r7, #4]
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	425b      	negs	r3, r3
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	0018      	movs	r0, r3
 8000bd8:	f000 f8d8 	bl	8000d8c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bdc:	4b06      	ldr	r3, [pc, #24]	@ (8000bf8 <HAL_InitTick+0x64>)
 8000bde:	687a      	ldr	r2, [r7, #4]
 8000be0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000be2:	2300      	movs	r3, #0
 8000be4:	e000      	b.n	8000be8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000be6:	2301      	movs	r3, #1
}
 8000be8:	0018      	movs	r0, r3
 8000bea:	46bd      	mov	sp, r7
 8000bec:	b003      	add	sp, #12
 8000bee:	bd90      	pop	{r4, r7, pc}
 8000bf0:	20000000 	.word	0x20000000
 8000bf4:	20000008 	.word	0x20000008
 8000bf8:	20000004 	.word	0x20000004

08000bfc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c00:	4b05      	ldr	r3, [pc, #20]	@ (8000c18 <HAL_IncTick+0x1c>)
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	001a      	movs	r2, r3
 8000c06:	4b05      	ldr	r3, [pc, #20]	@ (8000c1c <HAL_IncTick+0x20>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	18d2      	adds	r2, r2, r3
 8000c0c:	4b03      	ldr	r3, [pc, #12]	@ (8000c1c <HAL_IncTick+0x20>)
 8000c0e:	601a      	str	r2, [r3, #0]
}
 8000c10:	46c0      	nop			@ (mov r8, r8)
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	46c0      	nop			@ (mov r8, r8)
 8000c18:	20000008 	.word	0x20000008
 8000c1c:	20000ad4 	.word	0x20000ad4

08000c20 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  return uwTick;
 8000c24:	4b02      	ldr	r3, [pc, #8]	@ (8000c30 <HAL_GetTick+0x10>)
 8000c26:	681b      	ldr	r3, [r3, #0]
}
 8000c28:	0018      	movs	r0, r3
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	46c0      	nop			@ (mov r8, r8)
 8000c30:	20000ad4 	.word	0x20000ad4

08000c34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	0002      	movs	r2, r0
 8000c3c:	1dfb      	adds	r3, r7, #7
 8000c3e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c40:	1dfb      	adds	r3, r7, #7
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	2b7f      	cmp	r3, #127	@ 0x7f
 8000c46:	d809      	bhi.n	8000c5c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c48:	1dfb      	adds	r3, r7, #7
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	001a      	movs	r2, r3
 8000c4e:	231f      	movs	r3, #31
 8000c50:	401a      	ands	r2, r3
 8000c52:	4b04      	ldr	r3, [pc, #16]	@ (8000c64 <__NVIC_EnableIRQ+0x30>)
 8000c54:	2101      	movs	r1, #1
 8000c56:	4091      	lsls	r1, r2
 8000c58:	000a      	movs	r2, r1
 8000c5a:	601a      	str	r2, [r3, #0]
  }
}
 8000c5c:	46c0      	nop			@ (mov r8, r8)
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	b002      	add	sp, #8
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	e000e100 	.word	0xe000e100

08000c68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c68:	b590      	push	{r4, r7, lr}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	0002      	movs	r2, r0
 8000c70:	6039      	str	r1, [r7, #0]
 8000c72:	1dfb      	adds	r3, r7, #7
 8000c74:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c76:	1dfb      	adds	r3, r7, #7
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	2b7f      	cmp	r3, #127	@ 0x7f
 8000c7c:	d828      	bhi.n	8000cd0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c7e:	4a2f      	ldr	r2, [pc, #188]	@ (8000d3c <__NVIC_SetPriority+0xd4>)
 8000c80:	1dfb      	adds	r3, r7, #7
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	b25b      	sxtb	r3, r3
 8000c86:	089b      	lsrs	r3, r3, #2
 8000c88:	33c0      	adds	r3, #192	@ 0xc0
 8000c8a:	009b      	lsls	r3, r3, #2
 8000c8c:	589b      	ldr	r3, [r3, r2]
 8000c8e:	1dfa      	adds	r2, r7, #7
 8000c90:	7812      	ldrb	r2, [r2, #0]
 8000c92:	0011      	movs	r1, r2
 8000c94:	2203      	movs	r2, #3
 8000c96:	400a      	ands	r2, r1
 8000c98:	00d2      	lsls	r2, r2, #3
 8000c9a:	21ff      	movs	r1, #255	@ 0xff
 8000c9c:	4091      	lsls	r1, r2
 8000c9e:	000a      	movs	r2, r1
 8000ca0:	43d2      	mvns	r2, r2
 8000ca2:	401a      	ands	r2, r3
 8000ca4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	019b      	lsls	r3, r3, #6
 8000caa:	22ff      	movs	r2, #255	@ 0xff
 8000cac:	401a      	ands	r2, r3
 8000cae:	1dfb      	adds	r3, r7, #7
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	0018      	movs	r0, r3
 8000cb4:	2303      	movs	r3, #3
 8000cb6:	4003      	ands	r3, r0
 8000cb8:	00db      	lsls	r3, r3, #3
 8000cba:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cbc:	481f      	ldr	r0, [pc, #124]	@ (8000d3c <__NVIC_SetPriority+0xd4>)
 8000cbe:	1dfb      	adds	r3, r7, #7
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	b25b      	sxtb	r3, r3
 8000cc4:	089b      	lsrs	r3, r3, #2
 8000cc6:	430a      	orrs	r2, r1
 8000cc8:	33c0      	adds	r3, #192	@ 0xc0
 8000cca:	009b      	lsls	r3, r3, #2
 8000ccc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000cce:	e031      	b.n	8000d34 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cd0:	4a1b      	ldr	r2, [pc, #108]	@ (8000d40 <__NVIC_SetPriority+0xd8>)
 8000cd2:	1dfb      	adds	r3, r7, #7
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	0019      	movs	r1, r3
 8000cd8:	230f      	movs	r3, #15
 8000cda:	400b      	ands	r3, r1
 8000cdc:	3b08      	subs	r3, #8
 8000cde:	089b      	lsrs	r3, r3, #2
 8000ce0:	3306      	adds	r3, #6
 8000ce2:	009b      	lsls	r3, r3, #2
 8000ce4:	18d3      	adds	r3, r2, r3
 8000ce6:	3304      	adds	r3, #4
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	1dfa      	adds	r2, r7, #7
 8000cec:	7812      	ldrb	r2, [r2, #0]
 8000cee:	0011      	movs	r1, r2
 8000cf0:	2203      	movs	r2, #3
 8000cf2:	400a      	ands	r2, r1
 8000cf4:	00d2      	lsls	r2, r2, #3
 8000cf6:	21ff      	movs	r1, #255	@ 0xff
 8000cf8:	4091      	lsls	r1, r2
 8000cfa:	000a      	movs	r2, r1
 8000cfc:	43d2      	mvns	r2, r2
 8000cfe:	401a      	ands	r2, r3
 8000d00:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	019b      	lsls	r3, r3, #6
 8000d06:	22ff      	movs	r2, #255	@ 0xff
 8000d08:	401a      	ands	r2, r3
 8000d0a:	1dfb      	adds	r3, r7, #7
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	0018      	movs	r0, r3
 8000d10:	2303      	movs	r3, #3
 8000d12:	4003      	ands	r3, r0
 8000d14:	00db      	lsls	r3, r3, #3
 8000d16:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d18:	4809      	ldr	r0, [pc, #36]	@ (8000d40 <__NVIC_SetPriority+0xd8>)
 8000d1a:	1dfb      	adds	r3, r7, #7
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	001c      	movs	r4, r3
 8000d20:	230f      	movs	r3, #15
 8000d22:	4023      	ands	r3, r4
 8000d24:	3b08      	subs	r3, #8
 8000d26:	089b      	lsrs	r3, r3, #2
 8000d28:	430a      	orrs	r2, r1
 8000d2a:	3306      	adds	r3, #6
 8000d2c:	009b      	lsls	r3, r3, #2
 8000d2e:	18c3      	adds	r3, r0, r3
 8000d30:	3304      	adds	r3, #4
 8000d32:	601a      	str	r2, [r3, #0]
}
 8000d34:	46c0      	nop			@ (mov r8, r8)
 8000d36:	46bd      	mov	sp, r7
 8000d38:	b003      	add	sp, #12
 8000d3a:	bd90      	pop	{r4, r7, pc}
 8000d3c:	e000e100 	.word	0xe000e100
 8000d40:	e000ed00 	.word	0xe000ed00

08000d44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	1e5a      	subs	r2, r3, #1
 8000d50:	2380      	movs	r3, #128	@ 0x80
 8000d52:	045b      	lsls	r3, r3, #17
 8000d54:	429a      	cmp	r2, r3
 8000d56:	d301      	bcc.n	8000d5c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d58:	2301      	movs	r3, #1
 8000d5a:	e010      	b.n	8000d7e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d5c:	4b0a      	ldr	r3, [pc, #40]	@ (8000d88 <SysTick_Config+0x44>)
 8000d5e:	687a      	ldr	r2, [r7, #4]
 8000d60:	3a01      	subs	r2, #1
 8000d62:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d64:	2301      	movs	r3, #1
 8000d66:	425b      	negs	r3, r3
 8000d68:	2103      	movs	r1, #3
 8000d6a:	0018      	movs	r0, r3
 8000d6c:	f7ff ff7c 	bl	8000c68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d70:	4b05      	ldr	r3, [pc, #20]	@ (8000d88 <SysTick_Config+0x44>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d76:	4b04      	ldr	r3, [pc, #16]	@ (8000d88 <SysTick_Config+0x44>)
 8000d78:	2207      	movs	r2, #7
 8000d7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d7c:	2300      	movs	r3, #0
}
 8000d7e:	0018      	movs	r0, r3
 8000d80:	46bd      	mov	sp, r7
 8000d82:	b002      	add	sp, #8
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	46c0      	nop			@ (mov r8, r8)
 8000d88:	e000e010 	.word	0xe000e010

08000d8c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b084      	sub	sp, #16
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	60b9      	str	r1, [r7, #8]
 8000d94:	607a      	str	r2, [r7, #4]
 8000d96:	210f      	movs	r1, #15
 8000d98:	187b      	adds	r3, r7, r1
 8000d9a:	1c02      	adds	r2, r0, #0
 8000d9c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000d9e:	68ba      	ldr	r2, [r7, #8]
 8000da0:	187b      	adds	r3, r7, r1
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	b25b      	sxtb	r3, r3
 8000da6:	0011      	movs	r1, r2
 8000da8:	0018      	movs	r0, r3
 8000daa:	f7ff ff5d 	bl	8000c68 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8000dae:	46c0      	nop			@ (mov r8, r8)
 8000db0:	46bd      	mov	sp, r7
 8000db2:	b004      	add	sp, #16
 8000db4:	bd80      	pop	{r7, pc}

08000db6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000db6:	b580      	push	{r7, lr}
 8000db8:	b082      	sub	sp, #8
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	0002      	movs	r2, r0
 8000dbe:	1dfb      	adds	r3, r7, #7
 8000dc0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dc2:	1dfb      	adds	r3, r7, #7
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	b25b      	sxtb	r3, r3
 8000dc8:	0018      	movs	r0, r3
 8000dca:	f7ff ff33 	bl	8000c34 <__NVIC_EnableIRQ>
}
 8000dce:	46c0      	nop			@ (mov r8, r8)
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	b002      	add	sp, #8
 8000dd4:	bd80      	pop	{r7, pc}

08000dd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dd6:	b580      	push	{r7, lr}
 8000dd8:	b082      	sub	sp, #8
 8000dda:	af00      	add	r7, sp, #0
 8000ddc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	0018      	movs	r0, r3
 8000de2:	f7ff ffaf 	bl	8000d44 <SysTick_Config>
 8000de6:	0003      	movs	r3, r0
}
 8000de8:	0018      	movs	r0, r3
 8000dea:	46bd      	mov	sp, r7
 8000dec:	b002      	add	sp, #8
 8000dee:	bd80      	pop	{r7, pc}

08000df0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b084      	sub	sp, #16
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d101      	bne.n	8000e06 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000e02:	2301      	movs	r3, #1
 8000e04:	e036      	b.n	8000e74 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	2221      	movs	r2, #33	@ 0x21
 8000e0a:	2102      	movs	r1, #2
 8000e0c:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	4a18      	ldr	r2, [pc, #96]	@ (8000e7c <HAL_DMA_Init+0x8c>)
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000e26:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	68db      	ldr	r3, [r3, #12]
 8000e2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e32:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	695b      	ldr	r3, [r3, #20]
 8000e38:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e3e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	69db      	ldr	r3, [r3, #28]
 8000e44:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000e46:	68fa      	ldr	r2, [r7, #12]
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	68fa      	ldr	r2, [r7, #12]
 8000e52:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	0018      	movs	r0, r3
 8000e58:	f000 f9c4 	bl	80011e4 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2200      	movs	r2, #0
 8000e60:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	2221      	movs	r2, #33	@ 0x21
 8000e66:	2101      	movs	r1, #1
 8000e68:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2220      	movs	r2, #32
 8000e6e:	2100      	movs	r1, #0
 8000e70:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000e72:	2300      	movs	r3, #0
}
 8000e74:	0018      	movs	r0, r3
 8000e76:	46bd      	mov	sp, r7
 8000e78:	b004      	add	sp, #16
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	ffffc00f 	.word	0xffffc00f

08000e80 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b086      	sub	sp, #24
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	60f8      	str	r0, [r7, #12]
 8000e88:	60b9      	str	r1, [r7, #8]
 8000e8a:	607a      	str	r2, [r7, #4]
 8000e8c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000e8e:	2317      	movs	r3, #23
 8000e90:	18fb      	adds	r3, r7, r3
 8000e92:	2200      	movs	r2, #0
 8000e94:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	2220      	movs	r2, #32
 8000e9a:	5c9b      	ldrb	r3, [r3, r2]
 8000e9c:	2b01      	cmp	r3, #1
 8000e9e:	d101      	bne.n	8000ea4 <HAL_DMA_Start_IT+0x24>
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	e04f      	b.n	8000f44 <HAL_DMA_Start_IT+0xc4>
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	2220      	movs	r2, #32
 8000ea8:	2101      	movs	r1, #1
 8000eaa:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	2221      	movs	r2, #33	@ 0x21
 8000eb0:	5c9b      	ldrb	r3, [r3, r2]
 8000eb2:	b2db      	uxtb	r3, r3
 8000eb4:	2b01      	cmp	r3, #1
 8000eb6:	d13a      	bne.n	8000f2e <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	2221      	movs	r2, #33	@ 0x21
 8000ebc:	2102      	movs	r1, #2
 8000ebe:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	681a      	ldr	r2, [r3, #0]
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	2101      	movs	r1, #1
 8000ed2:	438a      	bics	r2, r1
 8000ed4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	687a      	ldr	r2, [r7, #4]
 8000eda:	68b9      	ldr	r1, [r7, #8]
 8000edc:	68f8      	ldr	r0, [r7, #12]
 8000ede:	f000 f954 	bl	800118a <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d008      	beq.n	8000efc <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	210e      	movs	r1, #14
 8000ef6:	430a      	orrs	r2, r1
 8000ef8:	601a      	str	r2, [r3, #0]
 8000efa:	e00f      	b.n	8000f1c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	210a      	movs	r1, #10
 8000f08:	430a      	orrs	r2, r1
 8000f0a:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	2104      	movs	r1, #4
 8000f18:	438a      	bics	r2, r1
 8000f1a:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	2101      	movs	r1, #1
 8000f28:	430a      	orrs	r2, r1
 8000f2a:	601a      	str	r2, [r3, #0]
 8000f2c:	e007      	b.n	8000f3e <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	2220      	movs	r2, #32
 8000f32:	2100      	movs	r1, #0
 8000f34:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000f36:	2317      	movs	r3, #23
 8000f38:	18fb      	adds	r3, r7, r3
 8000f3a:	2202      	movs	r2, #2
 8000f3c:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8000f3e:	2317      	movs	r3, #23
 8000f40:	18fb      	adds	r3, r7, r3
 8000f42:	781b      	ldrb	r3, [r3, #0]
}
 8000f44:	0018      	movs	r0, r3
 8000f46:	46bd      	mov	sp, r7
 8000f48:	b006      	add	sp, #24
 8000f4a:	bd80      	pop	{r7, pc}

08000f4c <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2221      	movs	r2, #33	@ 0x21
 8000f58:	5c9b      	ldrb	r3, [r3, r2]
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	2b02      	cmp	r3, #2
 8000f5e:	d008      	beq.n	8000f72 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2204      	movs	r2, #4
 8000f64:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2220      	movs	r2, #32
 8000f6a:	2100      	movs	r1, #0
 8000f6c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	e020      	b.n	8000fb4 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	210e      	movs	r1, #14
 8000f7e:	438a      	bics	r2, r1
 8000f80:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	2101      	movs	r1, #1
 8000f8e:	438a      	bics	r2, r1
 8000f90:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000f9a:	2101      	movs	r1, #1
 8000f9c:	4091      	lsls	r1, r2
 8000f9e:	000a      	movs	r2, r1
 8000fa0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2221      	movs	r2, #33	@ 0x21
 8000fa6:	2101      	movs	r1, #1
 8000fa8:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2220      	movs	r2, #32
 8000fae:	2100      	movs	r1, #0
 8000fb0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000fb2:	2300      	movs	r3, #0
}
 8000fb4:	0018      	movs	r0, r3
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	b002      	add	sp, #8
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000fc4:	210f      	movs	r1, #15
 8000fc6:	187b      	adds	r3, r7, r1
 8000fc8:	2200      	movs	r2, #0
 8000fca:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	2221      	movs	r2, #33	@ 0x21
 8000fd0:	5c9b      	ldrb	r3, [r3, r2]
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	2b02      	cmp	r3, #2
 8000fd6:	d006      	beq.n	8000fe6 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2204      	movs	r2, #4
 8000fdc:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8000fde:	187b      	adds	r3, r7, r1
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	701a      	strb	r2, [r3, #0]
 8000fe4:	e028      	b.n	8001038 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	210e      	movs	r1, #14
 8000ff2:	438a      	bics	r2, r1
 8000ff4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	2101      	movs	r1, #1
 8001002:	438a      	bics	r2, r1
 8001004:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800100e:	2101      	movs	r1, #1
 8001010:	4091      	lsls	r1, r2
 8001012:	000a      	movs	r2, r1
 8001014:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2221      	movs	r2, #33	@ 0x21
 800101a:	2101      	movs	r1, #1
 800101c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2220      	movs	r2, #32
 8001022:	2100      	movs	r1, #0
 8001024:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800102a:	2b00      	cmp	r3, #0
 800102c:	d004      	beq.n	8001038 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001032:	687a      	ldr	r2, [r7, #4]
 8001034:	0010      	movs	r0, r2
 8001036:	4798      	blx	r3
    }
  }
  return status;
 8001038:	230f      	movs	r3, #15
 800103a:	18fb      	adds	r3, r7, r3
 800103c:	781b      	ldrb	r3, [r3, #0]
}
 800103e:	0018      	movs	r0, r3
 8001040:	46bd      	mov	sp, r7
 8001042:	b004      	add	sp, #16
 8001044:	bd80      	pop	{r7, pc}

08001046 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001046:	b580      	push	{r7, lr}
 8001048:	b084      	sub	sp, #16
 800104a:	af00      	add	r7, sp, #0
 800104c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001062:	2204      	movs	r2, #4
 8001064:	409a      	lsls	r2, r3
 8001066:	0013      	movs	r3, r2
 8001068:	68fa      	ldr	r2, [r7, #12]
 800106a:	4013      	ands	r3, r2
 800106c:	d024      	beq.n	80010b8 <HAL_DMA_IRQHandler+0x72>
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	2204      	movs	r2, #4
 8001072:	4013      	ands	r3, r2
 8001074:	d020      	beq.n	80010b8 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	2220      	movs	r2, #32
 800107e:	4013      	ands	r3, r2
 8001080:	d107      	bne.n	8001092 <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	2104      	movs	r1, #4
 800108e:	438a      	bics	r2, r1
 8001090:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800109a:	2104      	movs	r1, #4
 800109c:	4091      	lsls	r1, r2
 800109e:	000a      	movs	r2, r1
 80010a0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d100      	bne.n	80010ac <HAL_DMA_IRQHandler+0x66>
 80010aa:	e06a      	b.n	8001182 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010b0:	687a      	ldr	r2, [r7, #4]
 80010b2:	0010      	movs	r0, r2
 80010b4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80010b6:	e064      	b.n	8001182 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010bc:	2202      	movs	r2, #2
 80010be:	409a      	lsls	r2, r3
 80010c0:	0013      	movs	r3, r2
 80010c2:	68fa      	ldr	r2, [r7, #12]
 80010c4:	4013      	ands	r3, r2
 80010c6:	d02b      	beq.n	8001120 <HAL_DMA_IRQHandler+0xda>
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	2202      	movs	r2, #2
 80010cc:	4013      	ands	r3, r2
 80010ce:	d027      	beq.n	8001120 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	2220      	movs	r2, #32
 80010d8:	4013      	ands	r3, r2
 80010da:	d10b      	bne.n	80010f4 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	210a      	movs	r1, #10
 80010e8:	438a      	bics	r2, r1
 80010ea:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2221      	movs	r2, #33	@ 0x21
 80010f0:	2101      	movs	r1, #1
 80010f2:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80010fc:	2102      	movs	r1, #2
 80010fe:	4091      	lsls	r1, r2
 8001100:	000a      	movs	r2, r1
 8001102:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2220      	movs	r2, #32
 8001108:	2100      	movs	r1, #0
 800110a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001110:	2b00      	cmp	r3, #0
 8001112:	d036      	beq.n	8001182 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001118:	687a      	ldr	r2, [r7, #4]
 800111a:	0010      	movs	r0, r2
 800111c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800111e:	e030      	b.n	8001182 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001124:	2208      	movs	r2, #8
 8001126:	409a      	lsls	r2, r3
 8001128:	0013      	movs	r3, r2
 800112a:	68fa      	ldr	r2, [r7, #12]
 800112c:	4013      	ands	r3, r2
 800112e:	d028      	beq.n	8001182 <HAL_DMA_IRQHandler+0x13c>
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	2208      	movs	r2, #8
 8001134:	4013      	ands	r3, r2
 8001136:	d024      	beq.n	8001182 <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	210e      	movs	r1, #14
 8001144:	438a      	bics	r2, r1
 8001146:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001150:	2101      	movs	r1, #1
 8001152:	4091      	lsls	r1, r2
 8001154:	000a      	movs	r2, r1
 8001156:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2201      	movs	r2, #1
 800115c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2221      	movs	r2, #33	@ 0x21
 8001162:	2101      	movs	r1, #1
 8001164:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2220      	movs	r2, #32
 800116a:	2100      	movs	r1, #0
 800116c:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001172:	2b00      	cmp	r3, #0
 8001174:	d005      	beq.n	8001182 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800117a:	687a      	ldr	r2, [r7, #4]
 800117c:	0010      	movs	r0, r2
 800117e:	4798      	blx	r3
    }
  }
}
 8001180:	e7ff      	b.n	8001182 <HAL_DMA_IRQHandler+0x13c>
 8001182:	46c0      	nop			@ (mov r8, r8)
 8001184:	46bd      	mov	sp, r7
 8001186:	b004      	add	sp, #16
 8001188:	bd80      	pop	{r7, pc}

0800118a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800118a:	b580      	push	{r7, lr}
 800118c:	b084      	sub	sp, #16
 800118e:	af00      	add	r7, sp, #0
 8001190:	60f8      	str	r0, [r7, #12]
 8001192:	60b9      	str	r1, [r7, #8]
 8001194:	607a      	str	r2, [r7, #4]
 8001196:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80011a0:	2101      	movs	r1, #1
 80011a2:	4091      	lsls	r1, r2
 80011a4:	000a      	movs	r2, r1
 80011a6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	683a      	ldr	r2, [r7, #0]
 80011ae:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	2b10      	cmp	r3, #16
 80011b6:	d108      	bne.n	80011ca <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	687a      	ldr	r2, [r7, #4]
 80011be:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	68ba      	ldr	r2, [r7, #8]
 80011c6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80011c8:	e007      	b.n	80011da <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	68ba      	ldr	r2, [r7, #8]
 80011d0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	687a      	ldr	r2, [r7, #4]
 80011d8:	60da      	str	r2, [r3, #12]
}
 80011da:	46c0      	nop			@ (mov r8, r8)
 80011dc:	46bd      	mov	sp, r7
 80011de:	b004      	add	sp, #16
 80011e0:	bd80      	pop	{r7, pc}
	...

080011e4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a08      	ldr	r2, [pc, #32]	@ (8001214 <DMA_CalcBaseAndBitshift+0x30>)
 80011f2:	4694      	mov	ip, r2
 80011f4:	4463      	add	r3, ip
 80011f6:	2114      	movs	r1, #20
 80011f8:	0018      	movs	r0, r3
 80011fa:	f7fe ff85 	bl	8000108 <__udivsi3>
 80011fe:	0003      	movs	r3, r0
 8001200:	009a      	lsls	r2, r3, #2
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4a03      	ldr	r2, [pc, #12]	@ (8001218 <DMA_CalcBaseAndBitshift+0x34>)
 800120a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 800120c:	46c0      	nop			@ (mov r8, r8)
 800120e:	46bd      	mov	sp, r7
 8001210:	b002      	add	sp, #8
 8001212:	bd80      	pop	{r7, pc}
 8001214:	bffdfff8 	.word	0xbffdfff8
 8001218:	40020000 	.word	0x40020000

0800121c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b086      	sub	sp, #24
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001226:	2300      	movs	r3, #0
 8001228:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800122a:	e155      	b.n	80014d8 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	2101      	movs	r1, #1
 8001232:	697a      	ldr	r2, [r7, #20]
 8001234:	4091      	lsls	r1, r2
 8001236:	000a      	movs	r2, r1
 8001238:	4013      	ands	r3, r2
 800123a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d100      	bne.n	8001244 <HAL_GPIO_Init+0x28>
 8001242:	e146      	b.n	80014d2 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	2203      	movs	r2, #3
 800124a:	4013      	ands	r3, r2
 800124c:	2b01      	cmp	r3, #1
 800124e:	d005      	beq.n	800125c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	2203      	movs	r2, #3
 8001256:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001258:	2b02      	cmp	r3, #2
 800125a:	d130      	bne.n	80012be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	689b      	ldr	r3, [r3, #8]
 8001260:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	005b      	lsls	r3, r3, #1
 8001266:	2203      	movs	r2, #3
 8001268:	409a      	lsls	r2, r3
 800126a:	0013      	movs	r3, r2
 800126c:	43da      	mvns	r2, r3
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	4013      	ands	r3, r2
 8001272:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	68da      	ldr	r2, [r3, #12]
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	005b      	lsls	r3, r3, #1
 800127c:	409a      	lsls	r2, r3
 800127e:	0013      	movs	r3, r2
 8001280:	693a      	ldr	r2, [r7, #16]
 8001282:	4313      	orrs	r3, r2
 8001284:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	693a      	ldr	r2, [r7, #16]
 800128a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001292:	2201      	movs	r2, #1
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	409a      	lsls	r2, r3
 8001298:	0013      	movs	r3, r2
 800129a:	43da      	mvns	r2, r3
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	4013      	ands	r3, r2
 80012a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	091b      	lsrs	r3, r3, #4
 80012a8:	2201      	movs	r2, #1
 80012aa:	401a      	ands	r2, r3
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	409a      	lsls	r2, r3
 80012b0:	0013      	movs	r3, r2
 80012b2:	693a      	ldr	r2, [r7, #16]
 80012b4:	4313      	orrs	r3, r2
 80012b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	693a      	ldr	r2, [r7, #16]
 80012bc:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	2203      	movs	r2, #3
 80012c4:	4013      	ands	r3, r2
 80012c6:	2b03      	cmp	r3, #3
 80012c8:	d017      	beq.n	80012fa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	68db      	ldr	r3, [r3, #12]
 80012ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	005b      	lsls	r3, r3, #1
 80012d4:	2203      	movs	r2, #3
 80012d6:	409a      	lsls	r2, r3
 80012d8:	0013      	movs	r3, r2
 80012da:	43da      	mvns	r2, r3
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	4013      	ands	r3, r2
 80012e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	689a      	ldr	r2, [r3, #8]
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	005b      	lsls	r3, r3, #1
 80012ea:	409a      	lsls	r2, r3
 80012ec:	0013      	movs	r3, r2
 80012ee:	693a      	ldr	r2, [r7, #16]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	693a      	ldr	r2, [r7, #16]
 80012f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	2203      	movs	r2, #3
 8001300:	4013      	ands	r3, r2
 8001302:	2b02      	cmp	r3, #2
 8001304:	d123      	bne.n	800134e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	08da      	lsrs	r2, r3, #3
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	3208      	adds	r2, #8
 800130e:	0092      	lsls	r2, r2, #2
 8001310:	58d3      	ldr	r3, [r2, r3]
 8001312:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	2207      	movs	r2, #7
 8001318:	4013      	ands	r3, r2
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	220f      	movs	r2, #15
 800131e:	409a      	lsls	r2, r3
 8001320:	0013      	movs	r3, r2
 8001322:	43da      	mvns	r2, r3
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	4013      	ands	r3, r2
 8001328:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	691a      	ldr	r2, [r3, #16]
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	2107      	movs	r1, #7
 8001332:	400b      	ands	r3, r1
 8001334:	009b      	lsls	r3, r3, #2
 8001336:	409a      	lsls	r2, r3
 8001338:	0013      	movs	r3, r2
 800133a:	693a      	ldr	r2, [r7, #16]
 800133c:	4313      	orrs	r3, r2
 800133e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	08da      	lsrs	r2, r3, #3
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	3208      	adds	r2, #8
 8001348:	0092      	lsls	r2, r2, #2
 800134a:	6939      	ldr	r1, [r7, #16]
 800134c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	005b      	lsls	r3, r3, #1
 8001358:	2203      	movs	r2, #3
 800135a:	409a      	lsls	r2, r3
 800135c:	0013      	movs	r3, r2
 800135e:	43da      	mvns	r2, r3
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	4013      	ands	r3, r2
 8001364:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	2203      	movs	r2, #3
 800136c:	401a      	ands	r2, r3
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	005b      	lsls	r3, r3, #1
 8001372:	409a      	lsls	r2, r3
 8001374:	0013      	movs	r3, r2
 8001376:	693a      	ldr	r2, [r7, #16]
 8001378:	4313      	orrs	r3, r2
 800137a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	693a      	ldr	r2, [r7, #16]
 8001380:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	685a      	ldr	r2, [r3, #4]
 8001386:	23c0      	movs	r3, #192	@ 0xc0
 8001388:	029b      	lsls	r3, r3, #10
 800138a:	4013      	ands	r3, r2
 800138c:	d100      	bne.n	8001390 <HAL_GPIO_Init+0x174>
 800138e:	e0a0      	b.n	80014d2 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001390:	4b57      	ldr	r3, [pc, #348]	@ (80014f0 <HAL_GPIO_Init+0x2d4>)
 8001392:	699a      	ldr	r2, [r3, #24]
 8001394:	4b56      	ldr	r3, [pc, #344]	@ (80014f0 <HAL_GPIO_Init+0x2d4>)
 8001396:	2101      	movs	r1, #1
 8001398:	430a      	orrs	r2, r1
 800139a:	619a      	str	r2, [r3, #24]
 800139c:	4b54      	ldr	r3, [pc, #336]	@ (80014f0 <HAL_GPIO_Init+0x2d4>)
 800139e:	699b      	ldr	r3, [r3, #24]
 80013a0:	2201      	movs	r2, #1
 80013a2:	4013      	ands	r3, r2
 80013a4:	60bb      	str	r3, [r7, #8]
 80013a6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80013a8:	4a52      	ldr	r2, [pc, #328]	@ (80014f4 <HAL_GPIO_Init+0x2d8>)
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	089b      	lsrs	r3, r3, #2
 80013ae:	3302      	adds	r3, #2
 80013b0:	009b      	lsls	r3, r3, #2
 80013b2:	589b      	ldr	r3, [r3, r2]
 80013b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	2203      	movs	r2, #3
 80013ba:	4013      	ands	r3, r2
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	220f      	movs	r2, #15
 80013c0:	409a      	lsls	r2, r3
 80013c2:	0013      	movs	r3, r2
 80013c4:	43da      	mvns	r2, r3
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	4013      	ands	r3, r2
 80013ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80013cc:	687a      	ldr	r2, [r7, #4]
 80013ce:	2390      	movs	r3, #144	@ 0x90
 80013d0:	05db      	lsls	r3, r3, #23
 80013d2:	429a      	cmp	r2, r3
 80013d4:	d019      	beq.n	800140a <HAL_GPIO_Init+0x1ee>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4a47      	ldr	r2, [pc, #284]	@ (80014f8 <HAL_GPIO_Init+0x2dc>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d013      	beq.n	8001406 <HAL_GPIO_Init+0x1ea>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4a46      	ldr	r2, [pc, #280]	@ (80014fc <HAL_GPIO_Init+0x2e0>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d00d      	beq.n	8001402 <HAL_GPIO_Init+0x1e6>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4a45      	ldr	r2, [pc, #276]	@ (8001500 <HAL_GPIO_Init+0x2e4>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d007      	beq.n	80013fe <HAL_GPIO_Init+0x1e2>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4a44      	ldr	r2, [pc, #272]	@ (8001504 <HAL_GPIO_Init+0x2e8>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d101      	bne.n	80013fa <HAL_GPIO_Init+0x1de>
 80013f6:	2304      	movs	r3, #4
 80013f8:	e008      	b.n	800140c <HAL_GPIO_Init+0x1f0>
 80013fa:	2305      	movs	r3, #5
 80013fc:	e006      	b.n	800140c <HAL_GPIO_Init+0x1f0>
 80013fe:	2303      	movs	r3, #3
 8001400:	e004      	b.n	800140c <HAL_GPIO_Init+0x1f0>
 8001402:	2302      	movs	r3, #2
 8001404:	e002      	b.n	800140c <HAL_GPIO_Init+0x1f0>
 8001406:	2301      	movs	r3, #1
 8001408:	e000      	b.n	800140c <HAL_GPIO_Init+0x1f0>
 800140a:	2300      	movs	r3, #0
 800140c:	697a      	ldr	r2, [r7, #20]
 800140e:	2103      	movs	r1, #3
 8001410:	400a      	ands	r2, r1
 8001412:	0092      	lsls	r2, r2, #2
 8001414:	4093      	lsls	r3, r2
 8001416:	693a      	ldr	r2, [r7, #16]
 8001418:	4313      	orrs	r3, r2
 800141a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800141c:	4935      	ldr	r1, [pc, #212]	@ (80014f4 <HAL_GPIO_Init+0x2d8>)
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	089b      	lsrs	r3, r3, #2
 8001422:	3302      	adds	r3, #2
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	693a      	ldr	r2, [r7, #16]
 8001428:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800142a:	4b37      	ldr	r3, [pc, #220]	@ (8001508 <HAL_GPIO_Init+0x2ec>)
 800142c:	689b      	ldr	r3, [r3, #8]
 800142e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	43da      	mvns	r2, r3
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	4013      	ands	r3, r2
 8001438:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	685a      	ldr	r2, [r3, #4]
 800143e:	2380      	movs	r3, #128	@ 0x80
 8001440:	035b      	lsls	r3, r3, #13
 8001442:	4013      	ands	r3, r2
 8001444:	d003      	beq.n	800144e <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8001446:	693a      	ldr	r2, [r7, #16]
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	4313      	orrs	r3, r2
 800144c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800144e:	4b2e      	ldr	r3, [pc, #184]	@ (8001508 <HAL_GPIO_Init+0x2ec>)
 8001450:	693a      	ldr	r2, [r7, #16]
 8001452:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001454:	4b2c      	ldr	r3, [pc, #176]	@ (8001508 <HAL_GPIO_Init+0x2ec>)
 8001456:	68db      	ldr	r3, [r3, #12]
 8001458:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	43da      	mvns	r2, r3
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	4013      	ands	r3, r2
 8001462:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685a      	ldr	r2, [r3, #4]
 8001468:	2380      	movs	r3, #128	@ 0x80
 800146a:	039b      	lsls	r3, r3, #14
 800146c:	4013      	ands	r3, r2
 800146e:	d003      	beq.n	8001478 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8001470:	693a      	ldr	r2, [r7, #16]
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	4313      	orrs	r3, r2
 8001476:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001478:	4b23      	ldr	r3, [pc, #140]	@ (8001508 <HAL_GPIO_Init+0x2ec>)
 800147a:	693a      	ldr	r2, [r7, #16]
 800147c:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800147e:	4b22      	ldr	r3, [pc, #136]	@ (8001508 <HAL_GPIO_Init+0x2ec>)
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	43da      	mvns	r2, r3
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	4013      	ands	r3, r2
 800148c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	685a      	ldr	r2, [r3, #4]
 8001492:	2380      	movs	r3, #128	@ 0x80
 8001494:	029b      	lsls	r3, r3, #10
 8001496:	4013      	ands	r3, r2
 8001498:	d003      	beq.n	80014a2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800149a:	693a      	ldr	r2, [r7, #16]
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	4313      	orrs	r3, r2
 80014a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80014a2:	4b19      	ldr	r3, [pc, #100]	@ (8001508 <HAL_GPIO_Init+0x2ec>)
 80014a4:	693a      	ldr	r2, [r7, #16]
 80014a6:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80014a8:	4b17      	ldr	r3, [pc, #92]	@ (8001508 <HAL_GPIO_Init+0x2ec>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	43da      	mvns	r2, r3
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	4013      	ands	r3, r2
 80014b6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	685a      	ldr	r2, [r3, #4]
 80014bc:	2380      	movs	r3, #128	@ 0x80
 80014be:	025b      	lsls	r3, r3, #9
 80014c0:	4013      	ands	r3, r2
 80014c2:	d003      	beq.n	80014cc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80014c4:	693a      	ldr	r2, [r7, #16]
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	4313      	orrs	r3, r2
 80014ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80014cc:	4b0e      	ldr	r3, [pc, #56]	@ (8001508 <HAL_GPIO_Init+0x2ec>)
 80014ce:	693a      	ldr	r2, [r7, #16]
 80014d0:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	3301      	adds	r3, #1
 80014d6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	40da      	lsrs	r2, r3
 80014e0:	1e13      	subs	r3, r2, #0
 80014e2:	d000      	beq.n	80014e6 <HAL_GPIO_Init+0x2ca>
 80014e4:	e6a2      	b.n	800122c <HAL_GPIO_Init+0x10>
  } 
}
 80014e6:	46c0      	nop			@ (mov r8, r8)
 80014e8:	46c0      	nop			@ (mov r8, r8)
 80014ea:	46bd      	mov	sp, r7
 80014ec:	b006      	add	sp, #24
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	40021000 	.word	0x40021000
 80014f4:	40010000 	.word	0x40010000
 80014f8:	48000400 	.word	0x48000400
 80014fc:	48000800 	.word	0x48000800
 8001500:	48000c00 	.word	0x48000c00
 8001504:	48001000 	.word	0x48001000
 8001508:	40010400 	.word	0x40010400

0800150c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	0008      	movs	r0, r1
 8001516:	0011      	movs	r1, r2
 8001518:	1cbb      	adds	r3, r7, #2
 800151a:	1c02      	adds	r2, r0, #0
 800151c:	801a      	strh	r2, [r3, #0]
 800151e:	1c7b      	adds	r3, r7, #1
 8001520:	1c0a      	adds	r2, r1, #0
 8001522:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001524:	1c7b      	adds	r3, r7, #1
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d004      	beq.n	8001536 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800152c:	1cbb      	adds	r3, r7, #2
 800152e:	881a      	ldrh	r2, [r3, #0]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001534:	e003      	b.n	800153e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001536:	1cbb      	adds	r3, r7, #2
 8001538:	881a      	ldrh	r2, [r3, #0]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800153e:	46c0      	nop			@ (mov r8, r8)
 8001540:	46bd      	mov	sp, r7
 8001542:	b002      	add	sp, #8
 8001544:	bd80      	pop	{r7, pc}
	...

08001548 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	0002      	movs	r2, r0
 8001550:	1dbb      	adds	r3, r7, #6
 8001552:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001554:	4b09      	ldr	r3, [pc, #36]	@ (800157c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001556:	695b      	ldr	r3, [r3, #20]
 8001558:	1dba      	adds	r2, r7, #6
 800155a:	8812      	ldrh	r2, [r2, #0]
 800155c:	4013      	ands	r3, r2
 800155e:	d008      	beq.n	8001572 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001560:	4b06      	ldr	r3, [pc, #24]	@ (800157c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001562:	1dba      	adds	r2, r7, #6
 8001564:	8812      	ldrh	r2, [r2, #0]
 8001566:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001568:	1dbb      	adds	r3, r7, #6
 800156a:	881b      	ldrh	r3, [r3, #0]
 800156c:	0018      	movs	r0, r3
 800156e:	f000 f807 	bl	8001580 <HAL_GPIO_EXTI_Callback>
  }
}
 8001572:	46c0      	nop			@ (mov r8, r8)
 8001574:	46bd      	mov	sp, r7
 8001576:	b002      	add	sp, #8
 8001578:	bd80      	pop	{r7, pc}
 800157a:	46c0      	nop			@ (mov r8, r8)
 800157c:	40010400 	.word	0x40010400

08001580 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	0002      	movs	r2, r0
 8001588:	1dbb      	adds	r3, r7, #6
 800158a:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 800158c:	46c0      	nop			@ (mov r8, r8)
 800158e:	46bd      	mov	sp, r7
 8001590:	b002      	add	sp, #8
 8001592:	bd80      	pop	{r7, pc}

08001594 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b088      	sub	sp, #32
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d102      	bne.n	80015a8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	f000 fb76 	bl	8001c94 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	2201      	movs	r2, #1
 80015ae:	4013      	ands	r3, r2
 80015b0:	d100      	bne.n	80015b4 <HAL_RCC_OscConfig+0x20>
 80015b2:	e08e      	b.n	80016d2 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80015b4:	4bc5      	ldr	r3, [pc, #788]	@ (80018cc <HAL_RCC_OscConfig+0x338>)
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	220c      	movs	r2, #12
 80015ba:	4013      	ands	r3, r2
 80015bc:	2b04      	cmp	r3, #4
 80015be:	d00e      	beq.n	80015de <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80015c0:	4bc2      	ldr	r3, [pc, #776]	@ (80018cc <HAL_RCC_OscConfig+0x338>)
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	220c      	movs	r2, #12
 80015c6:	4013      	ands	r3, r2
 80015c8:	2b08      	cmp	r3, #8
 80015ca:	d117      	bne.n	80015fc <HAL_RCC_OscConfig+0x68>
 80015cc:	4bbf      	ldr	r3, [pc, #764]	@ (80018cc <HAL_RCC_OscConfig+0x338>)
 80015ce:	685a      	ldr	r2, [r3, #4]
 80015d0:	23c0      	movs	r3, #192	@ 0xc0
 80015d2:	025b      	lsls	r3, r3, #9
 80015d4:	401a      	ands	r2, r3
 80015d6:	2380      	movs	r3, #128	@ 0x80
 80015d8:	025b      	lsls	r3, r3, #9
 80015da:	429a      	cmp	r2, r3
 80015dc:	d10e      	bne.n	80015fc <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015de:	4bbb      	ldr	r3, [pc, #748]	@ (80018cc <HAL_RCC_OscConfig+0x338>)
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	2380      	movs	r3, #128	@ 0x80
 80015e4:	029b      	lsls	r3, r3, #10
 80015e6:	4013      	ands	r3, r2
 80015e8:	d100      	bne.n	80015ec <HAL_RCC_OscConfig+0x58>
 80015ea:	e071      	b.n	80016d0 <HAL_RCC_OscConfig+0x13c>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d000      	beq.n	80015f6 <HAL_RCC_OscConfig+0x62>
 80015f4:	e06c      	b.n	80016d0 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	f000 fb4c 	bl	8001c94 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	2b01      	cmp	r3, #1
 8001602:	d107      	bne.n	8001614 <HAL_RCC_OscConfig+0x80>
 8001604:	4bb1      	ldr	r3, [pc, #708]	@ (80018cc <HAL_RCC_OscConfig+0x338>)
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	4bb0      	ldr	r3, [pc, #704]	@ (80018cc <HAL_RCC_OscConfig+0x338>)
 800160a:	2180      	movs	r1, #128	@ 0x80
 800160c:	0249      	lsls	r1, r1, #9
 800160e:	430a      	orrs	r2, r1
 8001610:	601a      	str	r2, [r3, #0]
 8001612:	e02f      	b.n	8001674 <HAL_RCC_OscConfig+0xe0>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d10c      	bne.n	8001636 <HAL_RCC_OscConfig+0xa2>
 800161c:	4bab      	ldr	r3, [pc, #684]	@ (80018cc <HAL_RCC_OscConfig+0x338>)
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	4baa      	ldr	r3, [pc, #680]	@ (80018cc <HAL_RCC_OscConfig+0x338>)
 8001622:	49ab      	ldr	r1, [pc, #684]	@ (80018d0 <HAL_RCC_OscConfig+0x33c>)
 8001624:	400a      	ands	r2, r1
 8001626:	601a      	str	r2, [r3, #0]
 8001628:	4ba8      	ldr	r3, [pc, #672]	@ (80018cc <HAL_RCC_OscConfig+0x338>)
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	4ba7      	ldr	r3, [pc, #668]	@ (80018cc <HAL_RCC_OscConfig+0x338>)
 800162e:	49a9      	ldr	r1, [pc, #676]	@ (80018d4 <HAL_RCC_OscConfig+0x340>)
 8001630:	400a      	ands	r2, r1
 8001632:	601a      	str	r2, [r3, #0]
 8001634:	e01e      	b.n	8001674 <HAL_RCC_OscConfig+0xe0>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	2b05      	cmp	r3, #5
 800163c:	d10e      	bne.n	800165c <HAL_RCC_OscConfig+0xc8>
 800163e:	4ba3      	ldr	r3, [pc, #652]	@ (80018cc <HAL_RCC_OscConfig+0x338>)
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	4ba2      	ldr	r3, [pc, #648]	@ (80018cc <HAL_RCC_OscConfig+0x338>)
 8001644:	2180      	movs	r1, #128	@ 0x80
 8001646:	02c9      	lsls	r1, r1, #11
 8001648:	430a      	orrs	r2, r1
 800164a:	601a      	str	r2, [r3, #0]
 800164c:	4b9f      	ldr	r3, [pc, #636]	@ (80018cc <HAL_RCC_OscConfig+0x338>)
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	4b9e      	ldr	r3, [pc, #632]	@ (80018cc <HAL_RCC_OscConfig+0x338>)
 8001652:	2180      	movs	r1, #128	@ 0x80
 8001654:	0249      	lsls	r1, r1, #9
 8001656:	430a      	orrs	r2, r1
 8001658:	601a      	str	r2, [r3, #0]
 800165a:	e00b      	b.n	8001674 <HAL_RCC_OscConfig+0xe0>
 800165c:	4b9b      	ldr	r3, [pc, #620]	@ (80018cc <HAL_RCC_OscConfig+0x338>)
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	4b9a      	ldr	r3, [pc, #616]	@ (80018cc <HAL_RCC_OscConfig+0x338>)
 8001662:	499b      	ldr	r1, [pc, #620]	@ (80018d0 <HAL_RCC_OscConfig+0x33c>)
 8001664:	400a      	ands	r2, r1
 8001666:	601a      	str	r2, [r3, #0]
 8001668:	4b98      	ldr	r3, [pc, #608]	@ (80018cc <HAL_RCC_OscConfig+0x338>)
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	4b97      	ldr	r3, [pc, #604]	@ (80018cc <HAL_RCC_OscConfig+0x338>)
 800166e:	4999      	ldr	r1, [pc, #612]	@ (80018d4 <HAL_RCC_OscConfig+0x340>)
 8001670:	400a      	ands	r2, r1
 8001672:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d014      	beq.n	80016a6 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800167c:	f7ff fad0 	bl	8000c20 <HAL_GetTick>
 8001680:	0003      	movs	r3, r0
 8001682:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001684:	e008      	b.n	8001698 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001686:	f7ff facb 	bl	8000c20 <HAL_GetTick>
 800168a:	0002      	movs	r2, r0
 800168c:	69bb      	ldr	r3, [r7, #24]
 800168e:	1ad3      	subs	r3, r2, r3
 8001690:	2b64      	cmp	r3, #100	@ 0x64
 8001692:	d901      	bls.n	8001698 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001694:	2303      	movs	r3, #3
 8001696:	e2fd      	b.n	8001c94 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001698:	4b8c      	ldr	r3, [pc, #560]	@ (80018cc <HAL_RCC_OscConfig+0x338>)
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	2380      	movs	r3, #128	@ 0x80
 800169e:	029b      	lsls	r3, r3, #10
 80016a0:	4013      	ands	r3, r2
 80016a2:	d0f0      	beq.n	8001686 <HAL_RCC_OscConfig+0xf2>
 80016a4:	e015      	b.n	80016d2 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a6:	f7ff fabb 	bl	8000c20 <HAL_GetTick>
 80016aa:	0003      	movs	r3, r0
 80016ac:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016ae:	e008      	b.n	80016c2 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016b0:	f7ff fab6 	bl	8000c20 <HAL_GetTick>
 80016b4:	0002      	movs	r2, r0
 80016b6:	69bb      	ldr	r3, [r7, #24]
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	2b64      	cmp	r3, #100	@ 0x64
 80016bc:	d901      	bls.n	80016c2 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80016be:	2303      	movs	r3, #3
 80016c0:	e2e8      	b.n	8001c94 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016c2:	4b82      	ldr	r3, [pc, #520]	@ (80018cc <HAL_RCC_OscConfig+0x338>)
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	2380      	movs	r3, #128	@ 0x80
 80016c8:	029b      	lsls	r3, r3, #10
 80016ca:	4013      	ands	r3, r2
 80016cc:	d1f0      	bne.n	80016b0 <HAL_RCC_OscConfig+0x11c>
 80016ce:	e000      	b.n	80016d2 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016d0:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	2202      	movs	r2, #2
 80016d8:	4013      	ands	r3, r2
 80016da:	d100      	bne.n	80016de <HAL_RCC_OscConfig+0x14a>
 80016dc:	e06c      	b.n	80017b8 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80016de:	4b7b      	ldr	r3, [pc, #492]	@ (80018cc <HAL_RCC_OscConfig+0x338>)
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	220c      	movs	r2, #12
 80016e4:	4013      	ands	r3, r2
 80016e6:	d00e      	beq.n	8001706 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80016e8:	4b78      	ldr	r3, [pc, #480]	@ (80018cc <HAL_RCC_OscConfig+0x338>)
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	220c      	movs	r2, #12
 80016ee:	4013      	ands	r3, r2
 80016f0:	2b08      	cmp	r3, #8
 80016f2:	d11f      	bne.n	8001734 <HAL_RCC_OscConfig+0x1a0>
 80016f4:	4b75      	ldr	r3, [pc, #468]	@ (80018cc <HAL_RCC_OscConfig+0x338>)
 80016f6:	685a      	ldr	r2, [r3, #4]
 80016f8:	23c0      	movs	r3, #192	@ 0xc0
 80016fa:	025b      	lsls	r3, r3, #9
 80016fc:	401a      	ands	r2, r3
 80016fe:	2380      	movs	r3, #128	@ 0x80
 8001700:	021b      	lsls	r3, r3, #8
 8001702:	429a      	cmp	r2, r3
 8001704:	d116      	bne.n	8001734 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001706:	4b71      	ldr	r3, [pc, #452]	@ (80018cc <HAL_RCC_OscConfig+0x338>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	2202      	movs	r2, #2
 800170c:	4013      	ands	r3, r2
 800170e:	d005      	beq.n	800171c <HAL_RCC_OscConfig+0x188>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	2b01      	cmp	r3, #1
 8001716:	d001      	beq.n	800171c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001718:	2301      	movs	r3, #1
 800171a:	e2bb      	b.n	8001c94 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800171c:	4b6b      	ldr	r3, [pc, #428]	@ (80018cc <HAL_RCC_OscConfig+0x338>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	22f8      	movs	r2, #248	@ 0xf8
 8001722:	4393      	bics	r3, r2
 8001724:	0019      	movs	r1, r3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	691b      	ldr	r3, [r3, #16]
 800172a:	00da      	lsls	r2, r3, #3
 800172c:	4b67      	ldr	r3, [pc, #412]	@ (80018cc <HAL_RCC_OscConfig+0x338>)
 800172e:	430a      	orrs	r2, r1
 8001730:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001732:	e041      	b.n	80017b8 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d024      	beq.n	8001786 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800173c:	4b63      	ldr	r3, [pc, #396]	@ (80018cc <HAL_RCC_OscConfig+0x338>)
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	4b62      	ldr	r3, [pc, #392]	@ (80018cc <HAL_RCC_OscConfig+0x338>)
 8001742:	2101      	movs	r1, #1
 8001744:	430a      	orrs	r2, r1
 8001746:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001748:	f7ff fa6a 	bl	8000c20 <HAL_GetTick>
 800174c:	0003      	movs	r3, r0
 800174e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001750:	e008      	b.n	8001764 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001752:	f7ff fa65 	bl	8000c20 <HAL_GetTick>
 8001756:	0002      	movs	r2, r0
 8001758:	69bb      	ldr	r3, [r7, #24]
 800175a:	1ad3      	subs	r3, r2, r3
 800175c:	2b02      	cmp	r3, #2
 800175e:	d901      	bls.n	8001764 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001760:	2303      	movs	r3, #3
 8001762:	e297      	b.n	8001c94 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001764:	4b59      	ldr	r3, [pc, #356]	@ (80018cc <HAL_RCC_OscConfig+0x338>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2202      	movs	r2, #2
 800176a:	4013      	ands	r3, r2
 800176c:	d0f1      	beq.n	8001752 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800176e:	4b57      	ldr	r3, [pc, #348]	@ (80018cc <HAL_RCC_OscConfig+0x338>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	22f8      	movs	r2, #248	@ 0xf8
 8001774:	4393      	bics	r3, r2
 8001776:	0019      	movs	r1, r3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	691b      	ldr	r3, [r3, #16]
 800177c:	00da      	lsls	r2, r3, #3
 800177e:	4b53      	ldr	r3, [pc, #332]	@ (80018cc <HAL_RCC_OscConfig+0x338>)
 8001780:	430a      	orrs	r2, r1
 8001782:	601a      	str	r2, [r3, #0]
 8001784:	e018      	b.n	80017b8 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001786:	4b51      	ldr	r3, [pc, #324]	@ (80018cc <HAL_RCC_OscConfig+0x338>)
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	4b50      	ldr	r3, [pc, #320]	@ (80018cc <HAL_RCC_OscConfig+0x338>)
 800178c:	2101      	movs	r1, #1
 800178e:	438a      	bics	r2, r1
 8001790:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001792:	f7ff fa45 	bl	8000c20 <HAL_GetTick>
 8001796:	0003      	movs	r3, r0
 8001798:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800179a:	e008      	b.n	80017ae <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800179c:	f7ff fa40 	bl	8000c20 <HAL_GetTick>
 80017a0:	0002      	movs	r2, r0
 80017a2:	69bb      	ldr	r3, [r7, #24]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d901      	bls.n	80017ae <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80017aa:	2303      	movs	r3, #3
 80017ac:	e272      	b.n	8001c94 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017ae:	4b47      	ldr	r3, [pc, #284]	@ (80018cc <HAL_RCC_OscConfig+0x338>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	2202      	movs	r2, #2
 80017b4:	4013      	ands	r3, r2
 80017b6:	d1f1      	bne.n	800179c <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	2208      	movs	r2, #8
 80017be:	4013      	ands	r3, r2
 80017c0:	d036      	beq.n	8001830 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	69db      	ldr	r3, [r3, #28]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d019      	beq.n	80017fe <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017ca:	4b40      	ldr	r3, [pc, #256]	@ (80018cc <HAL_RCC_OscConfig+0x338>)
 80017cc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80017ce:	4b3f      	ldr	r3, [pc, #252]	@ (80018cc <HAL_RCC_OscConfig+0x338>)
 80017d0:	2101      	movs	r1, #1
 80017d2:	430a      	orrs	r2, r1
 80017d4:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017d6:	f7ff fa23 	bl	8000c20 <HAL_GetTick>
 80017da:	0003      	movs	r3, r0
 80017dc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017de:	e008      	b.n	80017f2 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017e0:	f7ff fa1e 	bl	8000c20 <HAL_GetTick>
 80017e4:	0002      	movs	r2, r0
 80017e6:	69bb      	ldr	r3, [r7, #24]
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	2b02      	cmp	r3, #2
 80017ec:	d901      	bls.n	80017f2 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80017ee:	2303      	movs	r3, #3
 80017f0:	e250      	b.n	8001c94 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017f2:	4b36      	ldr	r3, [pc, #216]	@ (80018cc <HAL_RCC_OscConfig+0x338>)
 80017f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017f6:	2202      	movs	r2, #2
 80017f8:	4013      	ands	r3, r2
 80017fa:	d0f1      	beq.n	80017e0 <HAL_RCC_OscConfig+0x24c>
 80017fc:	e018      	b.n	8001830 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017fe:	4b33      	ldr	r3, [pc, #204]	@ (80018cc <HAL_RCC_OscConfig+0x338>)
 8001800:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001802:	4b32      	ldr	r3, [pc, #200]	@ (80018cc <HAL_RCC_OscConfig+0x338>)
 8001804:	2101      	movs	r1, #1
 8001806:	438a      	bics	r2, r1
 8001808:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800180a:	f7ff fa09 	bl	8000c20 <HAL_GetTick>
 800180e:	0003      	movs	r3, r0
 8001810:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001812:	e008      	b.n	8001826 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001814:	f7ff fa04 	bl	8000c20 <HAL_GetTick>
 8001818:	0002      	movs	r2, r0
 800181a:	69bb      	ldr	r3, [r7, #24]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	2b02      	cmp	r3, #2
 8001820:	d901      	bls.n	8001826 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001822:	2303      	movs	r3, #3
 8001824:	e236      	b.n	8001c94 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001826:	4b29      	ldr	r3, [pc, #164]	@ (80018cc <HAL_RCC_OscConfig+0x338>)
 8001828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800182a:	2202      	movs	r2, #2
 800182c:	4013      	ands	r3, r2
 800182e:	d1f1      	bne.n	8001814 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2204      	movs	r2, #4
 8001836:	4013      	ands	r3, r2
 8001838:	d100      	bne.n	800183c <HAL_RCC_OscConfig+0x2a8>
 800183a:	e0b5      	b.n	80019a8 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 800183c:	201f      	movs	r0, #31
 800183e:	183b      	adds	r3, r7, r0
 8001840:	2200      	movs	r2, #0
 8001842:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001844:	4b21      	ldr	r3, [pc, #132]	@ (80018cc <HAL_RCC_OscConfig+0x338>)
 8001846:	69da      	ldr	r2, [r3, #28]
 8001848:	2380      	movs	r3, #128	@ 0x80
 800184a:	055b      	lsls	r3, r3, #21
 800184c:	4013      	ands	r3, r2
 800184e:	d110      	bne.n	8001872 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001850:	4b1e      	ldr	r3, [pc, #120]	@ (80018cc <HAL_RCC_OscConfig+0x338>)
 8001852:	69da      	ldr	r2, [r3, #28]
 8001854:	4b1d      	ldr	r3, [pc, #116]	@ (80018cc <HAL_RCC_OscConfig+0x338>)
 8001856:	2180      	movs	r1, #128	@ 0x80
 8001858:	0549      	lsls	r1, r1, #21
 800185a:	430a      	orrs	r2, r1
 800185c:	61da      	str	r2, [r3, #28]
 800185e:	4b1b      	ldr	r3, [pc, #108]	@ (80018cc <HAL_RCC_OscConfig+0x338>)
 8001860:	69da      	ldr	r2, [r3, #28]
 8001862:	2380      	movs	r3, #128	@ 0x80
 8001864:	055b      	lsls	r3, r3, #21
 8001866:	4013      	ands	r3, r2
 8001868:	60fb      	str	r3, [r7, #12]
 800186a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800186c:	183b      	adds	r3, r7, r0
 800186e:	2201      	movs	r2, #1
 8001870:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001872:	4b19      	ldr	r3, [pc, #100]	@ (80018d8 <HAL_RCC_OscConfig+0x344>)
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	2380      	movs	r3, #128	@ 0x80
 8001878:	005b      	lsls	r3, r3, #1
 800187a:	4013      	ands	r3, r2
 800187c:	d11a      	bne.n	80018b4 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800187e:	4b16      	ldr	r3, [pc, #88]	@ (80018d8 <HAL_RCC_OscConfig+0x344>)
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	4b15      	ldr	r3, [pc, #84]	@ (80018d8 <HAL_RCC_OscConfig+0x344>)
 8001884:	2180      	movs	r1, #128	@ 0x80
 8001886:	0049      	lsls	r1, r1, #1
 8001888:	430a      	orrs	r2, r1
 800188a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800188c:	f7ff f9c8 	bl	8000c20 <HAL_GetTick>
 8001890:	0003      	movs	r3, r0
 8001892:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001894:	e008      	b.n	80018a8 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001896:	f7ff f9c3 	bl	8000c20 <HAL_GetTick>
 800189a:	0002      	movs	r2, r0
 800189c:	69bb      	ldr	r3, [r7, #24]
 800189e:	1ad3      	subs	r3, r2, r3
 80018a0:	2b64      	cmp	r3, #100	@ 0x64
 80018a2:	d901      	bls.n	80018a8 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80018a4:	2303      	movs	r3, #3
 80018a6:	e1f5      	b.n	8001c94 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018a8:	4b0b      	ldr	r3, [pc, #44]	@ (80018d8 <HAL_RCC_OscConfig+0x344>)
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	2380      	movs	r3, #128	@ 0x80
 80018ae:	005b      	lsls	r3, r3, #1
 80018b0:	4013      	ands	r3, r2
 80018b2:	d0f0      	beq.n	8001896 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	d10f      	bne.n	80018dc <HAL_RCC_OscConfig+0x348>
 80018bc:	4b03      	ldr	r3, [pc, #12]	@ (80018cc <HAL_RCC_OscConfig+0x338>)
 80018be:	6a1a      	ldr	r2, [r3, #32]
 80018c0:	4b02      	ldr	r3, [pc, #8]	@ (80018cc <HAL_RCC_OscConfig+0x338>)
 80018c2:	2101      	movs	r1, #1
 80018c4:	430a      	orrs	r2, r1
 80018c6:	621a      	str	r2, [r3, #32]
 80018c8:	e036      	b.n	8001938 <HAL_RCC_OscConfig+0x3a4>
 80018ca:	46c0      	nop			@ (mov r8, r8)
 80018cc:	40021000 	.word	0x40021000
 80018d0:	fffeffff 	.word	0xfffeffff
 80018d4:	fffbffff 	.word	0xfffbffff
 80018d8:	40007000 	.word	0x40007000
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d10c      	bne.n	80018fe <HAL_RCC_OscConfig+0x36a>
 80018e4:	4bca      	ldr	r3, [pc, #808]	@ (8001c10 <HAL_RCC_OscConfig+0x67c>)
 80018e6:	6a1a      	ldr	r2, [r3, #32]
 80018e8:	4bc9      	ldr	r3, [pc, #804]	@ (8001c10 <HAL_RCC_OscConfig+0x67c>)
 80018ea:	2101      	movs	r1, #1
 80018ec:	438a      	bics	r2, r1
 80018ee:	621a      	str	r2, [r3, #32]
 80018f0:	4bc7      	ldr	r3, [pc, #796]	@ (8001c10 <HAL_RCC_OscConfig+0x67c>)
 80018f2:	6a1a      	ldr	r2, [r3, #32]
 80018f4:	4bc6      	ldr	r3, [pc, #792]	@ (8001c10 <HAL_RCC_OscConfig+0x67c>)
 80018f6:	2104      	movs	r1, #4
 80018f8:	438a      	bics	r2, r1
 80018fa:	621a      	str	r2, [r3, #32]
 80018fc:	e01c      	b.n	8001938 <HAL_RCC_OscConfig+0x3a4>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	2b05      	cmp	r3, #5
 8001904:	d10c      	bne.n	8001920 <HAL_RCC_OscConfig+0x38c>
 8001906:	4bc2      	ldr	r3, [pc, #776]	@ (8001c10 <HAL_RCC_OscConfig+0x67c>)
 8001908:	6a1a      	ldr	r2, [r3, #32]
 800190a:	4bc1      	ldr	r3, [pc, #772]	@ (8001c10 <HAL_RCC_OscConfig+0x67c>)
 800190c:	2104      	movs	r1, #4
 800190e:	430a      	orrs	r2, r1
 8001910:	621a      	str	r2, [r3, #32]
 8001912:	4bbf      	ldr	r3, [pc, #764]	@ (8001c10 <HAL_RCC_OscConfig+0x67c>)
 8001914:	6a1a      	ldr	r2, [r3, #32]
 8001916:	4bbe      	ldr	r3, [pc, #760]	@ (8001c10 <HAL_RCC_OscConfig+0x67c>)
 8001918:	2101      	movs	r1, #1
 800191a:	430a      	orrs	r2, r1
 800191c:	621a      	str	r2, [r3, #32]
 800191e:	e00b      	b.n	8001938 <HAL_RCC_OscConfig+0x3a4>
 8001920:	4bbb      	ldr	r3, [pc, #748]	@ (8001c10 <HAL_RCC_OscConfig+0x67c>)
 8001922:	6a1a      	ldr	r2, [r3, #32]
 8001924:	4bba      	ldr	r3, [pc, #744]	@ (8001c10 <HAL_RCC_OscConfig+0x67c>)
 8001926:	2101      	movs	r1, #1
 8001928:	438a      	bics	r2, r1
 800192a:	621a      	str	r2, [r3, #32]
 800192c:	4bb8      	ldr	r3, [pc, #736]	@ (8001c10 <HAL_RCC_OscConfig+0x67c>)
 800192e:	6a1a      	ldr	r2, [r3, #32]
 8001930:	4bb7      	ldr	r3, [pc, #732]	@ (8001c10 <HAL_RCC_OscConfig+0x67c>)
 8001932:	2104      	movs	r1, #4
 8001934:	438a      	bics	r2, r1
 8001936:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d014      	beq.n	800196a <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001940:	f7ff f96e 	bl	8000c20 <HAL_GetTick>
 8001944:	0003      	movs	r3, r0
 8001946:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001948:	e009      	b.n	800195e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800194a:	f7ff f969 	bl	8000c20 <HAL_GetTick>
 800194e:	0002      	movs	r2, r0
 8001950:	69bb      	ldr	r3, [r7, #24]
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	4aaf      	ldr	r2, [pc, #700]	@ (8001c14 <HAL_RCC_OscConfig+0x680>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d901      	bls.n	800195e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e19a      	b.n	8001c94 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800195e:	4bac      	ldr	r3, [pc, #688]	@ (8001c10 <HAL_RCC_OscConfig+0x67c>)
 8001960:	6a1b      	ldr	r3, [r3, #32]
 8001962:	2202      	movs	r2, #2
 8001964:	4013      	ands	r3, r2
 8001966:	d0f0      	beq.n	800194a <HAL_RCC_OscConfig+0x3b6>
 8001968:	e013      	b.n	8001992 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800196a:	f7ff f959 	bl	8000c20 <HAL_GetTick>
 800196e:	0003      	movs	r3, r0
 8001970:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001972:	e009      	b.n	8001988 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001974:	f7ff f954 	bl	8000c20 <HAL_GetTick>
 8001978:	0002      	movs	r2, r0
 800197a:	69bb      	ldr	r3, [r7, #24]
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	4aa5      	ldr	r2, [pc, #660]	@ (8001c14 <HAL_RCC_OscConfig+0x680>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d901      	bls.n	8001988 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001984:	2303      	movs	r3, #3
 8001986:	e185      	b.n	8001c94 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001988:	4ba1      	ldr	r3, [pc, #644]	@ (8001c10 <HAL_RCC_OscConfig+0x67c>)
 800198a:	6a1b      	ldr	r3, [r3, #32]
 800198c:	2202      	movs	r2, #2
 800198e:	4013      	ands	r3, r2
 8001990:	d1f0      	bne.n	8001974 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001992:	231f      	movs	r3, #31
 8001994:	18fb      	adds	r3, r7, r3
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	2b01      	cmp	r3, #1
 800199a:	d105      	bne.n	80019a8 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800199c:	4b9c      	ldr	r3, [pc, #624]	@ (8001c10 <HAL_RCC_OscConfig+0x67c>)
 800199e:	69da      	ldr	r2, [r3, #28]
 80019a0:	4b9b      	ldr	r3, [pc, #620]	@ (8001c10 <HAL_RCC_OscConfig+0x67c>)
 80019a2:	499d      	ldr	r1, [pc, #628]	@ (8001c18 <HAL_RCC_OscConfig+0x684>)
 80019a4:	400a      	ands	r2, r1
 80019a6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	2210      	movs	r2, #16
 80019ae:	4013      	ands	r3, r2
 80019b0:	d063      	beq.n	8001a7a <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	695b      	ldr	r3, [r3, #20]
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	d12a      	bne.n	8001a10 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80019ba:	4b95      	ldr	r3, [pc, #596]	@ (8001c10 <HAL_RCC_OscConfig+0x67c>)
 80019bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80019be:	4b94      	ldr	r3, [pc, #592]	@ (8001c10 <HAL_RCC_OscConfig+0x67c>)
 80019c0:	2104      	movs	r1, #4
 80019c2:	430a      	orrs	r2, r1
 80019c4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80019c6:	4b92      	ldr	r3, [pc, #584]	@ (8001c10 <HAL_RCC_OscConfig+0x67c>)
 80019c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80019ca:	4b91      	ldr	r3, [pc, #580]	@ (8001c10 <HAL_RCC_OscConfig+0x67c>)
 80019cc:	2101      	movs	r1, #1
 80019ce:	430a      	orrs	r2, r1
 80019d0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019d2:	f7ff f925 	bl	8000c20 <HAL_GetTick>
 80019d6:	0003      	movs	r3, r0
 80019d8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80019da:	e008      	b.n	80019ee <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80019dc:	f7ff f920 	bl	8000c20 <HAL_GetTick>
 80019e0:	0002      	movs	r2, r0
 80019e2:	69bb      	ldr	r3, [r7, #24]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	d901      	bls.n	80019ee <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	e152      	b.n	8001c94 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80019ee:	4b88      	ldr	r3, [pc, #544]	@ (8001c10 <HAL_RCC_OscConfig+0x67c>)
 80019f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019f2:	2202      	movs	r2, #2
 80019f4:	4013      	ands	r3, r2
 80019f6:	d0f1      	beq.n	80019dc <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80019f8:	4b85      	ldr	r3, [pc, #532]	@ (8001c10 <HAL_RCC_OscConfig+0x67c>)
 80019fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019fc:	22f8      	movs	r2, #248	@ 0xf8
 80019fe:	4393      	bics	r3, r2
 8001a00:	0019      	movs	r1, r3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	699b      	ldr	r3, [r3, #24]
 8001a06:	00da      	lsls	r2, r3, #3
 8001a08:	4b81      	ldr	r3, [pc, #516]	@ (8001c10 <HAL_RCC_OscConfig+0x67c>)
 8001a0a:	430a      	orrs	r2, r1
 8001a0c:	635a      	str	r2, [r3, #52]	@ 0x34
 8001a0e:	e034      	b.n	8001a7a <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	695b      	ldr	r3, [r3, #20]
 8001a14:	3305      	adds	r3, #5
 8001a16:	d111      	bne.n	8001a3c <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001a18:	4b7d      	ldr	r3, [pc, #500]	@ (8001c10 <HAL_RCC_OscConfig+0x67c>)
 8001a1a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001a1c:	4b7c      	ldr	r3, [pc, #496]	@ (8001c10 <HAL_RCC_OscConfig+0x67c>)
 8001a1e:	2104      	movs	r1, #4
 8001a20:	438a      	bics	r2, r1
 8001a22:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001a24:	4b7a      	ldr	r3, [pc, #488]	@ (8001c10 <HAL_RCC_OscConfig+0x67c>)
 8001a26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a28:	22f8      	movs	r2, #248	@ 0xf8
 8001a2a:	4393      	bics	r3, r2
 8001a2c:	0019      	movs	r1, r3
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	699b      	ldr	r3, [r3, #24]
 8001a32:	00da      	lsls	r2, r3, #3
 8001a34:	4b76      	ldr	r3, [pc, #472]	@ (8001c10 <HAL_RCC_OscConfig+0x67c>)
 8001a36:	430a      	orrs	r2, r1
 8001a38:	635a      	str	r2, [r3, #52]	@ 0x34
 8001a3a:	e01e      	b.n	8001a7a <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001a3c:	4b74      	ldr	r3, [pc, #464]	@ (8001c10 <HAL_RCC_OscConfig+0x67c>)
 8001a3e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001a40:	4b73      	ldr	r3, [pc, #460]	@ (8001c10 <HAL_RCC_OscConfig+0x67c>)
 8001a42:	2104      	movs	r1, #4
 8001a44:	430a      	orrs	r2, r1
 8001a46:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001a48:	4b71      	ldr	r3, [pc, #452]	@ (8001c10 <HAL_RCC_OscConfig+0x67c>)
 8001a4a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001a4c:	4b70      	ldr	r3, [pc, #448]	@ (8001c10 <HAL_RCC_OscConfig+0x67c>)
 8001a4e:	2101      	movs	r1, #1
 8001a50:	438a      	bics	r2, r1
 8001a52:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a54:	f7ff f8e4 	bl	8000c20 <HAL_GetTick>
 8001a58:	0003      	movs	r3, r0
 8001a5a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001a5c:	e008      	b.n	8001a70 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001a5e:	f7ff f8df 	bl	8000c20 <HAL_GetTick>
 8001a62:	0002      	movs	r2, r0
 8001a64:	69bb      	ldr	r3, [r7, #24]
 8001a66:	1ad3      	subs	r3, r2, r3
 8001a68:	2b02      	cmp	r3, #2
 8001a6a:	d901      	bls.n	8001a70 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001a6c:	2303      	movs	r3, #3
 8001a6e:	e111      	b.n	8001c94 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001a70:	4b67      	ldr	r3, [pc, #412]	@ (8001c10 <HAL_RCC_OscConfig+0x67c>)
 8001a72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a74:	2202      	movs	r2, #2
 8001a76:	4013      	ands	r3, r2
 8001a78:	d1f1      	bne.n	8001a5e <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	2220      	movs	r2, #32
 8001a80:	4013      	ands	r3, r2
 8001a82:	d05c      	beq.n	8001b3e <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001a84:	4b62      	ldr	r3, [pc, #392]	@ (8001c10 <HAL_RCC_OscConfig+0x67c>)
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	220c      	movs	r2, #12
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	2b0c      	cmp	r3, #12
 8001a8e:	d00e      	beq.n	8001aae <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001a90:	4b5f      	ldr	r3, [pc, #380]	@ (8001c10 <HAL_RCC_OscConfig+0x67c>)
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	220c      	movs	r2, #12
 8001a96:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001a98:	2b08      	cmp	r3, #8
 8001a9a:	d114      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001a9c:	4b5c      	ldr	r3, [pc, #368]	@ (8001c10 <HAL_RCC_OscConfig+0x67c>)
 8001a9e:	685a      	ldr	r2, [r3, #4]
 8001aa0:	23c0      	movs	r3, #192	@ 0xc0
 8001aa2:	025b      	lsls	r3, r3, #9
 8001aa4:	401a      	ands	r2, r3
 8001aa6:	23c0      	movs	r3, #192	@ 0xc0
 8001aa8:	025b      	lsls	r3, r3, #9
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	d10b      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001aae:	4b58      	ldr	r3, [pc, #352]	@ (8001c10 <HAL_RCC_OscConfig+0x67c>)
 8001ab0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001ab2:	2380      	movs	r3, #128	@ 0x80
 8001ab4:	029b      	lsls	r3, r3, #10
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	d040      	beq.n	8001b3c <HAL_RCC_OscConfig+0x5a8>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6a1b      	ldr	r3, [r3, #32]
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d03c      	beq.n	8001b3c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e0e6      	b.n	8001c94 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6a1b      	ldr	r3, [r3, #32]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d01b      	beq.n	8001b06 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001ace:	4b50      	ldr	r3, [pc, #320]	@ (8001c10 <HAL_RCC_OscConfig+0x67c>)
 8001ad0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001ad2:	4b4f      	ldr	r3, [pc, #316]	@ (8001c10 <HAL_RCC_OscConfig+0x67c>)
 8001ad4:	2180      	movs	r1, #128	@ 0x80
 8001ad6:	0249      	lsls	r1, r1, #9
 8001ad8:	430a      	orrs	r2, r1
 8001ada:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001adc:	f7ff f8a0 	bl	8000c20 <HAL_GetTick>
 8001ae0:	0003      	movs	r3, r0
 8001ae2:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001ae4:	e008      	b.n	8001af8 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ae6:	f7ff f89b 	bl	8000c20 <HAL_GetTick>
 8001aea:	0002      	movs	r2, r0
 8001aec:	69bb      	ldr	r3, [r7, #24]
 8001aee:	1ad3      	subs	r3, r2, r3
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	d901      	bls.n	8001af8 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001af4:	2303      	movs	r3, #3
 8001af6:	e0cd      	b.n	8001c94 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001af8:	4b45      	ldr	r3, [pc, #276]	@ (8001c10 <HAL_RCC_OscConfig+0x67c>)
 8001afa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001afc:	2380      	movs	r3, #128	@ 0x80
 8001afe:	029b      	lsls	r3, r3, #10
 8001b00:	4013      	ands	r3, r2
 8001b02:	d0f0      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x552>
 8001b04:	e01b      	b.n	8001b3e <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001b06:	4b42      	ldr	r3, [pc, #264]	@ (8001c10 <HAL_RCC_OscConfig+0x67c>)
 8001b08:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b0a:	4b41      	ldr	r3, [pc, #260]	@ (8001c10 <HAL_RCC_OscConfig+0x67c>)
 8001b0c:	4943      	ldr	r1, [pc, #268]	@ (8001c1c <HAL_RCC_OscConfig+0x688>)
 8001b0e:	400a      	ands	r2, r1
 8001b10:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b12:	f7ff f885 	bl	8000c20 <HAL_GetTick>
 8001b16:	0003      	movs	r3, r0
 8001b18:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001b1a:	e008      	b.n	8001b2e <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b1c:	f7ff f880 	bl	8000c20 <HAL_GetTick>
 8001b20:	0002      	movs	r2, r0
 8001b22:	69bb      	ldr	r3, [r7, #24]
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d901      	bls.n	8001b2e <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e0b2      	b.n	8001c94 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001b2e:	4b38      	ldr	r3, [pc, #224]	@ (8001c10 <HAL_RCC_OscConfig+0x67c>)
 8001b30:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b32:	2380      	movs	r3, #128	@ 0x80
 8001b34:	029b      	lsls	r3, r3, #10
 8001b36:	4013      	ands	r3, r2
 8001b38:	d1f0      	bne.n	8001b1c <HAL_RCC_OscConfig+0x588>
 8001b3a:	e000      	b.n	8001b3e <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001b3c:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d100      	bne.n	8001b48 <HAL_RCC_OscConfig+0x5b4>
 8001b46:	e0a4      	b.n	8001c92 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b48:	4b31      	ldr	r3, [pc, #196]	@ (8001c10 <HAL_RCC_OscConfig+0x67c>)
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	220c      	movs	r2, #12
 8001b4e:	4013      	ands	r3, r2
 8001b50:	2b08      	cmp	r3, #8
 8001b52:	d100      	bne.n	8001b56 <HAL_RCC_OscConfig+0x5c2>
 8001b54:	e078      	b.n	8001c48 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d14c      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b5e:	4b2c      	ldr	r3, [pc, #176]	@ (8001c10 <HAL_RCC_OscConfig+0x67c>)
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	4b2b      	ldr	r3, [pc, #172]	@ (8001c10 <HAL_RCC_OscConfig+0x67c>)
 8001b64:	492e      	ldr	r1, [pc, #184]	@ (8001c20 <HAL_RCC_OscConfig+0x68c>)
 8001b66:	400a      	ands	r2, r1
 8001b68:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b6a:	f7ff f859 	bl	8000c20 <HAL_GetTick>
 8001b6e:	0003      	movs	r3, r0
 8001b70:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b72:	e008      	b.n	8001b86 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b74:	f7ff f854 	bl	8000c20 <HAL_GetTick>
 8001b78:	0002      	movs	r2, r0
 8001b7a:	69bb      	ldr	r3, [r7, #24]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	2b02      	cmp	r3, #2
 8001b80:	d901      	bls.n	8001b86 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8001b82:	2303      	movs	r3, #3
 8001b84:	e086      	b.n	8001c94 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b86:	4b22      	ldr	r3, [pc, #136]	@ (8001c10 <HAL_RCC_OscConfig+0x67c>)
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	2380      	movs	r3, #128	@ 0x80
 8001b8c:	049b      	lsls	r3, r3, #18
 8001b8e:	4013      	ands	r3, r2
 8001b90:	d1f0      	bne.n	8001b74 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b92:	4b1f      	ldr	r3, [pc, #124]	@ (8001c10 <HAL_RCC_OscConfig+0x67c>)
 8001b94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b96:	220f      	movs	r2, #15
 8001b98:	4393      	bics	r3, r2
 8001b9a:	0019      	movs	r1, r3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001ba0:	4b1b      	ldr	r3, [pc, #108]	@ (8001c10 <HAL_RCC_OscConfig+0x67c>)
 8001ba2:	430a      	orrs	r2, r1
 8001ba4:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001ba6:	4b1a      	ldr	r3, [pc, #104]	@ (8001c10 <HAL_RCC_OscConfig+0x67c>)
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	4a1e      	ldr	r2, [pc, #120]	@ (8001c24 <HAL_RCC_OscConfig+0x690>)
 8001bac:	4013      	ands	r3, r2
 8001bae:	0019      	movs	r1, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bb8:	431a      	orrs	r2, r3
 8001bba:	4b15      	ldr	r3, [pc, #84]	@ (8001c10 <HAL_RCC_OscConfig+0x67c>)
 8001bbc:	430a      	orrs	r2, r1
 8001bbe:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bc0:	4b13      	ldr	r3, [pc, #76]	@ (8001c10 <HAL_RCC_OscConfig+0x67c>)
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	4b12      	ldr	r3, [pc, #72]	@ (8001c10 <HAL_RCC_OscConfig+0x67c>)
 8001bc6:	2180      	movs	r1, #128	@ 0x80
 8001bc8:	0449      	lsls	r1, r1, #17
 8001bca:	430a      	orrs	r2, r1
 8001bcc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bce:	f7ff f827 	bl	8000c20 <HAL_GetTick>
 8001bd2:	0003      	movs	r3, r0
 8001bd4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bd6:	e008      	b.n	8001bea <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bd8:	f7ff f822 	bl	8000c20 <HAL_GetTick>
 8001bdc:	0002      	movs	r2, r0
 8001bde:	69bb      	ldr	r3, [r7, #24]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	2b02      	cmp	r3, #2
 8001be4:	d901      	bls.n	8001bea <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8001be6:	2303      	movs	r3, #3
 8001be8:	e054      	b.n	8001c94 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bea:	4b09      	ldr	r3, [pc, #36]	@ (8001c10 <HAL_RCC_OscConfig+0x67c>)
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	2380      	movs	r3, #128	@ 0x80
 8001bf0:	049b      	lsls	r3, r3, #18
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	d0f0      	beq.n	8001bd8 <HAL_RCC_OscConfig+0x644>
 8001bf6:	e04c      	b.n	8001c92 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bf8:	4b05      	ldr	r3, [pc, #20]	@ (8001c10 <HAL_RCC_OscConfig+0x67c>)
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	4b04      	ldr	r3, [pc, #16]	@ (8001c10 <HAL_RCC_OscConfig+0x67c>)
 8001bfe:	4908      	ldr	r1, [pc, #32]	@ (8001c20 <HAL_RCC_OscConfig+0x68c>)
 8001c00:	400a      	ands	r2, r1
 8001c02:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c04:	f7ff f80c 	bl	8000c20 <HAL_GetTick>
 8001c08:	0003      	movs	r3, r0
 8001c0a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c0c:	e015      	b.n	8001c3a <HAL_RCC_OscConfig+0x6a6>
 8001c0e:	46c0      	nop			@ (mov r8, r8)
 8001c10:	40021000 	.word	0x40021000
 8001c14:	00001388 	.word	0x00001388
 8001c18:	efffffff 	.word	0xefffffff
 8001c1c:	fffeffff 	.word	0xfffeffff
 8001c20:	feffffff 	.word	0xfeffffff
 8001c24:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c28:	f7fe fffa 	bl	8000c20 <HAL_GetTick>
 8001c2c:	0002      	movs	r2, r0
 8001c2e:	69bb      	ldr	r3, [r7, #24]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d901      	bls.n	8001c3a <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e02c      	b.n	8001c94 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c3a:	4b18      	ldr	r3, [pc, #96]	@ (8001c9c <HAL_RCC_OscConfig+0x708>)
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	2380      	movs	r3, #128	@ 0x80
 8001c40:	049b      	lsls	r3, r3, #18
 8001c42:	4013      	ands	r3, r2
 8001c44:	d1f0      	bne.n	8001c28 <HAL_RCC_OscConfig+0x694>
 8001c46:	e024      	b.n	8001c92 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d101      	bne.n	8001c54 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	e01f      	b.n	8001c94 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001c54:	4b11      	ldr	r3, [pc, #68]	@ (8001c9c <HAL_RCC_OscConfig+0x708>)
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001c5a:	4b10      	ldr	r3, [pc, #64]	@ (8001c9c <HAL_RCC_OscConfig+0x708>)
 8001c5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c5e:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c60:	697a      	ldr	r2, [r7, #20]
 8001c62:	23c0      	movs	r3, #192	@ 0xc0
 8001c64:	025b      	lsls	r3, r3, #9
 8001c66:	401a      	ands	r2, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d10e      	bne.n	8001c8e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	220f      	movs	r2, #15
 8001c74:	401a      	ands	r2, r3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c7a:	429a      	cmp	r2, r3
 8001c7c:	d107      	bne.n	8001c8e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001c7e:	697a      	ldr	r2, [r7, #20]
 8001c80:	23f0      	movs	r3, #240	@ 0xf0
 8001c82:	039b      	lsls	r3, r3, #14
 8001c84:	401a      	ands	r2, r3
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d001      	beq.n	8001c92 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e000      	b.n	8001c94 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8001c92:	2300      	movs	r3, #0
}
 8001c94:	0018      	movs	r0, r3
 8001c96:	46bd      	mov	sp, r7
 8001c98:	b008      	add	sp, #32
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	40021000 	.word	0x40021000

08001ca0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b084      	sub	sp, #16
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d101      	bne.n	8001cb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e0bf      	b.n	8001e34 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001cb4:	4b61      	ldr	r3, [pc, #388]	@ (8001e3c <HAL_RCC_ClockConfig+0x19c>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	2201      	movs	r2, #1
 8001cba:	4013      	ands	r3, r2
 8001cbc:	683a      	ldr	r2, [r7, #0]
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	d911      	bls.n	8001ce6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cc2:	4b5e      	ldr	r3, [pc, #376]	@ (8001e3c <HAL_RCC_ClockConfig+0x19c>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	4393      	bics	r3, r2
 8001cca:	0019      	movs	r1, r3
 8001ccc:	4b5b      	ldr	r3, [pc, #364]	@ (8001e3c <HAL_RCC_ClockConfig+0x19c>)
 8001cce:	683a      	ldr	r2, [r7, #0]
 8001cd0:	430a      	orrs	r2, r1
 8001cd2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cd4:	4b59      	ldr	r3, [pc, #356]	@ (8001e3c <HAL_RCC_ClockConfig+0x19c>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	2201      	movs	r2, #1
 8001cda:	4013      	ands	r3, r2
 8001cdc:	683a      	ldr	r2, [r7, #0]
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	d001      	beq.n	8001ce6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e0a6      	b.n	8001e34 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	2202      	movs	r2, #2
 8001cec:	4013      	ands	r3, r2
 8001cee:	d015      	beq.n	8001d1c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	2204      	movs	r2, #4
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	d006      	beq.n	8001d08 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001cfa:	4b51      	ldr	r3, [pc, #324]	@ (8001e40 <HAL_RCC_ClockConfig+0x1a0>)
 8001cfc:	685a      	ldr	r2, [r3, #4]
 8001cfe:	4b50      	ldr	r3, [pc, #320]	@ (8001e40 <HAL_RCC_ClockConfig+0x1a0>)
 8001d00:	21e0      	movs	r1, #224	@ 0xe0
 8001d02:	00c9      	lsls	r1, r1, #3
 8001d04:	430a      	orrs	r2, r1
 8001d06:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d08:	4b4d      	ldr	r3, [pc, #308]	@ (8001e40 <HAL_RCC_ClockConfig+0x1a0>)
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	22f0      	movs	r2, #240	@ 0xf0
 8001d0e:	4393      	bics	r3, r2
 8001d10:	0019      	movs	r1, r3
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	689a      	ldr	r2, [r3, #8]
 8001d16:	4b4a      	ldr	r3, [pc, #296]	@ (8001e40 <HAL_RCC_ClockConfig+0x1a0>)
 8001d18:	430a      	orrs	r2, r1
 8001d1a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	2201      	movs	r2, #1
 8001d22:	4013      	ands	r3, r2
 8001d24:	d04c      	beq.n	8001dc0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d107      	bne.n	8001d3e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d2e:	4b44      	ldr	r3, [pc, #272]	@ (8001e40 <HAL_RCC_ClockConfig+0x1a0>)
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	2380      	movs	r3, #128	@ 0x80
 8001d34:	029b      	lsls	r3, r3, #10
 8001d36:	4013      	ands	r3, r2
 8001d38:	d120      	bne.n	8001d7c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e07a      	b.n	8001e34 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	2b02      	cmp	r3, #2
 8001d44:	d107      	bne.n	8001d56 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d46:	4b3e      	ldr	r3, [pc, #248]	@ (8001e40 <HAL_RCC_ClockConfig+0x1a0>)
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	2380      	movs	r3, #128	@ 0x80
 8001d4c:	049b      	lsls	r3, r3, #18
 8001d4e:	4013      	ands	r3, r2
 8001d50:	d114      	bne.n	8001d7c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e06e      	b.n	8001e34 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	2b03      	cmp	r3, #3
 8001d5c:	d107      	bne.n	8001d6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001d5e:	4b38      	ldr	r3, [pc, #224]	@ (8001e40 <HAL_RCC_ClockConfig+0x1a0>)
 8001d60:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001d62:	2380      	movs	r3, #128	@ 0x80
 8001d64:	029b      	lsls	r3, r3, #10
 8001d66:	4013      	ands	r3, r2
 8001d68:	d108      	bne.n	8001d7c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e062      	b.n	8001e34 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d6e:	4b34      	ldr	r3, [pc, #208]	@ (8001e40 <HAL_RCC_ClockConfig+0x1a0>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	2202      	movs	r2, #2
 8001d74:	4013      	ands	r3, r2
 8001d76:	d101      	bne.n	8001d7c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e05b      	b.n	8001e34 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d7c:	4b30      	ldr	r3, [pc, #192]	@ (8001e40 <HAL_RCC_ClockConfig+0x1a0>)
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	2203      	movs	r2, #3
 8001d82:	4393      	bics	r3, r2
 8001d84:	0019      	movs	r1, r3
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	685a      	ldr	r2, [r3, #4]
 8001d8a:	4b2d      	ldr	r3, [pc, #180]	@ (8001e40 <HAL_RCC_ClockConfig+0x1a0>)
 8001d8c:	430a      	orrs	r2, r1
 8001d8e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d90:	f7fe ff46 	bl	8000c20 <HAL_GetTick>
 8001d94:	0003      	movs	r3, r0
 8001d96:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d98:	e009      	b.n	8001dae <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d9a:	f7fe ff41 	bl	8000c20 <HAL_GetTick>
 8001d9e:	0002      	movs	r2, r0
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	1ad3      	subs	r3, r2, r3
 8001da4:	4a27      	ldr	r2, [pc, #156]	@ (8001e44 <HAL_RCC_ClockConfig+0x1a4>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d901      	bls.n	8001dae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e042      	b.n	8001e34 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dae:	4b24      	ldr	r3, [pc, #144]	@ (8001e40 <HAL_RCC_ClockConfig+0x1a0>)
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	220c      	movs	r2, #12
 8001db4:	401a      	ands	r2, r3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d1ec      	bne.n	8001d9a <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001dc0:	4b1e      	ldr	r3, [pc, #120]	@ (8001e3c <HAL_RCC_ClockConfig+0x19c>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	683a      	ldr	r2, [r7, #0]
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	d211      	bcs.n	8001df2 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dce:	4b1b      	ldr	r3, [pc, #108]	@ (8001e3c <HAL_RCC_ClockConfig+0x19c>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	4393      	bics	r3, r2
 8001dd6:	0019      	movs	r1, r3
 8001dd8:	4b18      	ldr	r3, [pc, #96]	@ (8001e3c <HAL_RCC_ClockConfig+0x19c>)
 8001dda:	683a      	ldr	r2, [r7, #0]
 8001ddc:	430a      	orrs	r2, r1
 8001dde:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001de0:	4b16      	ldr	r3, [pc, #88]	@ (8001e3c <HAL_RCC_ClockConfig+0x19c>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	2201      	movs	r2, #1
 8001de6:	4013      	ands	r3, r2
 8001de8:	683a      	ldr	r2, [r7, #0]
 8001dea:	429a      	cmp	r2, r3
 8001dec:	d001      	beq.n	8001df2 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e020      	b.n	8001e34 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	2204      	movs	r2, #4
 8001df8:	4013      	ands	r3, r2
 8001dfa:	d009      	beq.n	8001e10 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001dfc:	4b10      	ldr	r3, [pc, #64]	@ (8001e40 <HAL_RCC_ClockConfig+0x1a0>)
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	4a11      	ldr	r2, [pc, #68]	@ (8001e48 <HAL_RCC_ClockConfig+0x1a8>)
 8001e02:	4013      	ands	r3, r2
 8001e04:	0019      	movs	r1, r3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	68da      	ldr	r2, [r3, #12]
 8001e0a:	4b0d      	ldr	r3, [pc, #52]	@ (8001e40 <HAL_RCC_ClockConfig+0x1a0>)
 8001e0c:	430a      	orrs	r2, r1
 8001e0e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001e10:	f000 f820 	bl	8001e54 <HAL_RCC_GetSysClockFreq>
 8001e14:	0001      	movs	r1, r0
 8001e16:	4b0a      	ldr	r3, [pc, #40]	@ (8001e40 <HAL_RCC_ClockConfig+0x1a0>)
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	091b      	lsrs	r3, r3, #4
 8001e1c:	220f      	movs	r2, #15
 8001e1e:	4013      	ands	r3, r2
 8001e20:	4a0a      	ldr	r2, [pc, #40]	@ (8001e4c <HAL_RCC_ClockConfig+0x1ac>)
 8001e22:	5cd3      	ldrb	r3, [r2, r3]
 8001e24:	000a      	movs	r2, r1
 8001e26:	40da      	lsrs	r2, r3
 8001e28:	4b09      	ldr	r3, [pc, #36]	@ (8001e50 <HAL_RCC_ClockConfig+0x1b0>)
 8001e2a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001e2c:	2000      	movs	r0, #0
 8001e2e:	f7fe feb1 	bl	8000b94 <HAL_InitTick>
  
  return HAL_OK;
 8001e32:	2300      	movs	r3, #0
}
 8001e34:	0018      	movs	r0, r3
 8001e36:	46bd      	mov	sp, r7
 8001e38:	b004      	add	sp, #16
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	40022000 	.word	0x40022000
 8001e40:	40021000 	.word	0x40021000
 8001e44:	00001388 	.word	0x00001388
 8001e48:	fffff8ff 	.word	0xfffff8ff
 8001e4c:	0800428c 	.word	0x0800428c
 8001e50:	20000000 	.word	0x20000000

08001e54 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b086      	sub	sp, #24
 8001e58:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	60fb      	str	r3, [r7, #12]
 8001e5e:	2300      	movs	r3, #0
 8001e60:	60bb      	str	r3, [r7, #8]
 8001e62:	2300      	movs	r3, #0
 8001e64:	617b      	str	r3, [r7, #20]
 8001e66:	2300      	movs	r3, #0
 8001e68:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001e6e:	4b2d      	ldr	r3, [pc, #180]	@ (8001f24 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	220c      	movs	r2, #12
 8001e78:	4013      	ands	r3, r2
 8001e7a:	2b0c      	cmp	r3, #12
 8001e7c:	d046      	beq.n	8001f0c <HAL_RCC_GetSysClockFreq+0xb8>
 8001e7e:	d848      	bhi.n	8001f12 <HAL_RCC_GetSysClockFreq+0xbe>
 8001e80:	2b04      	cmp	r3, #4
 8001e82:	d002      	beq.n	8001e8a <HAL_RCC_GetSysClockFreq+0x36>
 8001e84:	2b08      	cmp	r3, #8
 8001e86:	d003      	beq.n	8001e90 <HAL_RCC_GetSysClockFreq+0x3c>
 8001e88:	e043      	b.n	8001f12 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e8a:	4b27      	ldr	r3, [pc, #156]	@ (8001f28 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001e8c:	613b      	str	r3, [r7, #16]
      break;
 8001e8e:	e043      	b.n	8001f18 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	0c9b      	lsrs	r3, r3, #18
 8001e94:	220f      	movs	r2, #15
 8001e96:	4013      	ands	r3, r2
 8001e98:	4a24      	ldr	r2, [pc, #144]	@ (8001f2c <HAL_RCC_GetSysClockFreq+0xd8>)
 8001e9a:	5cd3      	ldrb	r3, [r2, r3]
 8001e9c:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001e9e:	4b21      	ldr	r3, [pc, #132]	@ (8001f24 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001ea0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ea2:	220f      	movs	r2, #15
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	4a22      	ldr	r2, [pc, #136]	@ (8001f30 <HAL_RCC_GetSysClockFreq+0xdc>)
 8001ea8:	5cd3      	ldrb	r3, [r2, r3]
 8001eaa:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001eac:	68fa      	ldr	r2, [r7, #12]
 8001eae:	23c0      	movs	r3, #192	@ 0xc0
 8001eb0:	025b      	lsls	r3, r3, #9
 8001eb2:	401a      	ands	r2, r3
 8001eb4:	2380      	movs	r3, #128	@ 0x80
 8001eb6:	025b      	lsls	r3, r3, #9
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d109      	bne.n	8001ed0 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001ebc:	68b9      	ldr	r1, [r7, #8]
 8001ebe:	481a      	ldr	r0, [pc, #104]	@ (8001f28 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001ec0:	f7fe f922 	bl	8000108 <__udivsi3>
 8001ec4:	0003      	movs	r3, r0
 8001ec6:	001a      	movs	r2, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	4353      	muls	r3, r2
 8001ecc:	617b      	str	r3, [r7, #20]
 8001ece:	e01a      	b.n	8001f06 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001ed0:	68fa      	ldr	r2, [r7, #12]
 8001ed2:	23c0      	movs	r3, #192	@ 0xc0
 8001ed4:	025b      	lsls	r3, r3, #9
 8001ed6:	401a      	ands	r2, r3
 8001ed8:	23c0      	movs	r3, #192	@ 0xc0
 8001eda:	025b      	lsls	r3, r3, #9
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d109      	bne.n	8001ef4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001ee0:	68b9      	ldr	r1, [r7, #8]
 8001ee2:	4814      	ldr	r0, [pc, #80]	@ (8001f34 <HAL_RCC_GetSysClockFreq+0xe0>)
 8001ee4:	f7fe f910 	bl	8000108 <__udivsi3>
 8001ee8:	0003      	movs	r3, r0
 8001eea:	001a      	movs	r2, r3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	4353      	muls	r3, r2
 8001ef0:	617b      	str	r3, [r7, #20]
 8001ef2:	e008      	b.n	8001f06 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001ef4:	68b9      	ldr	r1, [r7, #8]
 8001ef6:	480c      	ldr	r0, [pc, #48]	@ (8001f28 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001ef8:	f7fe f906 	bl	8000108 <__udivsi3>
 8001efc:	0003      	movs	r3, r0
 8001efe:	001a      	movs	r2, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	4353      	muls	r3, r2
 8001f04:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	613b      	str	r3, [r7, #16]
      break;
 8001f0a:	e005      	b.n	8001f18 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001f0c:	4b09      	ldr	r3, [pc, #36]	@ (8001f34 <HAL_RCC_GetSysClockFreq+0xe0>)
 8001f0e:	613b      	str	r3, [r7, #16]
      break;
 8001f10:	e002      	b.n	8001f18 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f12:	4b05      	ldr	r3, [pc, #20]	@ (8001f28 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001f14:	613b      	str	r3, [r7, #16]
      break;
 8001f16:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001f18:	693b      	ldr	r3, [r7, #16]
}
 8001f1a:	0018      	movs	r0, r3
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	b006      	add	sp, #24
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	46c0      	nop			@ (mov r8, r8)
 8001f24:	40021000 	.word	0x40021000
 8001f28:	007a1200 	.word	0x007a1200
 8001f2c:	080042a4 	.word	0x080042a4
 8001f30:	080042b4 	.word	0x080042b4
 8001f34:	02dc6c00 	.word	0x02dc6c00

08001f38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f3c:	4b02      	ldr	r3, [pc, #8]	@ (8001f48 <HAL_RCC_GetHCLKFreq+0x10>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
}
 8001f40:	0018      	movs	r0, r3
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	46c0      	nop			@ (mov r8, r8)
 8001f48:	20000000 	.word	0x20000000

08001f4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001f50:	f7ff fff2 	bl	8001f38 <HAL_RCC_GetHCLKFreq>
 8001f54:	0001      	movs	r1, r0
 8001f56:	4b06      	ldr	r3, [pc, #24]	@ (8001f70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	0a1b      	lsrs	r3, r3, #8
 8001f5c:	2207      	movs	r2, #7
 8001f5e:	4013      	ands	r3, r2
 8001f60:	4a04      	ldr	r2, [pc, #16]	@ (8001f74 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001f62:	5cd3      	ldrb	r3, [r2, r3]
 8001f64:	40d9      	lsrs	r1, r3
 8001f66:	000b      	movs	r3, r1
}    
 8001f68:	0018      	movs	r0, r3
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	46c0      	nop			@ (mov r8, r8)
 8001f70:	40021000 	.word	0x40021000
 8001f74:	0800429c 	.word	0x0800429c

08001f78 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b086      	sub	sp, #24
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f80:	2300      	movs	r3, #0
 8001f82:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001f84:	2300      	movs	r3, #0
 8001f86:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	2380      	movs	r3, #128	@ 0x80
 8001f8e:	025b      	lsls	r3, r3, #9
 8001f90:	4013      	ands	r3, r2
 8001f92:	d100      	bne.n	8001f96 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001f94:	e08e      	b.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001f96:	2017      	movs	r0, #23
 8001f98:	183b      	adds	r3, r7, r0
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f9e:	4b6e      	ldr	r3, [pc, #440]	@ (8002158 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001fa0:	69da      	ldr	r2, [r3, #28]
 8001fa2:	2380      	movs	r3, #128	@ 0x80
 8001fa4:	055b      	lsls	r3, r3, #21
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	d110      	bne.n	8001fcc <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001faa:	4b6b      	ldr	r3, [pc, #428]	@ (8002158 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001fac:	69da      	ldr	r2, [r3, #28]
 8001fae:	4b6a      	ldr	r3, [pc, #424]	@ (8002158 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001fb0:	2180      	movs	r1, #128	@ 0x80
 8001fb2:	0549      	lsls	r1, r1, #21
 8001fb4:	430a      	orrs	r2, r1
 8001fb6:	61da      	str	r2, [r3, #28]
 8001fb8:	4b67      	ldr	r3, [pc, #412]	@ (8002158 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001fba:	69da      	ldr	r2, [r3, #28]
 8001fbc:	2380      	movs	r3, #128	@ 0x80
 8001fbe:	055b      	lsls	r3, r3, #21
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	60bb      	str	r3, [r7, #8]
 8001fc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fc6:	183b      	adds	r3, r7, r0
 8001fc8:	2201      	movs	r2, #1
 8001fca:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fcc:	4b63      	ldr	r3, [pc, #396]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	2380      	movs	r3, #128	@ 0x80
 8001fd2:	005b      	lsls	r3, r3, #1
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	d11a      	bne.n	800200e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fd8:	4b60      	ldr	r3, [pc, #384]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	4b5f      	ldr	r3, [pc, #380]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001fde:	2180      	movs	r1, #128	@ 0x80
 8001fe0:	0049      	lsls	r1, r1, #1
 8001fe2:	430a      	orrs	r2, r1
 8001fe4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fe6:	f7fe fe1b 	bl	8000c20 <HAL_GetTick>
 8001fea:	0003      	movs	r3, r0
 8001fec:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fee:	e008      	b.n	8002002 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ff0:	f7fe fe16 	bl	8000c20 <HAL_GetTick>
 8001ff4:	0002      	movs	r2, r0
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	2b64      	cmp	r3, #100	@ 0x64
 8001ffc:	d901      	bls.n	8002002 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001ffe:	2303      	movs	r3, #3
 8002000:	e0a6      	b.n	8002150 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002002:	4b56      	ldr	r3, [pc, #344]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	2380      	movs	r3, #128	@ 0x80
 8002008:	005b      	lsls	r3, r3, #1
 800200a:	4013      	ands	r3, r2
 800200c:	d0f0      	beq.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800200e:	4b52      	ldr	r3, [pc, #328]	@ (8002158 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002010:	6a1a      	ldr	r2, [r3, #32]
 8002012:	23c0      	movs	r3, #192	@ 0xc0
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	4013      	ands	r3, r2
 8002018:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d034      	beq.n	800208a <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	685a      	ldr	r2, [r3, #4]
 8002024:	23c0      	movs	r3, #192	@ 0xc0
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	4013      	ands	r3, r2
 800202a:	68fa      	ldr	r2, [r7, #12]
 800202c:	429a      	cmp	r2, r3
 800202e:	d02c      	beq.n	800208a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002030:	4b49      	ldr	r3, [pc, #292]	@ (8002158 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002032:	6a1b      	ldr	r3, [r3, #32]
 8002034:	4a4a      	ldr	r2, [pc, #296]	@ (8002160 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002036:	4013      	ands	r3, r2
 8002038:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800203a:	4b47      	ldr	r3, [pc, #284]	@ (8002158 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800203c:	6a1a      	ldr	r2, [r3, #32]
 800203e:	4b46      	ldr	r3, [pc, #280]	@ (8002158 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002040:	2180      	movs	r1, #128	@ 0x80
 8002042:	0249      	lsls	r1, r1, #9
 8002044:	430a      	orrs	r2, r1
 8002046:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002048:	4b43      	ldr	r3, [pc, #268]	@ (8002158 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800204a:	6a1a      	ldr	r2, [r3, #32]
 800204c:	4b42      	ldr	r3, [pc, #264]	@ (8002158 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800204e:	4945      	ldr	r1, [pc, #276]	@ (8002164 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8002050:	400a      	ands	r2, r1
 8002052:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002054:	4b40      	ldr	r3, [pc, #256]	@ (8002158 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002056:	68fa      	ldr	r2, [r7, #12]
 8002058:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2201      	movs	r2, #1
 800205e:	4013      	ands	r3, r2
 8002060:	d013      	beq.n	800208a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002062:	f7fe fddd 	bl	8000c20 <HAL_GetTick>
 8002066:	0003      	movs	r3, r0
 8002068:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800206a:	e009      	b.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800206c:	f7fe fdd8 	bl	8000c20 <HAL_GetTick>
 8002070:	0002      	movs	r2, r0
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	4a3c      	ldr	r2, [pc, #240]	@ (8002168 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d901      	bls.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 800207c:	2303      	movs	r3, #3
 800207e:	e067      	b.n	8002150 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002080:	4b35      	ldr	r3, [pc, #212]	@ (8002158 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002082:	6a1b      	ldr	r3, [r3, #32]
 8002084:	2202      	movs	r2, #2
 8002086:	4013      	ands	r3, r2
 8002088:	d0f0      	beq.n	800206c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800208a:	4b33      	ldr	r3, [pc, #204]	@ (8002158 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800208c:	6a1b      	ldr	r3, [r3, #32]
 800208e:	4a34      	ldr	r2, [pc, #208]	@ (8002160 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002090:	4013      	ands	r3, r2
 8002092:	0019      	movs	r1, r3
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	685a      	ldr	r2, [r3, #4]
 8002098:	4b2f      	ldr	r3, [pc, #188]	@ (8002158 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800209a:	430a      	orrs	r2, r1
 800209c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800209e:	2317      	movs	r3, #23
 80020a0:	18fb      	adds	r3, r7, r3
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d105      	bne.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020a8:	4b2b      	ldr	r3, [pc, #172]	@ (8002158 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80020aa:	69da      	ldr	r2, [r3, #28]
 80020ac:	4b2a      	ldr	r3, [pc, #168]	@ (8002158 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80020ae:	492f      	ldr	r1, [pc, #188]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 80020b0:	400a      	ands	r2, r1
 80020b2:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	2201      	movs	r2, #1
 80020ba:	4013      	ands	r3, r2
 80020bc:	d009      	beq.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80020be:	4b26      	ldr	r3, [pc, #152]	@ (8002158 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80020c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020c2:	2203      	movs	r2, #3
 80020c4:	4393      	bics	r3, r2
 80020c6:	0019      	movs	r1, r3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	689a      	ldr	r2, [r3, #8]
 80020cc:	4b22      	ldr	r3, [pc, #136]	@ (8002158 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80020ce:	430a      	orrs	r2, r1
 80020d0:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	2202      	movs	r2, #2
 80020d8:	4013      	ands	r3, r2
 80020da:	d009      	beq.n	80020f0 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80020dc:	4b1e      	ldr	r3, [pc, #120]	@ (8002158 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80020de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020e0:	4a23      	ldr	r2, [pc, #140]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80020e2:	4013      	ands	r3, r2
 80020e4:	0019      	movs	r1, r3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	68da      	ldr	r2, [r3, #12]
 80020ea:	4b1b      	ldr	r3, [pc, #108]	@ (8002158 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80020ec:	430a      	orrs	r2, r1
 80020ee:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	2220      	movs	r2, #32
 80020f6:	4013      	ands	r3, r2
 80020f8:	d009      	beq.n	800210e <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80020fa:	4b17      	ldr	r3, [pc, #92]	@ (8002158 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80020fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020fe:	2210      	movs	r2, #16
 8002100:	4393      	bics	r3, r2
 8002102:	0019      	movs	r1, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	691a      	ldr	r2, [r3, #16]
 8002108:	4b13      	ldr	r3, [pc, #76]	@ (8002158 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800210a:	430a      	orrs	r2, r1
 800210c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	2380      	movs	r3, #128	@ 0x80
 8002114:	029b      	lsls	r3, r3, #10
 8002116:	4013      	ands	r3, r2
 8002118:	d009      	beq.n	800212e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800211a:	4b0f      	ldr	r3, [pc, #60]	@ (8002158 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800211c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800211e:	2280      	movs	r2, #128	@ 0x80
 8002120:	4393      	bics	r3, r2
 8002122:	0019      	movs	r1, r3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	699a      	ldr	r2, [r3, #24]
 8002128:	4b0b      	ldr	r3, [pc, #44]	@ (8002158 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800212a:	430a      	orrs	r2, r1
 800212c:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	2380      	movs	r3, #128	@ 0x80
 8002134:	00db      	lsls	r3, r3, #3
 8002136:	4013      	ands	r3, r2
 8002138:	d009      	beq.n	800214e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800213a:	4b07      	ldr	r3, [pc, #28]	@ (8002158 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800213c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800213e:	2240      	movs	r2, #64	@ 0x40
 8002140:	4393      	bics	r3, r2
 8002142:	0019      	movs	r1, r3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	695a      	ldr	r2, [r3, #20]
 8002148:	4b03      	ldr	r3, [pc, #12]	@ (8002158 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800214a:	430a      	orrs	r2, r1
 800214c:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800214e:	2300      	movs	r3, #0
}
 8002150:	0018      	movs	r0, r3
 8002152:	46bd      	mov	sp, r7
 8002154:	b006      	add	sp, #24
 8002156:	bd80      	pop	{r7, pc}
 8002158:	40021000 	.word	0x40021000
 800215c:	40007000 	.word	0x40007000
 8002160:	fffffcff 	.word	0xfffffcff
 8002164:	fffeffff 	.word	0xfffeffff
 8002168:	00001388 	.word	0x00001388
 800216c:	efffffff 	.word	0xefffffff
 8002170:	fffcffff 	.word	0xfffcffff

08002174 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d101      	bne.n	8002186 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e042      	b.n	800220c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	223d      	movs	r2, #61	@ 0x3d
 800218a:	5c9b      	ldrb	r3, [r3, r2]
 800218c:	b2db      	uxtb	r3, r3
 800218e:	2b00      	cmp	r3, #0
 8002190:	d107      	bne.n	80021a2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	223c      	movs	r2, #60	@ 0x3c
 8002196:	2100      	movs	r1, #0
 8002198:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	0018      	movs	r0, r3
 800219e:	f7fe fa93 	bl	80006c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	223d      	movs	r2, #61	@ 0x3d
 80021a6:	2102      	movs	r1, #2
 80021a8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	3304      	adds	r3, #4
 80021b2:	0019      	movs	r1, r3
 80021b4:	0010      	movs	r0, r2
 80021b6:	f000 fb35 	bl	8002824 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2246      	movs	r2, #70	@ 0x46
 80021be:	2101      	movs	r1, #1
 80021c0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	223e      	movs	r2, #62	@ 0x3e
 80021c6:	2101      	movs	r1, #1
 80021c8:	5499      	strb	r1, [r3, r2]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	223f      	movs	r2, #63	@ 0x3f
 80021ce:	2101      	movs	r1, #1
 80021d0:	5499      	strb	r1, [r3, r2]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2240      	movs	r2, #64	@ 0x40
 80021d6:	2101      	movs	r1, #1
 80021d8:	5499      	strb	r1, [r3, r2]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2241      	movs	r2, #65	@ 0x41
 80021de:	2101      	movs	r1, #1
 80021e0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2242      	movs	r2, #66	@ 0x42
 80021e6:	2101      	movs	r1, #1
 80021e8:	5499      	strb	r1, [r3, r2]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2243      	movs	r2, #67	@ 0x43
 80021ee:	2101      	movs	r1, #1
 80021f0:	5499      	strb	r1, [r3, r2]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2244      	movs	r2, #68	@ 0x44
 80021f6:	2101      	movs	r1, #1
 80021f8:	5499      	strb	r1, [r3, r2]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2245      	movs	r2, #69	@ 0x45
 80021fe:	2101      	movs	r1, #1
 8002200:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	223d      	movs	r2, #61	@ 0x3d
 8002206:	2101      	movs	r1, #1
 8002208:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800220a:	2300      	movs	r3, #0
}
 800220c:	0018      	movs	r0, r3
 800220e:	46bd      	mov	sp, r7
 8002210:	b002      	add	sp, #8
 8002212:	bd80      	pop	{r7, pc}

08002214 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d101      	bne.n	8002226 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e042      	b.n	80022ac <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	223d      	movs	r2, #61	@ 0x3d
 800222a:	5c9b      	ldrb	r3, [r3, r2]
 800222c:	b2db      	uxtb	r3, r3
 800222e:	2b00      	cmp	r3, #0
 8002230:	d107      	bne.n	8002242 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	223c      	movs	r2, #60	@ 0x3c
 8002236:	2100      	movs	r1, #0
 8002238:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	0018      	movs	r0, r3
 800223e:	f000 f839 	bl	80022b4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	223d      	movs	r2, #61	@ 0x3d
 8002246:	2102      	movs	r1, #2
 8002248:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	3304      	adds	r3, #4
 8002252:	0019      	movs	r1, r3
 8002254:	0010      	movs	r0, r2
 8002256:	f000 fae5 	bl	8002824 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2246      	movs	r2, #70	@ 0x46
 800225e:	2101      	movs	r1, #1
 8002260:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	223e      	movs	r2, #62	@ 0x3e
 8002266:	2101      	movs	r1, #1
 8002268:	5499      	strb	r1, [r3, r2]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	223f      	movs	r2, #63	@ 0x3f
 800226e:	2101      	movs	r1, #1
 8002270:	5499      	strb	r1, [r3, r2]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2240      	movs	r2, #64	@ 0x40
 8002276:	2101      	movs	r1, #1
 8002278:	5499      	strb	r1, [r3, r2]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2241      	movs	r2, #65	@ 0x41
 800227e:	2101      	movs	r1, #1
 8002280:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2242      	movs	r2, #66	@ 0x42
 8002286:	2101      	movs	r1, #1
 8002288:	5499      	strb	r1, [r3, r2]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2243      	movs	r2, #67	@ 0x43
 800228e:	2101      	movs	r1, #1
 8002290:	5499      	strb	r1, [r3, r2]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2244      	movs	r2, #68	@ 0x44
 8002296:	2101      	movs	r1, #1
 8002298:	5499      	strb	r1, [r3, r2]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2245      	movs	r2, #69	@ 0x45
 800229e:	2101      	movs	r1, #1
 80022a0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	223d      	movs	r2, #61	@ 0x3d
 80022a6:	2101      	movs	r1, #1
 80022a8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80022aa:	2300      	movs	r3, #0
}
 80022ac:	0018      	movs	r0, r3
 80022ae:	46bd      	mov	sp, r7
 80022b0:	b002      	add	sp, #8
 80022b2:	bd80      	pop	{r7, pc}

080022b4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80022bc:	46c0      	nop			@ (mov r8, r8)
 80022be:	46bd      	mov	sp, r7
 80022c0:	b002      	add	sp, #8
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b084      	sub	sp, #16
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	68db      	ldr	r3, [r3, #12]
 80022d2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	691b      	ldr	r3, [r3, #16]
 80022da:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	2202      	movs	r2, #2
 80022e0:	4013      	ands	r3, r2
 80022e2:	d021      	beq.n	8002328 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2202      	movs	r2, #2
 80022e8:	4013      	ands	r3, r2
 80022ea:	d01d      	beq.n	8002328 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	2203      	movs	r2, #3
 80022f2:	4252      	negs	r2, r2
 80022f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2201      	movs	r2, #1
 80022fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	699b      	ldr	r3, [r3, #24]
 8002302:	2203      	movs	r2, #3
 8002304:	4013      	ands	r3, r2
 8002306:	d004      	beq.n	8002312 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	0018      	movs	r0, r3
 800230c:	f000 fa72 	bl	80027f4 <HAL_TIM_IC_CaptureCallback>
 8002310:	e007      	b.n	8002322 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	0018      	movs	r0, r3
 8002316:	f000 fa65 	bl	80027e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	0018      	movs	r0, r3
 800231e:	f000 fa71 	bl	8002804 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2200      	movs	r2, #0
 8002326:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	2204      	movs	r2, #4
 800232c:	4013      	ands	r3, r2
 800232e:	d022      	beq.n	8002376 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2204      	movs	r2, #4
 8002334:	4013      	ands	r3, r2
 8002336:	d01e      	beq.n	8002376 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	2205      	movs	r2, #5
 800233e:	4252      	negs	r2, r2
 8002340:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2202      	movs	r2, #2
 8002346:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	699a      	ldr	r2, [r3, #24]
 800234e:	23c0      	movs	r3, #192	@ 0xc0
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	4013      	ands	r3, r2
 8002354:	d004      	beq.n	8002360 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	0018      	movs	r0, r3
 800235a:	f000 fa4b 	bl	80027f4 <HAL_TIM_IC_CaptureCallback>
 800235e:	e007      	b.n	8002370 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	0018      	movs	r0, r3
 8002364:	f000 fa3e 	bl	80027e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	0018      	movs	r0, r3
 800236c:	f000 fa4a 	bl	8002804 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2200      	movs	r2, #0
 8002374:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	2208      	movs	r2, #8
 800237a:	4013      	ands	r3, r2
 800237c:	d021      	beq.n	80023c2 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2208      	movs	r2, #8
 8002382:	4013      	ands	r3, r2
 8002384:	d01d      	beq.n	80023c2 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	2209      	movs	r2, #9
 800238c:	4252      	negs	r2, r2
 800238e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2204      	movs	r2, #4
 8002394:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	69db      	ldr	r3, [r3, #28]
 800239c:	2203      	movs	r2, #3
 800239e:	4013      	ands	r3, r2
 80023a0:	d004      	beq.n	80023ac <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	0018      	movs	r0, r3
 80023a6:	f000 fa25 	bl	80027f4 <HAL_TIM_IC_CaptureCallback>
 80023aa:	e007      	b.n	80023bc <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	0018      	movs	r0, r3
 80023b0:	f000 fa18 	bl	80027e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	0018      	movs	r0, r3
 80023b8:	f000 fa24 	bl	8002804 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2200      	movs	r2, #0
 80023c0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	2210      	movs	r2, #16
 80023c6:	4013      	ands	r3, r2
 80023c8:	d022      	beq.n	8002410 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	2210      	movs	r2, #16
 80023ce:	4013      	ands	r3, r2
 80023d0:	d01e      	beq.n	8002410 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	2211      	movs	r2, #17
 80023d8:	4252      	negs	r2, r2
 80023da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2208      	movs	r2, #8
 80023e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	69da      	ldr	r2, [r3, #28]
 80023e8:	23c0      	movs	r3, #192	@ 0xc0
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	4013      	ands	r3, r2
 80023ee:	d004      	beq.n	80023fa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	0018      	movs	r0, r3
 80023f4:	f000 f9fe 	bl	80027f4 <HAL_TIM_IC_CaptureCallback>
 80023f8:	e007      	b.n	800240a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	0018      	movs	r0, r3
 80023fe:	f000 f9f1 	bl	80027e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	0018      	movs	r0, r3
 8002406:	f000 f9fd 	bl	8002804 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2200      	movs	r2, #0
 800240e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	2201      	movs	r2, #1
 8002414:	4013      	ands	r3, r2
 8002416:	d00c      	beq.n	8002432 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2201      	movs	r2, #1
 800241c:	4013      	ands	r3, r2
 800241e:	d008      	beq.n	8002432 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	2202      	movs	r2, #2
 8002426:	4252      	negs	r2, r2
 8002428:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	0018      	movs	r0, r3
 800242e:	f000 f9d1 	bl	80027d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	2280      	movs	r2, #128	@ 0x80
 8002436:	4013      	ands	r3, r2
 8002438:	d00c      	beq.n	8002454 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2280      	movs	r2, #128	@ 0x80
 800243e:	4013      	ands	r3, r2
 8002440:	d008      	beq.n	8002454 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	2281      	movs	r2, #129	@ 0x81
 8002448:	4252      	negs	r2, r2
 800244a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	0018      	movs	r0, r3
 8002450:	f000 fd72 	bl	8002f38 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	2240      	movs	r2, #64	@ 0x40
 8002458:	4013      	ands	r3, r2
 800245a:	d00c      	beq.n	8002476 <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2240      	movs	r2, #64	@ 0x40
 8002460:	4013      	ands	r3, r2
 8002462:	d008      	beq.n	8002476 <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	2241      	movs	r2, #65	@ 0x41
 800246a:	4252      	negs	r2, r2
 800246c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	0018      	movs	r0, r3
 8002472:	f000 f9cf 	bl	8002814 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	2220      	movs	r2, #32
 800247a:	4013      	ands	r3, r2
 800247c:	d00c      	beq.n	8002498 <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2220      	movs	r2, #32
 8002482:	4013      	ands	r3, r2
 8002484:	d008      	beq.n	8002498 <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	2221      	movs	r2, #33	@ 0x21
 800248c:	4252      	negs	r2, r2
 800248e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	0018      	movs	r0, r3
 8002494:	f000 fd48 	bl	8002f28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002498:	46c0      	nop			@ (mov r8, r8)
 800249a:	46bd      	mov	sp, r7
 800249c:	b004      	add	sp, #16
 800249e:	bd80      	pop	{r7, pc}

080024a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b086      	sub	sp, #24
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	60f8      	str	r0, [r7, #12]
 80024a8:	60b9      	str	r1, [r7, #8]
 80024aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024ac:	2317      	movs	r3, #23
 80024ae:	18fb      	adds	r3, r7, r3
 80024b0:	2200      	movs	r2, #0
 80024b2:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	223c      	movs	r2, #60	@ 0x3c
 80024b8:	5c9b      	ldrb	r3, [r3, r2]
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d101      	bne.n	80024c2 <HAL_TIM_PWM_ConfigChannel+0x22>
 80024be:	2302      	movs	r3, #2
 80024c0:	e0ad      	b.n	800261e <HAL_TIM_PWM_ConfigChannel+0x17e>
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	223c      	movs	r2, #60	@ 0x3c
 80024c6:	2101      	movs	r1, #1
 80024c8:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2b0c      	cmp	r3, #12
 80024ce:	d100      	bne.n	80024d2 <HAL_TIM_PWM_ConfigChannel+0x32>
 80024d0:	e076      	b.n	80025c0 <HAL_TIM_PWM_ConfigChannel+0x120>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2b0c      	cmp	r3, #12
 80024d6:	d900      	bls.n	80024da <HAL_TIM_PWM_ConfigChannel+0x3a>
 80024d8:	e095      	b.n	8002606 <HAL_TIM_PWM_ConfigChannel+0x166>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2b08      	cmp	r3, #8
 80024de:	d04e      	beq.n	800257e <HAL_TIM_PWM_ConfigChannel+0xde>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2b08      	cmp	r3, #8
 80024e4:	d900      	bls.n	80024e8 <HAL_TIM_PWM_ConfigChannel+0x48>
 80024e6:	e08e      	b.n	8002606 <HAL_TIM_PWM_ConfigChannel+0x166>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d003      	beq.n	80024f6 <HAL_TIM_PWM_ConfigChannel+0x56>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2b04      	cmp	r3, #4
 80024f2:	d021      	beq.n	8002538 <HAL_TIM_PWM_ConfigChannel+0x98>
 80024f4:	e087      	b.n	8002606 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	68ba      	ldr	r2, [r7, #8]
 80024fc:	0011      	movs	r1, r2
 80024fe:	0018      	movs	r0, r3
 8002500:	f000 fa1e 	bl	8002940 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	699a      	ldr	r2, [r3, #24]
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	2108      	movs	r1, #8
 8002510:	430a      	orrs	r2, r1
 8002512:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	699a      	ldr	r2, [r3, #24]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	2104      	movs	r1, #4
 8002520:	438a      	bics	r2, r1
 8002522:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	6999      	ldr	r1, [r3, #24]
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	691a      	ldr	r2, [r3, #16]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	430a      	orrs	r2, r1
 8002534:	619a      	str	r2, [r3, #24]
      break;
 8002536:	e06b      	b.n	8002610 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	68ba      	ldr	r2, [r7, #8]
 800253e:	0011      	movs	r1, r2
 8002540:	0018      	movs	r0, r3
 8002542:	f000 fa85 	bl	8002a50 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	699a      	ldr	r2, [r3, #24]
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	2180      	movs	r1, #128	@ 0x80
 8002552:	0109      	lsls	r1, r1, #4
 8002554:	430a      	orrs	r2, r1
 8002556:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	699a      	ldr	r2, [r3, #24]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4931      	ldr	r1, [pc, #196]	@ (8002628 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002564:	400a      	ands	r2, r1
 8002566:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	6999      	ldr	r1, [r3, #24]
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	691b      	ldr	r3, [r3, #16]
 8002572:	021a      	lsls	r2, r3, #8
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	430a      	orrs	r2, r1
 800257a:	619a      	str	r2, [r3, #24]
      break;
 800257c:	e048      	b.n	8002610 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	68ba      	ldr	r2, [r7, #8]
 8002584:	0011      	movs	r1, r2
 8002586:	0018      	movs	r0, r3
 8002588:	f000 fae6 	bl	8002b58 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	69da      	ldr	r2, [r3, #28]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	2108      	movs	r1, #8
 8002598:	430a      	orrs	r2, r1
 800259a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	69da      	ldr	r2, [r3, #28]
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	2104      	movs	r1, #4
 80025a8:	438a      	bics	r2, r1
 80025aa:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	69d9      	ldr	r1, [r3, #28]
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	691a      	ldr	r2, [r3, #16]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	430a      	orrs	r2, r1
 80025bc:	61da      	str	r2, [r3, #28]
      break;
 80025be:	e027      	b.n	8002610 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	68ba      	ldr	r2, [r7, #8]
 80025c6:	0011      	movs	r1, r2
 80025c8:	0018      	movs	r0, r3
 80025ca:	f000 fb4b 	bl	8002c64 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	69da      	ldr	r2, [r3, #28]
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	2180      	movs	r1, #128	@ 0x80
 80025da:	0109      	lsls	r1, r1, #4
 80025dc:	430a      	orrs	r2, r1
 80025de:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	69da      	ldr	r2, [r3, #28]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	490f      	ldr	r1, [pc, #60]	@ (8002628 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80025ec:	400a      	ands	r2, r1
 80025ee:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	69d9      	ldr	r1, [r3, #28]
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	691b      	ldr	r3, [r3, #16]
 80025fa:	021a      	lsls	r2, r3, #8
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	430a      	orrs	r2, r1
 8002602:	61da      	str	r2, [r3, #28]
      break;
 8002604:	e004      	b.n	8002610 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8002606:	2317      	movs	r3, #23
 8002608:	18fb      	adds	r3, r7, r3
 800260a:	2201      	movs	r2, #1
 800260c:	701a      	strb	r2, [r3, #0]
      break;
 800260e:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	223c      	movs	r2, #60	@ 0x3c
 8002614:	2100      	movs	r1, #0
 8002616:	5499      	strb	r1, [r3, r2]

  return status;
 8002618:	2317      	movs	r3, #23
 800261a:	18fb      	adds	r3, r7, r3
 800261c:	781b      	ldrb	r3, [r3, #0]
}
 800261e:	0018      	movs	r0, r3
 8002620:	46bd      	mov	sp, r7
 8002622:	b006      	add	sp, #24
 8002624:	bd80      	pop	{r7, pc}
 8002626:	46c0      	nop			@ (mov r8, r8)
 8002628:	fffffbff 	.word	0xfffffbff

0800262c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b084      	sub	sp, #16
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
 8002634:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002636:	230f      	movs	r3, #15
 8002638:	18fb      	adds	r3, r7, r3
 800263a:	2200      	movs	r2, #0
 800263c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	223c      	movs	r2, #60	@ 0x3c
 8002642:	5c9b      	ldrb	r3, [r3, r2]
 8002644:	2b01      	cmp	r3, #1
 8002646:	d101      	bne.n	800264c <HAL_TIM_ConfigClockSource+0x20>
 8002648:	2302      	movs	r3, #2
 800264a:	e0bc      	b.n	80027c6 <HAL_TIM_ConfigClockSource+0x19a>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	223c      	movs	r2, #60	@ 0x3c
 8002650:	2101      	movs	r1, #1
 8002652:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	223d      	movs	r2, #61	@ 0x3d
 8002658:	2102      	movs	r1, #2
 800265a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	2277      	movs	r2, #119	@ 0x77
 8002668:	4393      	bics	r3, r2
 800266a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	4a58      	ldr	r2, [pc, #352]	@ (80027d0 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002670:	4013      	ands	r3, r2
 8002672:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	68ba      	ldr	r2, [r7, #8]
 800267a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	2280      	movs	r2, #128	@ 0x80
 8002682:	0192      	lsls	r2, r2, #6
 8002684:	4293      	cmp	r3, r2
 8002686:	d040      	beq.n	800270a <HAL_TIM_ConfigClockSource+0xde>
 8002688:	2280      	movs	r2, #128	@ 0x80
 800268a:	0192      	lsls	r2, r2, #6
 800268c:	4293      	cmp	r3, r2
 800268e:	d900      	bls.n	8002692 <HAL_TIM_ConfigClockSource+0x66>
 8002690:	e088      	b.n	80027a4 <HAL_TIM_ConfigClockSource+0x178>
 8002692:	2280      	movs	r2, #128	@ 0x80
 8002694:	0152      	lsls	r2, r2, #5
 8002696:	4293      	cmp	r3, r2
 8002698:	d100      	bne.n	800269c <HAL_TIM_ConfigClockSource+0x70>
 800269a:	e088      	b.n	80027ae <HAL_TIM_ConfigClockSource+0x182>
 800269c:	2280      	movs	r2, #128	@ 0x80
 800269e:	0152      	lsls	r2, r2, #5
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d900      	bls.n	80026a6 <HAL_TIM_ConfigClockSource+0x7a>
 80026a4:	e07e      	b.n	80027a4 <HAL_TIM_ConfigClockSource+0x178>
 80026a6:	2b70      	cmp	r3, #112	@ 0x70
 80026a8:	d018      	beq.n	80026dc <HAL_TIM_ConfigClockSource+0xb0>
 80026aa:	d900      	bls.n	80026ae <HAL_TIM_ConfigClockSource+0x82>
 80026ac:	e07a      	b.n	80027a4 <HAL_TIM_ConfigClockSource+0x178>
 80026ae:	2b60      	cmp	r3, #96	@ 0x60
 80026b0:	d04f      	beq.n	8002752 <HAL_TIM_ConfigClockSource+0x126>
 80026b2:	d900      	bls.n	80026b6 <HAL_TIM_ConfigClockSource+0x8a>
 80026b4:	e076      	b.n	80027a4 <HAL_TIM_ConfigClockSource+0x178>
 80026b6:	2b50      	cmp	r3, #80	@ 0x50
 80026b8:	d03b      	beq.n	8002732 <HAL_TIM_ConfigClockSource+0x106>
 80026ba:	d900      	bls.n	80026be <HAL_TIM_ConfigClockSource+0x92>
 80026bc:	e072      	b.n	80027a4 <HAL_TIM_ConfigClockSource+0x178>
 80026be:	2b40      	cmp	r3, #64	@ 0x40
 80026c0:	d057      	beq.n	8002772 <HAL_TIM_ConfigClockSource+0x146>
 80026c2:	d900      	bls.n	80026c6 <HAL_TIM_ConfigClockSource+0x9a>
 80026c4:	e06e      	b.n	80027a4 <HAL_TIM_ConfigClockSource+0x178>
 80026c6:	2b30      	cmp	r3, #48	@ 0x30
 80026c8:	d063      	beq.n	8002792 <HAL_TIM_ConfigClockSource+0x166>
 80026ca:	d86b      	bhi.n	80027a4 <HAL_TIM_ConfigClockSource+0x178>
 80026cc:	2b20      	cmp	r3, #32
 80026ce:	d060      	beq.n	8002792 <HAL_TIM_ConfigClockSource+0x166>
 80026d0:	d868      	bhi.n	80027a4 <HAL_TIM_ConfigClockSource+0x178>
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d05d      	beq.n	8002792 <HAL_TIM_ConfigClockSource+0x166>
 80026d6:	2b10      	cmp	r3, #16
 80026d8:	d05b      	beq.n	8002792 <HAL_TIM_ConfigClockSource+0x166>
 80026da:	e063      	b.n	80027a4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80026ec:	f000 fb9e 	bl	8002e2c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	2277      	movs	r2, #119	@ 0x77
 80026fc:	4313      	orrs	r3, r2
 80026fe:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	68ba      	ldr	r2, [r7, #8]
 8002706:	609a      	str	r2, [r3, #8]
      break;
 8002708:	e052      	b.n	80027b0 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800271a:	f000 fb87 	bl	8002e2c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	689a      	ldr	r2, [r3, #8]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	2180      	movs	r1, #128	@ 0x80
 800272a:	01c9      	lsls	r1, r1, #7
 800272c:	430a      	orrs	r2, r1
 800272e:	609a      	str	r2, [r3, #8]
      break;
 8002730:	e03e      	b.n	80027b0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800273e:	001a      	movs	r2, r3
 8002740:	f000 fafa 	bl	8002d38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	2150      	movs	r1, #80	@ 0x50
 800274a:	0018      	movs	r0, r3
 800274c:	f000 fb54 	bl	8002df8 <TIM_ITRx_SetConfig>
      break;
 8002750:	e02e      	b.n	80027b0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800275e:	001a      	movs	r2, r3
 8002760:	f000 fb18 	bl	8002d94 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	2160      	movs	r1, #96	@ 0x60
 800276a:	0018      	movs	r0, r3
 800276c:	f000 fb44 	bl	8002df8 <TIM_ITRx_SetConfig>
      break;
 8002770:	e01e      	b.n	80027b0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800277e:	001a      	movs	r2, r3
 8002780:	f000 fada 	bl	8002d38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	2140      	movs	r1, #64	@ 0x40
 800278a:	0018      	movs	r0, r3
 800278c:	f000 fb34 	bl	8002df8 <TIM_ITRx_SetConfig>
      break;
 8002790:	e00e      	b.n	80027b0 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	0019      	movs	r1, r3
 800279c:	0010      	movs	r0, r2
 800279e:	f000 fb2b 	bl	8002df8 <TIM_ITRx_SetConfig>
      break;
 80027a2:	e005      	b.n	80027b0 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80027a4:	230f      	movs	r3, #15
 80027a6:	18fb      	adds	r3, r7, r3
 80027a8:	2201      	movs	r2, #1
 80027aa:	701a      	strb	r2, [r3, #0]
      break;
 80027ac:	e000      	b.n	80027b0 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80027ae:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	223d      	movs	r2, #61	@ 0x3d
 80027b4:	2101      	movs	r1, #1
 80027b6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	223c      	movs	r2, #60	@ 0x3c
 80027bc:	2100      	movs	r1, #0
 80027be:	5499      	strb	r1, [r3, r2]

  return status;
 80027c0:	230f      	movs	r3, #15
 80027c2:	18fb      	adds	r3, r7, r3
 80027c4:	781b      	ldrb	r3, [r3, #0]
}
 80027c6:	0018      	movs	r0, r3
 80027c8:	46bd      	mov	sp, r7
 80027ca:	b004      	add	sp, #16
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	46c0      	nop			@ (mov r8, r8)
 80027d0:	ffff00ff 	.word	0xffff00ff

080027d4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80027dc:	46c0      	nop			@ (mov r8, r8)
 80027de:	46bd      	mov	sp, r7
 80027e0:	b002      	add	sp, #8
 80027e2:	bd80      	pop	{r7, pc}

080027e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80027ec:	46c0      	nop			@ (mov r8, r8)
 80027ee:	46bd      	mov	sp, r7
 80027f0:	b002      	add	sp, #8
 80027f2:	bd80      	pop	{r7, pc}

080027f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b082      	sub	sp, #8
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80027fc:	46c0      	nop			@ (mov r8, r8)
 80027fe:	46bd      	mov	sp, r7
 8002800:	b002      	add	sp, #8
 8002802:	bd80      	pop	{r7, pc}

08002804 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b082      	sub	sp, #8
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800280c:	46c0      	nop			@ (mov r8, r8)
 800280e:	46bd      	mov	sp, r7
 8002810:	b002      	add	sp, #8
 8002812:	bd80      	pop	{r7, pc}

08002814 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b082      	sub	sp, #8
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800281c:	46c0      	nop			@ (mov r8, r8)
 800281e:	46bd      	mov	sp, r7
 8002820:	b002      	add	sp, #8
 8002822:	bd80      	pop	{r7, pc}

08002824 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b084      	sub	sp, #16
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	4a3b      	ldr	r2, [pc, #236]	@ (8002924 <TIM_Base_SetConfig+0x100>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d008      	beq.n	800284e <TIM_Base_SetConfig+0x2a>
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	2380      	movs	r3, #128	@ 0x80
 8002840:	05db      	lsls	r3, r3, #23
 8002842:	429a      	cmp	r2, r3
 8002844:	d003      	beq.n	800284e <TIM_Base_SetConfig+0x2a>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4a37      	ldr	r2, [pc, #220]	@ (8002928 <TIM_Base_SetConfig+0x104>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d108      	bne.n	8002860 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2270      	movs	r2, #112	@ 0x70
 8002852:	4393      	bics	r3, r2
 8002854:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	68fa      	ldr	r2, [r7, #12]
 800285c:	4313      	orrs	r3, r2
 800285e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	4a30      	ldr	r2, [pc, #192]	@ (8002924 <TIM_Base_SetConfig+0x100>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d018      	beq.n	800289a <TIM_Base_SetConfig+0x76>
 8002868:	687a      	ldr	r2, [r7, #4]
 800286a:	2380      	movs	r3, #128	@ 0x80
 800286c:	05db      	lsls	r3, r3, #23
 800286e:	429a      	cmp	r2, r3
 8002870:	d013      	beq.n	800289a <TIM_Base_SetConfig+0x76>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	4a2c      	ldr	r2, [pc, #176]	@ (8002928 <TIM_Base_SetConfig+0x104>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d00f      	beq.n	800289a <TIM_Base_SetConfig+0x76>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4a2b      	ldr	r2, [pc, #172]	@ (800292c <TIM_Base_SetConfig+0x108>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d00b      	beq.n	800289a <TIM_Base_SetConfig+0x76>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4a2a      	ldr	r2, [pc, #168]	@ (8002930 <TIM_Base_SetConfig+0x10c>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d007      	beq.n	800289a <TIM_Base_SetConfig+0x76>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4a29      	ldr	r2, [pc, #164]	@ (8002934 <TIM_Base_SetConfig+0x110>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d003      	beq.n	800289a <TIM_Base_SetConfig+0x76>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4a28      	ldr	r2, [pc, #160]	@ (8002938 <TIM_Base_SetConfig+0x114>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d108      	bne.n	80028ac <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	4a27      	ldr	r2, [pc, #156]	@ (800293c <TIM_Base_SetConfig+0x118>)
 800289e:	4013      	ands	r3, r2
 80028a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	68db      	ldr	r3, [r3, #12]
 80028a6:	68fa      	ldr	r2, [r7, #12]
 80028a8:	4313      	orrs	r3, r2
 80028aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2280      	movs	r2, #128	@ 0x80
 80028b0:	4393      	bics	r3, r2
 80028b2:	001a      	movs	r2, r3
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	695b      	ldr	r3, [r3, #20]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	68fa      	ldr	r2, [r7, #12]
 80028c0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	689a      	ldr	r2, [r3, #8]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	4a13      	ldr	r2, [pc, #76]	@ (8002924 <TIM_Base_SetConfig+0x100>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d00b      	beq.n	80028f2 <TIM_Base_SetConfig+0xce>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	4a14      	ldr	r2, [pc, #80]	@ (8002930 <TIM_Base_SetConfig+0x10c>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d007      	beq.n	80028f2 <TIM_Base_SetConfig+0xce>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4a13      	ldr	r2, [pc, #76]	@ (8002934 <TIM_Base_SetConfig+0x110>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d003      	beq.n	80028f2 <TIM_Base_SetConfig+0xce>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	4a12      	ldr	r2, [pc, #72]	@ (8002938 <TIM_Base_SetConfig+0x114>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d103      	bne.n	80028fa <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	691a      	ldr	r2, [r3, #16]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2201      	movs	r2, #1
 80028fe:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	691b      	ldr	r3, [r3, #16]
 8002904:	2201      	movs	r2, #1
 8002906:	4013      	ands	r3, r2
 8002908:	2b01      	cmp	r3, #1
 800290a:	d106      	bne.n	800291a <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	691b      	ldr	r3, [r3, #16]
 8002910:	2201      	movs	r2, #1
 8002912:	4393      	bics	r3, r2
 8002914:	001a      	movs	r2, r3
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	611a      	str	r2, [r3, #16]
  }
}
 800291a:	46c0      	nop			@ (mov r8, r8)
 800291c:	46bd      	mov	sp, r7
 800291e:	b004      	add	sp, #16
 8002920:	bd80      	pop	{r7, pc}
 8002922:	46c0      	nop			@ (mov r8, r8)
 8002924:	40012c00 	.word	0x40012c00
 8002928:	40000400 	.word	0x40000400
 800292c:	40002000 	.word	0x40002000
 8002930:	40014000 	.word	0x40014000
 8002934:	40014400 	.word	0x40014400
 8002938:	40014800 	.word	0x40014800
 800293c:	fffffcff 	.word	0xfffffcff

08002940 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b086      	sub	sp, #24
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6a1b      	ldr	r3, [r3, #32]
 800294e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6a1b      	ldr	r3, [r3, #32]
 8002954:	2201      	movs	r2, #1
 8002956:	4393      	bics	r3, r2
 8002958:	001a      	movs	r2, r3
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	699b      	ldr	r3, [r3, #24]
 8002968:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2270      	movs	r2, #112	@ 0x70
 800296e:	4393      	bics	r3, r2
 8002970:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2203      	movs	r2, #3
 8002976:	4393      	bics	r3, r2
 8002978:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	68fa      	ldr	r2, [r7, #12]
 8002980:	4313      	orrs	r3, r2
 8002982:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	2202      	movs	r2, #2
 8002988:	4393      	bics	r3, r2
 800298a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	697a      	ldr	r2, [r7, #20]
 8002992:	4313      	orrs	r3, r2
 8002994:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4a27      	ldr	r2, [pc, #156]	@ (8002a38 <TIM_OC1_SetConfig+0xf8>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d00b      	beq.n	80029b6 <TIM_OC1_SetConfig+0x76>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4a26      	ldr	r2, [pc, #152]	@ (8002a3c <TIM_OC1_SetConfig+0xfc>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d007      	beq.n	80029b6 <TIM_OC1_SetConfig+0x76>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4a25      	ldr	r2, [pc, #148]	@ (8002a40 <TIM_OC1_SetConfig+0x100>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d003      	beq.n	80029b6 <TIM_OC1_SetConfig+0x76>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4a24      	ldr	r2, [pc, #144]	@ (8002a44 <TIM_OC1_SetConfig+0x104>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d10c      	bne.n	80029d0 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	2208      	movs	r2, #8
 80029ba:	4393      	bics	r3, r2
 80029bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	697a      	ldr	r2, [r7, #20]
 80029c4:	4313      	orrs	r3, r2
 80029c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	2204      	movs	r2, #4
 80029cc:	4393      	bics	r3, r2
 80029ce:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	4a19      	ldr	r2, [pc, #100]	@ (8002a38 <TIM_OC1_SetConfig+0xf8>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d00b      	beq.n	80029f0 <TIM_OC1_SetConfig+0xb0>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	4a18      	ldr	r2, [pc, #96]	@ (8002a3c <TIM_OC1_SetConfig+0xfc>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d007      	beq.n	80029f0 <TIM_OC1_SetConfig+0xb0>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	4a17      	ldr	r2, [pc, #92]	@ (8002a40 <TIM_OC1_SetConfig+0x100>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d003      	beq.n	80029f0 <TIM_OC1_SetConfig+0xb0>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	4a16      	ldr	r2, [pc, #88]	@ (8002a44 <TIM_OC1_SetConfig+0x104>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d111      	bne.n	8002a14 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	4a15      	ldr	r2, [pc, #84]	@ (8002a48 <TIM_OC1_SetConfig+0x108>)
 80029f4:	4013      	ands	r3, r2
 80029f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	4a14      	ldr	r2, [pc, #80]	@ (8002a4c <TIM_OC1_SetConfig+0x10c>)
 80029fc:	4013      	ands	r3, r2
 80029fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	695b      	ldr	r3, [r3, #20]
 8002a04:	693a      	ldr	r2, [r7, #16]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	699b      	ldr	r3, [r3, #24]
 8002a0e:	693a      	ldr	r2, [r7, #16]
 8002a10:	4313      	orrs	r3, r2
 8002a12:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	693a      	ldr	r2, [r7, #16]
 8002a18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	68fa      	ldr	r2, [r7, #12]
 8002a1e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	685a      	ldr	r2, [r3, #4]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	697a      	ldr	r2, [r7, #20]
 8002a2c:	621a      	str	r2, [r3, #32]
}
 8002a2e:	46c0      	nop			@ (mov r8, r8)
 8002a30:	46bd      	mov	sp, r7
 8002a32:	b006      	add	sp, #24
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	46c0      	nop			@ (mov r8, r8)
 8002a38:	40012c00 	.word	0x40012c00
 8002a3c:	40014000 	.word	0x40014000
 8002a40:	40014400 	.word	0x40014400
 8002a44:	40014800 	.word	0x40014800
 8002a48:	fffffeff 	.word	0xfffffeff
 8002a4c:	fffffdff 	.word	0xfffffdff

08002a50 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b086      	sub	sp, #24
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6a1b      	ldr	r3, [r3, #32]
 8002a5e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6a1b      	ldr	r3, [r3, #32]
 8002a64:	2210      	movs	r2, #16
 8002a66:	4393      	bics	r3, r2
 8002a68:	001a      	movs	r2, r3
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	699b      	ldr	r3, [r3, #24]
 8002a78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	4a2e      	ldr	r2, [pc, #184]	@ (8002b38 <TIM_OC2_SetConfig+0xe8>)
 8002a7e:	4013      	ands	r3, r2
 8002a80:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	4a2d      	ldr	r2, [pc, #180]	@ (8002b3c <TIM_OC2_SetConfig+0xec>)
 8002a86:	4013      	ands	r3, r2
 8002a88:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	021b      	lsls	r3, r3, #8
 8002a90:	68fa      	ldr	r2, [r7, #12]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	2220      	movs	r2, #32
 8002a9a:	4393      	bics	r3, r2
 8002a9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	011b      	lsls	r3, r3, #4
 8002aa4:	697a      	ldr	r2, [r7, #20]
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	4a24      	ldr	r2, [pc, #144]	@ (8002b40 <TIM_OC2_SetConfig+0xf0>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d10d      	bne.n	8002ace <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	2280      	movs	r2, #128	@ 0x80
 8002ab6:	4393      	bics	r3, r2
 8002ab8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	68db      	ldr	r3, [r3, #12]
 8002abe:	011b      	lsls	r3, r3, #4
 8002ac0:	697a      	ldr	r2, [r7, #20]
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	2240      	movs	r2, #64	@ 0x40
 8002aca:	4393      	bics	r3, r2
 8002acc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4a1b      	ldr	r2, [pc, #108]	@ (8002b40 <TIM_OC2_SetConfig+0xf0>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d00b      	beq.n	8002aee <TIM_OC2_SetConfig+0x9e>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4a1a      	ldr	r2, [pc, #104]	@ (8002b44 <TIM_OC2_SetConfig+0xf4>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d007      	beq.n	8002aee <TIM_OC2_SetConfig+0x9e>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4a19      	ldr	r2, [pc, #100]	@ (8002b48 <TIM_OC2_SetConfig+0xf8>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d003      	beq.n	8002aee <TIM_OC2_SetConfig+0x9e>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4a18      	ldr	r2, [pc, #96]	@ (8002b4c <TIM_OC2_SetConfig+0xfc>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d113      	bne.n	8002b16 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	4a17      	ldr	r2, [pc, #92]	@ (8002b50 <TIM_OC2_SetConfig+0x100>)
 8002af2:	4013      	ands	r3, r2
 8002af4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	4a16      	ldr	r2, [pc, #88]	@ (8002b54 <TIM_OC2_SetConfig+0x104>)
 8002afa:	4013      	ands	r3, r2
 8002afc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	695b      	ldr	r3, [r3, #20]
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	693a      	ldr	r2, [r7, #16]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	699b      	ldr	r3, [r3, #24]
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	693a      	ldr	r2, [r7, #16]
 8002b12:	4313      	orrs	r3, r2
 8002b14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	693a      	ldr	r2, [r7, #16]
 8002b1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	68fa      	ldr	r2, [r7, #12]
 8002b20:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	685a      	ldr	r2, [r3, #4]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	697a      	ldr	r2, [r7, #20]
 8002b2e:	621a      	str	r2, [r3, #32]
}
 8002b30:	46c0      	nop			@ (mov r8, r8)
 8002b32:	46bd      	mov	sp, r7
 8002b34:	b006      	add	sp, #24
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	ffff8fff 	.word	0xffff8fff
 8002b3c:	fffffcff 	.word	0xfffffcff
 8002b40:	40012c00 	.word	0x40012c00
 8002b44:	40014000 	.word	0x40014000
 8002b48:	40014400 	.word	0x40014400
 8002b4c:	40014800 	.word	0x40014800
 8002b50:	fffffbff 	.word	0xfffffbff
 8002b54:	fffff7ff 	.word	0xfffff7ff

08002b58 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b086      	sub	sp, #24
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6a1b      	ldr	r3, [r3, #32]
 8002b66:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6a1b      	ldr	r3, [r3, #32]
 8002b6c:	4a33      	ldr	r2, [pc, #204]	@ (8002c3c <TIM_OC3_SetConfig+0xe4>)
 8002b6e:	401a      	ands	r2, r3
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	69db      	ldr	r3, [r3, #28]
 8002b7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2270      	movs	r2, #112	@ 0x70
 8002b84:	4393      	bics	r3, r2
 8002b86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2203      	movs	r2, #3
 8002b8c:	4393      	bics	r3, r2
 8002b8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	68fa      	ldr	r2, [r7, #12]
 8002b96:	4313      	orrs	r3, r2
 8002b98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	4a28      	ldr	r2, [pc, #160]	@ (8002c40 <TIM_OC3_SetConfig+0xe8>)
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	021b      	lsls	r3, r3, #8
 8002ba8:	697a      	ldr	r2, [r7, #20]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4a24      	ldr	r2, [pc, #144]	@ (8002c44 <TIM_OC3_SetConfig+0xec>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d10d      	bne.n	8002bd2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	4a23      	ldr	r2, [pc, #140]	@ (8002c48 <TIM_OC3_SetConfig+0xf0>)
 8002bba:	4013      	ands	r3, r2
 8002bbc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	68db      	ldr	r3, [r3, #12]
 8002bc2:	021b      	lsls	r3, r3, #8
 8002bc4:	697a      	ldr	r2, [r7, #20]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	4a1f      	ldr	r2, [pc, #124]	@ (8002c4c <TIM_OC3_SetConfig+0xf4>)
 8002bce:	4013      	ands	r3, r2
 8002bd0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4a1b      	ldr	r2, [pc, #108]	@ (8002c44 <TIM_OC3_SetConfig+0xec>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d00b      	beq.n	8002bf2 <TIM_OC3_SetConfig+0x9a>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4a1c      	ldr	r2, [pc, #112]	@ (8002c50 <TIM_OC3_SetConfig+0xf8>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d007      	beq.n	8002bf2 <TIM_OC3_SetConfig+0x9a>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4a1b      	ldr	r2, [pc, #108]	@ (8002c54 <TIM_OC3_SetConfig+0xfc>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d003      	beq.n	8002bf2 <TIM_OC3_SetConfig+0x9a>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4a1a      	ldr	r2, [pc, #104]	@ (8002c58 <TIM_OC3_SetConfig+0x100>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d113      	bne.n	8002c1a <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	4a19      	ldr	r2, [pc, #100]	@ (8002c5c <TIM_OC3_SetConfig+0x104>)
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	4a18      	ldr	r2, [pc, #96]	@ (8002c60 <TIM_OC3_SetConfig+0x108>)
 8002bfe:	4013      	ands	r3, r2
 8002c00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	695b      	ldr	r3, [r3, #20]
 8002c06:	011b      	lsls	r3, r3, #4
 8002c08:	693a      	ldr	r2, [r7, #16]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	699b      	ldr	r3, [r3, #24]
 8002c12:	011b      	lsls	r3, r3, #4
 8002c14:	693a      	ldr	r2, [r7, #16]
 8002c16:	4313      	orrs	r3, r2
 8002c18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	693a      	ldr	r2, [r7, #16]
 8002c1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	68fa      	ldr	r2, [r7, #12]
 8002c24:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	685a      	ldr	r2, [r3, #4]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	697a      	ldr	r2, [r7, #20]
 8002c32:	621a      	str	r2, [r3, #32]
}
 8002c34:	46c0      	nop			@ (mov r8, r8)
 8002c36:	46bd      	mov	sp, r7
 8002c38:	b006      	add	sp, #24
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	fffffeff 	.word	0xfffffeff
 8002c40:	fffffdff 	.word	0xfffffdff
 8002c44:	40012c00 	.word	0x40012c00
 8002c48:	fffff7ff 	.word	0xfffff7ff
 8002c4c:	fffffbff 	.word	0xfffffbff
 8002c50:	40014000 	.word	0x40014000
 8002c54:	40014400 	.word	0x40014400
 8002c58:	40014800 	.word	0x40014800
 8002c5c:	ffffefff 	.word	0xffffefff
 8002c60:	ffffdfff 	.word	0xffffdfff

08002c64 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b086      	sub	sp, #24
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6a1b      	ldr	r3, [r3, #32]
 8002c72:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6a1b      	ldr	r3, [r3, #32]
 8002c78:	4a26      	ldr	r2, [pc, #152]	@ (8002d14 <TIM_OC4_SetConfig+0xb0>)
 8002c7a:	401a      	ands	r2, r3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	69db      	ldr	r3, [r3, #28]
 8002c8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	4a22      	ldr	r2, [pc, #136]	@ (8002d18 <TIM_OC4_SetConfig+0xb4>)
 8002c90:	4013      	ands	r3, r2
 8002c92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	4a21      	ldr	r2, [pc, #132]	@ (8002d1c <TIM_OC4_SetConfig+0xb8>)
 8002c98:	4013      	ands	r3, r2
 8002c9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	021b      	lsls	r3, r3, #8
 8002ca2:	68fa      	ldr	r2, [r7, #12]
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	4a1d      	ldr	r2, [pc, #116]	@ (8002d20 <TIM_OC4_SetConfig+0xbc>)
 8002cac:	4013      	ands	r3, r2
 8002cae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	031b      	lsls	r3, r3, #12
 8002cb6:	693a      	ldr	r2, [r7, #16]
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	4a19      	ldr	r2, [pc, #100]	@ (8002d24 <TIM_OC4_SetConfig+0xc0>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d00b      	beq.n	8002cdc <TIM_OC4_SetConfig+0x78>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	4a18      	ldr	r2, [pc, #96]	@ (8002d28 <TIM_OC4_SetConfig+0xc4>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d007      	beq.n	8002cdc <TIM_OC4_SetConfig+0x78>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	4a17      	ldr	r2, [pc, #92]	@ (8002d2c <TIM_OC4_SetConfig+0xc8>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d003      	beq.n	8002cdc <TIM_OC4_SetConfig+0x78>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	4a16      	ldr	r2, [pc, #88]	@ (8002d30 <TIM_OC4_SetConfig+0xcc>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d109      	bne.n	8002cf0 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	4a15      	ldr	r2, [pc, #84]	@ (8002d34 <TIM_OC4_SetConfig+0xd0>)
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	695b      	ldr	r3, [r3, #20]
 8002ce8:	019b      	lsls	r3, r3, #6
 8002cea:	697a      	ldr	r2, [r7, #20]
 8002cec:	4313      	orrs	r3, r2
 8002cee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	697a      	ldr	r2, [r7, #20]
 8002cf4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	68fa      	ldr	r2, [r7, #12]
 8002cfa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	685a      	ldr	r2, [r3, #4]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	693a      	ldr	r2, [r7, #16]
 8002d08:	621a      	str	r2, [r3, #32]
}
 8002d0a:	46c0      	nop			@ (mov r8, r8)
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	b006      	add	sp, #24
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	46c0      	nop			@ (mov r8, r8)
 8002d14:	ffffefff 	.word	0xffffefff
 8002d18:	ffff8fff 	.word	0xffff8fff
 8002d1c:	fffffcff 	.word	0xfffffcff
 8002d20:	ffffdfff 	.word	0xffffdfff
 8002d24:	40012c00 	.word	0x40012c00
 8002d28:	40014000 	.word	0x40014000
 8002d2c:	40014400 	.word	0x40014400
 8002d30:	40014800 	.word	0x40014800
 8002d34:	ffffbfff 	.word	0xffffbfff

08002d38 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b086      	sub	sp, #24
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	60f8      	str	r0, [r7, #12]
 8002d40:	60b9      	str	r1, [r7, #8]
 8002d42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	6a1b      	ldr	r3, [r3, #32]
 8002d48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	6a1b      	ldr	r3, [r3, #32]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	4393      	bics	r3, r2
 8002d52:	001a      	movs	r2, r3
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	699b      	ldr	r3, [r3, #24]
 8002d5c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	22f0      	movs	r2, #240	@ 0xf0
 8002d62:	4393      	bics	r3, r2
 8002d64:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	011b      	lsls	r3, r3, #4
 8002d6a:	693a      	ldr	r2, [r7, #16]
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	220a      	movs	r2, #10
 8002d74:	4393      	bics	r3, r2
 8002d76:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d78:	697a      	ldr	r2, [r7, #20]
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	693a      	ldr	r2, [r7, #16]
 8002d84:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	697a      	ldr	r2, [r7, #20]
 8002d8a:	621a      	str	r2, [r3, #32]
}
 8002d8c:	46c0      	nop			@ (mov r8, r8)
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	b006      	add	sp, #24
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b086      	sub	sp, #24
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	60f8      	str	r0, [r7, #12]
 8002d9c:	60b9      	str	r1, [r7, #8]
 8002d9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	6a1b      	ldr	r3, [r3, #32]
 8002da4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	6a1b      	ldr	r3, [r3, #32]
 8002daa:	2210      	movs	r2, #16
 8002dac:	4393      	bics	r3, r2
 8002dae:	001a      	movs	r2, r3
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	699b      	ldr	r3, [r3, #24]
 8002db8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	4a0d      	ldr	r2, [pc, #52]	@ (8002df4 <TIM_TI2_ConfigInputStage+0x60>)
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	031b      	lsls	r3, r3, #12
 8002dc6:	693a      	ldr	r2, [r7, #16]
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	22a0      	movs	r2, #160	@ 0xa0
 8002dd0:	4393      	bics	r3, r2
 8002dd2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	011b      	lsls	r3, r3, #4
 8002dd8:	697a      	ldr	r2, [r7, #20]
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	693a      	ldr	r2, [r7, #16]
 8002de2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	697a      	ldr	r2, [r7, #20]
 8002de8:	621a      	str	r2, [r3, #32]
}
 8002dea:	46c0      	nop			@ (mov r8, r8)
 8002dec:	46bd      	mov	sp, r7
 8002dee:	b006      	add	sp, #24
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	46c0      	nop			@ (mov r8, r8)
 8002df4:	ffff0fff 	.word	0xffff0fff

08002df8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b084      	sub	sp, #16
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2270      	movs	r2, #112	@ 0x70
 8002e0c:	4393      	bics	r3, r2
 8002e0e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e10:	683a      	ldr	r2, [r7, #0]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	4313      	orrs	r3, r2
 8002e16:	2207      	movs	r2, #7
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	68fa      	ldr	r2, [r7, #12]
 8002e20:	609a      	str	r2, [r3, #8]
}
 8002e22:	46c0      	nop			@ (mov r8, r8)
 8002e24:	46bd      	mov	sp, r7
 8002e26:	b004      	add	sp, #16
 8002e28:	bd80      	pop	{r7, pc}
	...

08002e2c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b086      	sub	sp, #24
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	60f8      	str	r0, [r7, #12]
 8002e34:	60b9      	str	r1, [r7, #8]
 8002e36:	607a      	str	r2, [r7, #4]
 8002e38:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	4a09      	ldr	r2, [pc, #36]	@ (8002e68 <TIM_ETR_SetConfig+0x3c>)
 8002e44:	4013      	ands	r3, r2
 8002e46:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	021a      	lsls	r2, r3, #8
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	431a      	orrs	r2, r3
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	4313      	orrs	r3, r2
 8002e54:	697a      	ldr	r2, [r7, #20]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	697a      	ldr	r2, [r7, #20]
 8002e5e:	609a      	str	r2, [r3, #8]
}
 8002e60:	46c0      	nop			@ (mov r8, r8)
 8002e62:	46bd      	mov	sp, r7
 8002e64:	b006      	add	sp, #24
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	ffff00ff 	.word	0xffff00ff

08002e6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b084      	sub	sp, #16
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	223c      	movs	r2, #60	@ 0x3c
 8002e7a:	5c9b      	ldrb	r3, [r3, r2]
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d101      	bne.n	8002e84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e80:	2302      	movs	r3, #2
 8002e82:	e047      	b.n	8002f14 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	223c      	movs	r2, #60	@ 0x3c
 8002e88:	2101      	movs	r1, #1
 8002e8a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	223d      	movs	r2, #61	@ 0x3d
 8002e90:	2102      	movs	r1, #2
 8002e92:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2270      	movs	r2, #112	@ 0x70
 8002ea8:	4393      	bics	r3, r2
 8002eaa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	68fa      	ldr	r2, [r7, #12]
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	68fa      	ldr	r2, [r7, #12]
 8002ebc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a16      	ldr	r2, [pc, #88]	@ (8002f1c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d00f      	beq.n	8002ee8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	2380      	movs	r3, #128	@ 0x80
 8002ece:	05db      	lsls	r3, r3, #23
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d009      	beq.n	8002ee8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a11      	ldr	r2, [pc, #68]	@ (8002f20 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d004      	beq.n	8002ee8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a10      	ldr	r2, [pc, #64]	@ (8002f24 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d10c      	bne.n	8002f02 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	2280      	movs	r2, #128	@ 0x80
 8002eec:	4393      	bics	r3, r2
 8002eee:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	68ba      	ldr	r2, [r7, #8]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	68ba      	ldr	r2, [r7, #8]
 8002f00:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	223d      	movs	r2, #61	@ 0x3d
 8002f06:	2101      	movs	r1, #1
 8002f08:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	223c      	movs	r2, #60	@ 0x3c
 8002f0e:	2100      	movs	r1, #0
 8002f10:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f12:	2300      	movs	r3, #0
}
 8002f14:	0018      	movs	r0, r3
 8002f16:	46bd      	mov	sp, r7
 8002f18:	b004      	add	sp, #16
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	40012c00 	.word	0x40012c00
 8002f20:	40000400 	.word	0x40000400
 8002f24:	40014000 	.word	0x40014000

08002f28 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f30:	46c0      	nop			@ (mov r8, r8)
 8002f32:	46bd      	mov	sp, r7
 8002f34:	b002      	add	sp, #8
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f40:	46c0      	nop			@ (mov r8, r8)
 8002f42:	46bd      	mov	sp, r7
 8002f44:	b002      	add	sp, #8
 8002f46:	bd80      	pop	{r7, pc}

08002f48 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b082      	sub	sp, #8
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d101      	bne.n	8002f5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e044      	b.n	8002fe4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d107      	bne.n	8002f72 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2278      	movs	r2, #120	@ 0x78
 8002f66:	2100      	movs	r1, #0
 8002f68:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	0018      	movs	r0, r3
 8002f6e:	f7fd fca7 	bl	80008c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2224      	movs	r2, #36	@ 0x24
 8002f76:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	2101      	movs	r1, #1
 8002f84:	438a      	bics	r2, r1
 8002f86:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d003      	beq.n	8002f98 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	0018      	movs	r0, r3
 8002f94:	f000 fd00 	bl	8003998 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	0018      	movs	r0, r3
 8002f9c:	f000 fb74 	bl	8003688 <UART_SetConfig>
 8002fa0:	0003      	movs	r3, r0
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d101      	bne.n	8002faa <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e01c      	b.n	8002fe4 <HAL_UART_Init+0x9c>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	685a      	ldr	r2, [r3, #4]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	490d      	ldr	r1, [pc, #52]	@ (8002fec <HAL_UART_Init+0xa4>)
 8002fb6:	400a      	ands	r2, r1
 8002fb8:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	689a      	ldr	r2, [r3, #8]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	212a      	movs	r1, #42	@ 0x2a
 8002fc6:	438a      	bics	r2, r1
 8002fc8:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2101      	movs	r1, #1
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	0018      	movs	r0, r3
 8002fde:	f000 fd8f 	bl	8003b00 <UART_CheckIdleState>
 8002fe2:	0003      	movs	r3, r0
}
 8002fe4:	0018      	movs	r0, r3
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	b002      	add	sp, #8
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	ffffb7ff 	.word	0xffffb7ff

08002ff0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b088      	sub	sp, #32
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	60f8      	str	r0, [r7, #12]
 8002ff8:	60b9      	str	r1, [r7, #8]
 8002ffa:	1dbb      	adds	r3, r7, #6
 8002ffc:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2280      	movs	r2, #128	@ 0x80
 8003002:	589b      	ldr	r3, [r3, r2]
 8003004:	2b20      	cmp	r3, #32
 8003006:	d145      	bne.n	8003094 <HAL_UART_Receive_DMA+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d003      	beq.n	8003016 <HAL_UART_Receive_DMA+0x26>
 800300e:	1dbb      	adds	r3, r7, #6
 8003010:	881b      	ldrh	r3, [r3, #0]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d101      	bne.n	800301a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e03d      	b.n	8003096 <HAL_UART_Receive_DMA+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	689a      	ldr	r2, [r3, #8]
 800301e:	2380      	movs	r3, #128	@ 0x80
 8003020:	015b      	lsls	r3, r3, #5
 8003022:	429a      	cmp	r2, r3
 8003024:	d109      	bne.n	800303a <HAL_UART_Receive_DMA+0x4a>
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	691b      	ldr	r3, [r3, #16]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d105      	bne.n	800303a <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	2201      	movs	r2, #1
 8003032:	4013      	ands	r3, r2
 8003034:	d001      	beq.n	800303a <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e02d      	b.n	8003096 <HAL_UART_Receive_DMA+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2200      	movs	r2, #0
 800303e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	685a      	ldr	r2, [r3, #4]
 8003046:	2380      	movs	r3, #128	@ 0x80
 8003048:	041b      	lsls	r3, r3, #16
 800304a:	4013      	ands	r3, r2
 800304c:	d019      	beq.n	8003082 <HAL_UART_Receive_DMA+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800304e:	f3ef 8310 	mrs	r3, PRIMASK
 8003052:	613b      	str	r3, [r7, #16]
  return(result);
 8003054:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003056:	61fb      	str	r3, [r7, #28]
 8003058:	2301      	movs	r3, #1
 800305a:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	f383 8810 	msr	PRIMASK, r3
}
 8003062:	46c0      	nop			@ (mov r8, r8)
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	2180      	movs	r1, #128	@ 0x80
 8003070:	04c9      	lsls	r1, r1, #19
 8003072:	430a      	orrs	r2, r1
 8003074:	601a      	str	r2, [r3, #0]
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800307a:	69bb      	ldr	r3, [r7, #24]
 800307c:	f383 8810 	msr	PRIMASK, r3
}
 8003080:	46c0      	nop			@ (mov r8, r8)
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003082:	1dbb      	adds	r3, r7, #6
 8003084:	881a      	ldrh	r2, [r3, #0]
 8003086:	68b9      	ldr	r1, [r7, #8]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	0018      	movs	r0, r3
 800308c:	f000 fe50 	bl	8003d30 <UART_Start_Receive_DMA>
 8003090:	0003      	movs	r3, r0
 8003092:	e000      	b.n	8003096 <HAL_UART_Receive_DMA+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8003094:	2302      	movs	r3, #2
  }
}
 8003096:	0018      	movs	r0, r3
 8003098:	46bd      	mov	sp, r7
 800309a:	b008      	add	sp, #32
 800309c:	bd80      	pop	{r7, pc}
	...

080030a0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80030a0:	b590      	push	{r4, r7, lr}
 80030a2:	b0ab      	sub	sp, #172	@ 0xac
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	69db      	ldr	r3, [r3, #28]
 80030ae:	22a4      	movs	r2, #164	@ 0xa4
 80030b0:	18b9      	adds	r1, r7, r2
 80030b2:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	20a0      	movs	r0, #160	@ 0xa0
 80030bc:	1839      	adds	r1, r7, r0
 80030be:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	219c      	movs	r1, #156	@ 0x9c
 80030c8:	1879      	adds	r1, r7, r1
 80030ca:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80030cc:	0011      	movs	r1, r2
 80030ce:	18bb      	adds	r3, r7, r2
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a99      	ldr	r2, [pc, #612]	@ (8003338 <HAL_UART_IRQHandler+0x298>)
 80030d4:	4013      	ands	r3, r2
 80030d6:	2298      	movs	r2, #152	@ 0x98
 80030d8:	18bc      	adds	r4, r7, r2
 80030da:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80030dc:	18bb      	adds	r3, r7, r2
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d114      	bne.n	800310e <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80030e4:	187b      	adds	r3, r7, r1
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	2220      	movs	r2, #32
 80030ea:	4013      	ands	r3, r2
 80030ec:	d00f      	beq.n	800310e <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80030ee:	183b      	adds	r3, r7, r0
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	2220      	movs	r2, #32
 80030f4:	4013      	ands	r3, r2
 80030f6:	d00a      	beq.n	800310e <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d100      	bne.n	8003102 <HAL_UART_IRQHandler+0x62>
 8003100:	e29e      	b.n	8003640 <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003106:	687a      	ldr	r2, [r7, #4]
 8003108:	0010      	movs	r0, r2
 800310a:	4798      	blx	r3
      }
      return;
 800310c:	e298      	b.n	8003640 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800310e:	2398      	movs	r3, #152	@ 0x98
 8003110:	18fb      	adds	r3, r7, r3
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d100      	bne.n	800311a <HAL_UART_IRQHandler+0x7a>
 8003118:	e114      	b.n	8003344 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800311a:	239c      	movs	r3, #156	@ 0x9c
 800311c:	18fb      	adds	r3, r7, r3
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	2201      	movs	r2, #1
 8003122:	4013      	ands	r3, r2
 8003124:	d106      	bne.n	8003134 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003126:	23a0      	movs	r3, #160	@ 0xa0
 8003128:	18fb      	adds	r3, r7, r3
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a83      	ldr	r2, [pc, #524]	@ (800333c <HAL_UART_IRQHandler+0x29c>)
 800312e:	4013      	ands	r3, r2
 8003130:	d100      	bne.n	8003134 <HAL_UART_IRQHandler+0x94>
 8003132:	e107      	b.n	8003344 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003134:	23a4      	movs	r3, #164	@ 0xa4
 8003136:	18fb      	adds	r3, r7, r3
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	2201      	movs	r2, #1
 800313c:	4013      	ands	r3, r2
 800313e:	d012      	beq.n	8003166 <HAL_UART_IRQHandler+0xc6>
 8003140:	23a0      	movs	r3, #160	@ 0xa0
 8003142:	18fb      	adds	r3, r7, r3
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	2380      	movs	r3, #128	@ 0x80
 8003148:	005b      	lsls	r3, r3, #1
 800314a:	4013      	ands	r3, r2
 800314c:	d00b      	beq.n	8003166 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	2201      	movs	r2, #1
 8003154:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2284      	movs	r2, #132	@ 0x84
 800315a:	589b      	ldr	r3, [r3, r2]
 800315c:	2201      	movs	r2, #1
 800315e:	431a      	orrs	r2, r3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2184      	movs	r1, #132	@ 0x84
 8003164:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003166:	23a4      	movs	r3, #164	@ 0xa4
 8003168:	18fb      	adds	r3, r7, r3
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	2202      	movs	r2, #2
 800316e:	4013      	ands	r3, r2
 8003170:	d011      	beq.n	8003196 <HAL_UART_IRQHandler+0xf6>
 8003172:	239c      	movs	r3, #156	@ 0x9c
 8003174:	18fb      	adds	r3, r7, r3
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	2201      	movs	r2, #1
 800317a:	4013      	ands	r3, r2
 800317c:	d00b      	beq.n	8003196 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	2202      	movs	r2, #2
 8003184:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2284      	movs	r2, #132	@ 0x84
 800318a:	589b      	ldr	r3, [r3, r2]
 800318c:	2204      	movs	r2, #4
 800318e:	431a      	orrs	r2, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2184      	movs	r1, #132	@ 0x84
 8003194:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003196:	23a4      	movs	r3, #164	@ 0xa4
 8003198:	18fb      	adds	r3, r7, r3
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	2204      	movs	r2, #4
 800319e:	4013      	ands	r3, r2
 80031a0:	d011      	beq.n	80031c6 <HAL_UART_IRQHandler+0x126>
 80031a2:	239c      	movs	r3, #156	@ 0x9c
 80031a4:	18fb      	adds	r3, r7, r3
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	2201      	movs	r2, #1
 80031aa:	4013      	ands	r3, r2
 80031ac:	d00b      	beq.n	80031c6 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	2204      	movs	r2, #4
 80031b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2284      	movs	r2, #132	@ 0x84
 80031ba:	589b      	ldr	r3, [r3, r2]
 80031bc:	2202      	movs	r2, #2
 80031be:	431a      	orrs	r2, r3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2184      	movs	r1, #132	@ 0x84
 80031c4:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80031c6:	23a4      	movs	r3, #164	@ 0xa4
 80031c8:	18fb      	adds	r3, r7, r3
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	2208      	movs	r2, #8
 80031ce:	4013      	ands	r3, r2
 80031d0:	d017      	beq.n	8003202 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80031d2:	23a0      	movs	r3, #160	@ 0xa0
 80031d4:	18fb      	adds	r3, r7, r3
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	2220      	movs	r2, #32
 80031da:	4013      	ands	r3, r2
 80031dc:	d105      	bne.n	80031ea <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80031de:	239c      	movs	r3, #156	@ 0x9c
 80031e0:	18fb      	adds	r3, r7, r3
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	2201      	movs	r2, #1
 80031e6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80031e8:	d00b      	beq.n	8003202 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	2208      	movs	r2, #8
 80031f0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2284      	movs	r2, #132	@ 0x84
 80031f6:	589b      	ldr	r3, [r3, r2]
 80031f8:	2208      	movs	r2, #8
 80031fa:	431a      	orrs	r2, r3
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2184      	movs	r1, #132	@ 0x84
 8003200:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003202:	23a4      	movs	r3, #164	@ 0xa4
 8003204:	18fb      	adds	r3, r7, r3
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	2380      	movs	r3, #128	@ 0x80
 800320a:	011b      	lsls	r3, r3, #4
 800320c:	4013      	ands	r3, r2
 800320e:	d013      	beq.n	8003238 <HAL_UART_IRQHandler+0x198>
 8003210:	23a0      	movs	r3, #160	@ 0xa0
 8003212:	18fb      	adds	r3, r7, r3
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	2380      	movs	r3, #128	@ 0x80
 8003218:	04db      	lsls	r3, r3, #19
 800321a:	4013      	ands	r3, r2
 800321c:	d00c      	beq.n	8003238 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	2280      	movs	r2, #128	@ 0x80
 8003224:	0112      	lsls	r2, r2, #4
 8003226:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2284      	movs	r2, #132	@ 0x84
 800322c:	589b      	ldr	r3, [r3, r2]
 800322e:	2220      	movs	r2, #32
 8003230:	431a      	orrs	r2, r3
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2184      	movs	r1, #132	@ 0x84
 8003236:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2284      	movs	r2, #132	@ 0x84
 800323c:	589b      	ldr	r3, [r3, r2]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d100      	bne.n	8003244 <HAL_UART_IRQHandler+0x1a4>
 8003242:	e1ff      	b.n	8003644 <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003244:	23a4      	movs	r3, #164	@ 0xa4
 8003246:	18fb      	adds	r3, r7, r3
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	2220      	movs	r2, #32
 800324c:	4013      	ands	r3, r2
 800324e:	d00e      	beq.n	800326e <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003250:	23a0      	movs	r3, #160	@ 0xa0
 8003252:	18fb      	adds	r3, r7, r3
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	2220      	movs	r2, #32
 8003258:	4013      	ands	r3, r2
 800325a:	d008      	beq.n	800326e <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003260:	2b00      	cmp	r3, #0
 8003262:	d004      	beq.n	800326e <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	0010      	movs	r0, r2
 800326c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2284      	movs	r2, #132	@ 0x84
 8003272:	589b      	ldr	r3, [r3, r2]
 8003274:	2194      	movs	r1, #148	@ 0x94
 8003276:	187a      	adds	r2, r7, r1
 8003278:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	2240      	movs	r2, #64	@ 0x40
 8003282:	4013      	ands	r3, r2
 8003284:	2b40      	cmp	r3, #64	@ 0x40
 8003286:	d004      	beq.n	8003292 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003288:	187b      	adds	r3, r7, r1
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	2228      	movs	r2, #40	@ 0x28
 800328e:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003290:	d047      	beq.n	8003322 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	0018      	movs	r0, r3
 8003296:	f000 fe0f 	bl	8003eb8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	2240      	movs	r2, #64	@ 0x40
 80032a2:	4013      	ands	r3, r2
 80032a4:	2b40      	cmp	r3, #64	@ 0x40
 80032a6:	d137      	bne.n	8003318 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032a8:	f3ef 8310 	mrs	r3, PRIMASK
 80032ac:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 80032ae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032b0:	2090      	movs	r0, #144	@ 0x90
 80032b2:	183a      	adds	r2, r7, r0
 80032b4:	6013      	str	r3, [r2, #0]
 80032b6:	2301      	movs	r3, #1
 80032b8:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032ba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80032bc:	f383 8810 	msr	PRIMASK, r3
}
 80032c0:	46c0      	nop			@ (mov r8, r8)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	689a      	ldr	r2, [r3, #8]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	2140      	movs	r1, #64	@ 0x40
 80032ce:	438a      	bics	r2, r1
 80032d0:	609a      	str	r2, [r3, #8]
 80032d2:	183b      	adds	r3, r7, r0
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032d8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80032da:	f383 8810 	msr	PRIMASK, r3
}
 80032de:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d012      	beq.n	800330e <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032ec:	4a14      	ldr	r2, [pc, #80]	@ (8003340 <HAL_UART_IRQHandler+0x2a0>)
 80032ee:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032f4:	0018      	movs	r0, r3
 80032f6:	f7fd fe61 	bl	8000fbc <HAL_DMA_Abort_IT>
 80032fa:	1e03      	subs	r3, r0, #0
 80032fc:	d01a      	beq.n	8003334 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003302:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003308:	0018      	movs	r0, r3
 800330a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800330c:	e012      	b.n	8003334 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	0018      	movs	r0, r3
 8003312:	f000 f9a5 	bl	8003660 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003316:	e00d      	b.n	8003334 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	0018      	movs	r0, r3
 800331c:	f000 f9a0 	bl	8003660 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003320:	e008      	b.n	8003334 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	0018      	movs	r0, r3
 8003326:	f000 f99b 	bl	8003660 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2284      	movs	r2, #132	@ 0x84
 800332e:	2100      	movs	r1, #0
 8003330:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8003332:	e187      	b.n	8003644 <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003334:	46c0      	nop			@ (mov r8, r8)
    return;
 8003336:	e185      	b.n	8003644 <HAL_UART_IRQHandler+0x5a4>
 8003338:	0000080f 	.word	0x0000080f
 800333c:	04000120 	.word	0x04000120
 8003340:	08004173 	.word	0x08004173

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003348:	2b01      	cmp	r3, #1
 800334a:	d000      	beq.n	800334e <HAL_UART_IRQHandler+0x2ae>
 800334c:	e139      	b.n	80035c2 <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800334e:	23a4      	movs	r3, #164	@ 0xa4
 8003350:	18fb      	adds	r3, r7, r3
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	2210      	movs	r2, #16
 8003356:	4013      	ands	r3, r2
 8003358:	d100      	bne.n	800335c <HAL_UART_IRQHandler+0x2bc>
 800335a:	e132      	b.n	80035c2 <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800335c:	23a0      	movs	r3, #160	@ 0xa0
 800335e:	18fb      	adds	r3, r7, r3
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	2210      	movs	r2, #16
 8003364:	4013      	ands	r3, r2
 8003366:	d100      	bne.n	800336a <HAL_UART_IRQHandler+0x2ca>
 8003368:	e12b      	b.n	80035c2 <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	2210      	movs	r2, #16
 8003370:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	2240      	movs	r2, #64	@ 0x40
 800337a:	4013      	ands	r3, r2
 800337c:	2b40      	cmp	r3, #64	@ 0x40
 800337e:	d000      	beq.n	8003382 <HAL_UART_IRQHandler+0x2e2>
 8003380:	e09f      	b.n	80034c2 <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	685a      	ldr	r2, [r3, #4]
 800338a:	217e      	movs	r1, #126	@ 0x7e
 800338c:	187b      	adds	r3, r7, r1
 800338e:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003390:	187b      	adds	r3, r7, r1
 8003392:	881b      	ldrh	r3, [r3, #0]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d100      	bne.n	800339a <HAL_UART_IRQHandler+0x2fa>
 8003398:	e156      	b.n	8003648 <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2258      	movs	r2, #88	@ 0x58
 800339e:	5a9b      	ldrh	r3, [r3, r2]
 80033a0:	187a      	adds	r2, r7, r1
 80033a2:	8812      	ldrh	r2, [r2, #0]
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d300      	bcc.n	80033aa <HAL_UART_IRQHandler+0x30a>
 80033a8:	e14e      	b.n	8003648 <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	187a      	adds	r2, r7, r1
 80033ae:	215a      	movs	r1, #90	@ 0x5a
 80033b0:	8812      	ldrh	r2, [r2, #0]
 80033b2:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033b8:	699b      	ldr	r3, [r3, #24]
 80033ba:	2b20      	cmp	r3, #32
 80033bc:	d06f      	beq.n	800349e <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033be:	f3ef 8310 	mrs	r3, PRIMASK
 80033c2:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80033c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80033c6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80033c8:	2301      	movs	r3, #1
 80033ca:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033ce:	f383 8810 	msr	PRIMASK, r3
}
 80033d2:	46c0      	nop			@ (mov r8, r8)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	499e      	ldr	r1, [pc, #632]	@ (8003658 <HAL_UART_IRQHandler+0x5b8>)
 80033e0:	400a      	ands	r2, r1
 80033e2:	601a      	str	r2, [r3, #0]
 80033e4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80033e6:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033ea:	f383 8810 	msr	PRIMASK, r3
}
 80033ee:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033f0:	f3ef 8310 	mrs	r3, PRIMASK
 80033f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 80033f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033f8:	677b      	str	r3, [r7, #116]	@ 0x74
 80033fa:	2301      	movs	r3, #1
 80033fc:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003400:	f383 8810 	msr	PRIMASK, r3
}
 8003404:	46c0      	nop			@ (mov r8, r8)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	689a      	ldr	r2, [r3, #8]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	2101      	movs	r1, #1
 8003412:	438a      	bics	r2, r1
 8003414:	609a      	str	r2, [r3, #8]
 8003416:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003418:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800341a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800341c:	f383 8810 	msr	PRIMASK, r3
}
 8003420:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003422:	f3ef 8310 	mrs	r3, PRIMASK
 8003426:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8003428:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800342a:	673b      	str	r3, [r7, #112]	@ 0x70
 800342c:	2301      	movs	r3, #1
 800342e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003430:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003432:	f383 8810 	msr	PRIMASK, r3
}
 8003436:	46c0      	nop			@ (mov r8, r8)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	689a      	ldr	r2, [r3, #8]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	2140      	movs	r1, #64	@ 0x40
 8003444:	438a      	bics	r2, r1
 8003446:	609a      	str	r2, [r3, #8]
 8003448:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800344a:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800344c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800344e:	f383 8810 	msr	PRIMASK, r3
}
 8003452:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2280      	movs	r2, #128	@ 0x80
 8003458:	2120      	movs	r1, #32
 800345a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2200      	movs	r2, #0
 8003460:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003462:	f3ef 8310 	mrs	r3, PRIMASK
 8003466:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8003468:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800346a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800346c:	2301      	movs	r3, #1
 800346e:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003470:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003472:	f383 8810 	msr	PRIMASK, r3
}
 8003476:	46c0      	nop			@ (mov r8, r8)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	2110      	movs	r1, #16
 8003484:	438a      	bics	r2, r1
 8003486:	601a      	str	r2, [r3, #0]
 8003488:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800348a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800348c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800348e:	f383 8810 	msr	PRIMASK, r3
}
 8003492:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003498:	0018      	movs	r0, r3
 800349a:	f7fd fd57 	bl	8000f4c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2202      	movs	r2, #2
 80034a2:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2258      	movs	r2, #88	@ 0x58
 80034a8:	5a9a      	ldrh	r2, [r3, r2]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	215a      	movs	r1, #90	@ 0x5a
 80034ae:	5a5b      	ldrh	r3, [r3, r1]
 80034b0:	b29b      	uxth	r3, r3
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	b29a      	uxth	r2, r3
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	0011      	movs	r1, r2
 80034ba:	0018      	movs	r0, r3
 80034bc:	f000 f8d8 	bl	8003670 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80034c0:	e0c2      	b.n	8003648 <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2258      	movs	r2, #88	@ 0x58
 80034c6:	5a99      	ldrh	r1, [r3, r2]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	225a      	movs	r2, #90	@ 0x5a
 80034cc:	5a9b      	ldrh	r3, [r3, r2]
 80034ce:	b29a      	uxth	r2, r3
 80034d0:	208e      	movs	r0, #142	@ 0x8e
 80034d2:	183b      	adds	r3, r7, r0
 80034d4:	1a8a      	subs	r2, r1, r2
 80034d6:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	225a      	movs	r2, #90	@ 0x5a
 80034dc:	5a9b      	ldrh	r3, [r3, r2]
 80034de:	b29b      	uxth	r3, r3
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d100      	bne.n	80034e6 <HAL_UART_IRQHandler+0x446>
 80034e4:	e0b2      	b.n	800364c <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 80034e6:	183b      	adds	r3, r7, r0
 80034e8:	881b      	ldrh	r3, [r3, #0]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d100      	bne.n	80034f0 <HAL_UART_IRQHandler+0x450>
 80034ee:	e0ad      	b.n	800364c <HAL_UART_IRQHandler+0x5ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034f0:	f3ef 8310 	mrs	r3, PRIMASK
 80034f4:	60fb      	str	r3, [r7, #12]
  return(result);
 80034f6:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034f8:	2488      	movs	r4, #136	@ 0x88
 80034fa:	193a      	adds	r2, r7, r4
 80034fc:	6013      	str	r3, [r2, #0]
 80034fe:	2301      	movs	r3, #1
 8003500:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	f383 8810 	msr	PRIMASK, r3
}
 8003508:	46c0      	nop			@ (mov r8, r8)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4951      	ldr	r1, [pc, #324]	@ (800365c <HAL_UART_IRQHandler+0x5bc>)
 8003516:	400a      	ands	r2, r1
 8003518:	601a      	str	r2, [r3, #0]
 800351a:	193b      	adds	r3, r7, r4
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	f383 8810 	msr	PRIMASK, r3
}
 8003526:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003528:	f3ef 8310 	mrs	r3, PRIMASK
 800352c:	61bb      	str	r3, [r7, #24]
  return(result);
 800352e:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003530:	2484      	movs	r4, #132	@ 0x84
 8003532:	193a      	adds	r2, r7, r4
 8003534:	6013      	str	r3, [r2, #0]
 8003536:	2301      	movs	r3, #1
 8003538:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	f383 8810 	msr	PRIMASK, r3
}
 8003540:	46c0      	nop			@ (mov r8, r8)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	689a      	ldr	r2, [r3, #8]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	2101      	movs	r1, #1
 800354e:	438a      	bics	r2, r1
 8003550:	609a      	str	r2, [r3, #8]
 8003552:	193b      	adds	r3, r7, r4
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003558:	6a3b      	ldr	r3, [r7, #32]
 800355a:	f383 8810 	msr	PRIMASK, r3
}
 800355e:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2280      	movs	r2, #128	@ 0x80
 8003564:	2120      	movs	r1, #32
 8003566:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2200      	movs	r2, #0
 800356c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2200      	movs	r2, #0
 8003572:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003574:	f3ef 8310 	mrs	r3, PRIMASK
 8003578:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800357a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800357c:	2480      	movs	r4, #128	@ 0x80
 800357e:	193a      	adds	r2, r7, r4
 8003580:	6013      	str	r3, [r2, #0]
 8003582:	2301      	movs	r3, #1
 8003584:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003586:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003588:	f383 8810 	msr	PRIMASK, r3
}
 800358c:	46c0      	nop			@ (mov r8, r8)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	2110      	movs	r1, #16
 800359a:	438a      	bics	r2, r1
 800359c:	601a      	str	r2, [r3, #0]
 800359e:	193b      	adds	r3, r7, r4
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035a6:	f383 8810 	msr	PRIMASK, r3
}
 80035aa:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2202      	movs	r2, #2
 80035b0:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80035b2:	183b      	adds	r3, r7, r0
 80035b4:	881a      	ldrh	r2, [r3, #0]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	0011      	movs	r1, r2
 80035ba:	0018      	movs	r0, r3
 80035bc:	f000 f858 	bl	8003670 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80035c0:	e044      	b.n	800364c <HAL_UART_IRQHandler+0x5ac>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80035c2:	23a4      	movs	r3, #164	@ 0xa4
 80035c4:	18fb      	adds	r3, r7, r3
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	2380      	movs	r3, #128	@ 0x80
 80035ca:	035b      	lsls	r3, r3, #13
 80035cc:	4013      	ands	r3, r2
 80035ce:	d010      	beq.n	80035f2 <HAL_UART_IRQHandler+0x552>
 80035d0:	239c      	movs	r3, #156	@ 0x9c
 80035d2:	18fb      	adds	r3, r7, r3
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	2380      	movs	r3, #128	@ 0x80
 80035d8:	03db      	lsls	r3, r3, #15
 80035da:	4013      	ands	r3, r2
 80035dc:	d009      	beq.n	80035f2 <HAL_UART_IRQHandler+0x552>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	2280      	movs	r2, #128	@ 0x80
 80035e4:	0352      	lsls	r2, r2, #13
 80035e6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	0018      	movs	r0, r3
 80035ec:	f000 fe03 	bl	80041f6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80035f0:	e02f      	b.n	8003652 <HAL_UART_IRQHandler+0x5b2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80035f2:	23a4      	movs	r3, #164	@ 0xa4
 80035f4:	18fb      	adds	r3, r7, r3
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	2280      	movs	r2, #128	@ 0x80
 80035fa:	4013      	ands	r3, r2
 80035fc:	d00f      	beq.n	800361e <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80035fe:	23a0      	movs	r3, #160	@ 0xa0
 8003600:	18fb      	adds	r3, r7, r3
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	2280      	movs	r2, #128	@ 0x80
 8003606:	4013      	ands	r3, r2
 8003608:	d009      	beq.n	800361e <HAL_UART_IRQHandler+0x57e>
  {
    if (huart->TxISR != NULL)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800360e:	2b00      	cmp	r3, #0
 8003610:	d01e      	beq.n	8003650 <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003616:	687a      	ldr	r2, [r7, #4]
 8003618:	0010      	movs	r0, r2
 800361a:	4798      	blx	r3
    }
    return;
 800361c:	e018      	b.n	8003650 <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800361e:	23a4      	movs	r3, #164	@ 0xa4
 8003620:	18fb      	adds	r3, r7, r3
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	2240      	movs	r2, #64	@ 0x40
 8003626:	4013      	ands	r3, r2
 8003628:	d013      	beq.n	8003652 <HAL_UART_IRQHandler+0x5b2>
 800362a:	23a0      	movs	r3, #160	@ 0xa0
 800362c:	18fb      	adds	r3, r7, r3
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	2240      	movs	r2, #64	@ 0x40
 8003632:	4013      	ands	r3, r2
 8003634:	d00d      	beq.n	8003652 <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	0018      	movs	r0, r3
 800363a:	f000 fdb1 	bl	80041a0 <UART_EndTransmit_IT>
    return;
 800363e:	e008      	b.n	8003652 <HAL_UART_IRQHandler+0x5b2>
      return;
 8003640:	46c0      	nop			@ (mov r8, r8)
 8003642:	e006      	b.n	8003652 <HAL_UART_IRQHandler+0x5b2>
    return;
 8003644:	46c0      	nop			@ (mov r8, r8)
 8003646:	e004      	b.n	8003652 <HAL_UART_IRQHandler+0x5b2>
      return;
 8003648:	46c0      	nop			@ (mov r8, r8)
 800364a:	e002      	b.n	8003652 <HAL_UART_IRQHandler+0x5b2>
      return;
 800364c:	46c0      	nop			@ (mov r8, r8)
 800364e:	e000      	b.n	8003652 <HAL_UART_IRQHandler+0x5b2>
    return;
 8003650:	46c0      	nop			@ (mov r8, r8)
  }

}
 8003652:	46bd      	mov	sp, r7
 8003654:	b02b      	add	sp, #172	@ 0xac
 8003656:	bd90      	pop	{r4, r7, pc}
 8003658:	fffffeff 	.word	0xfffffeff
 800365c:	fffffedf 	.word	0xfffffedf

08003660 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b082      	sub	sp, #8
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003668:	46c0      	nop			@ (mov r8, r8)
 800366a:	46bd      	mov	sp, r7
 800366c:	b002      	add	sp, #8
 800366e:	bd80      	pop	{r7, pc}

08003670 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b082      	sub	sp, #8
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	000a      	movs	r2, r1
 800367a:	1cbb      	adds	r3, r7, #2
 800367c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800367e:	46c0      	nop			@ (mov r8, r8)
 8003680:	46bd      	mov	sp, r7
 8003682:	b002      	add	sp, #8
 8003684:	bd80      	pop	{r7, pc}
	...

08003688 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b088      	sub	sp, #32
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003690:	231e      	movs	r3, #30
 8003692:	18fb      	adds	r3, r7, r3
 8003694:	2200      	movs	r2, #0
 8003696:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	689a      	ldr	r2, [r3, #8]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	691b      	ldr	r3, [r3, #16]
 80036a0:	431a      	orrs	r2, r3
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	695b      	ldr	r3, [r3, #20]
 80036a6:	431a      	orrs	r2, r3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	69db      	ldr	r3, [r3, #28]
 80036ac:	4313      	orrs	r3, r2
 80036ae:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4aaf      	ldr	r2, [pc, #700]	@ (8003974 <UART_SetConfig+0x2ec>)
 80036b8:	4013      	ands	r3, r2
 80036ba:	0019      	movs	r1, r3
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	697a      	ldr	r2, [r7, #20]
 80036c2:	430a      	orrs	r2, r1
 80036c4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	4aaa      	ldr	r2, [pc, #680]	@ (8003978 <UART_SetConfig+0x2f0>)
 80036ce:	4013      	ands	r3, r2
 80036d0:	0019      	movs	r1, r3
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	68da      	ldr	r2, [r3, #12]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	430a      	orrs	r2, r1
 80036dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	699b      	ldr	r3, [r3, #24]
 80036e2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6a1b      	ldr	r3, [r3, #32]
 80036e8:	697a      	ldr	r2, [r7, #20]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	4aa1      	ldr	r2, [pc, #644]	@ (800397c <UART_SetConfig+0x2f4>)
 80036f6:	4013      	ands	r3, r2
 80036f8:	0019      	movs	r1, r3
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	697a      	ldr	r2, [r7, #20]
 8003700:	430a      	orrs	r2, r1
 8003702:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a9d      	ldr	r2, [pc, #628]	@ (8003980 <UART_SetConfig+0x2f8>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d127      	bne.n	800375e <UART_SetConfig+0xd6>
 800370e:	4b9d      	ldr	r3, [pc, #628]	@ (8003984 <UART_SetConfig+0x2fc>)
 8003710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003712:	2203      	movs	r2, #3
 8003714:	4013      	ands	r3, r2
 8003716:	2b03      	cmp	r3, #3
 8003718:	d00d      	beq.n	8003736 <UART_SetConfig+0xae>
 800371a:	d81b      	bhi.n	8003754 <UART_SetConfig+0xcc>
 800371c:	2b02      	cmp	r3, #2
 800371e:	d014      	beq.n	800374a <UART_SetConfig+0xc2>
 8003720:	d818      	bhi.n	8003754 <UART_SetConfig+0xcc>
 8003722:	2b00      	cmp	r3, #0
 8003724:	d002      	beq.n	800372c <UART_SetConfig+0xa4>
 8003726:	2b01      	cmp	r3, #1
 8003728:	d00a      	beq.n	8003740 <UART_SetConfig+0xb8>
 800372a:	e013      	b.n	8003754 <UART_SetConfig+0xcc>
 800372c:	231f      	movs	r3, #31
 800372e:	18fb      	adds	r3, r7, r3
 8003730:	2200      	movs	r2, #0
 8003732:	701a      	strb	r2, [r3, #0]
 8003734:	e065      	b.n	8003802 <UART_SetConfig+0x17a>
 8003736:	231f      	movs	r3, #31
 8003738:	18fb      	adds	r3, r7, r3
 800373a:	2202      	movs	r2, #2
 800373c:	701a      	strb	r2, [r3, #0]
 800373e:	e060      	b.n	8003802 <UART_SetConfig+0x17a>
 8003740:	231f      	movs	r3, #31
 8003742:	18fb      	adds	r3, r7, r3
 8003744:	2204      	movs	r2, #4
 8003746:	701a      	strb	r2, [r3, #0]
 8003748:	e05b      	b.n	8003802 <UART_SetConfig+0x17a>
 800374a:	231f      	movs	r3, #31
 800374c:	18fb      	adds	r3, r7, r3
 800374e:	2208      	movs	r2, #8
 8003750:	701a      	strb	r2, [r3, #0]
 8003752:	e056      	b.n	8003802 <UART_SetConfig+0x17a>
 8003754:	231f      	movs	r3, #31
 8003756:	18fb      	adds	r3, r7, r3
 8003758:	2210      	movs	r2, #16
 800375a:	701a      	strb	r2, [r3, #0]
 800375c:	e051      	b.n	8003802 <UART_SetConfig+0x17a>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a89      	ldr	r2, [pc, #548]	@ (8003988 <UART_SetConfig+0x300>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d134      	bne.n	80037d2 <UART_SetConfig+0x14a>
 8003768:	4b86      	ldr	r3, [pc, #536]	@ (8003984 <UART_SetConfig+0x2fc>)
 800376a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800376c:	23c0      	movs	r3, #192	@ 0xc0
 800376e:	029b      	lsls	r3, r3, #10
 8003770:	4013      	ands	r3, r2
 8003772:	22c0      	movs	r2, #192	@ 0xc0
 8003774:	0292      	lsls	r2, r2, #10
 8003776:	4293      	cmp	r3, r2
 8003778:	d017      	beq.n	80037aa <UART_SetConfig+0x122>
 800377a:	22c0      	movs	r2, #192	@ 0xc0
 800377c:	0292      	lsls	r2, r2, #10
 800377e:	4293      	cmp	r3, r2
 8003780:	d822      	bhi.n	80037c8 <UART_SetConfig+0x140>
 8003782:	2280      	movs	r2, #128	@ 0x80
 8003784:	0292      	lsls	r2, r2, #10
 8003786:	4293      	cmp	r3, r2
 8003788:	d019      	beq.n	80037be <UART_SetConfig+0x136>
 800378a:	2280      	movs	r2, #128	@ 0x80
 800378c:	0292      	lsls	r2, r2, #10
 800378e:	4293      	cmp	r3, r2
 8003790:	d81a      	bhi.n	80037c8 <UART_SetConfig+0x140>
 8003792:	2b00      	cmp	r3, #0
 8003794:	d004      	beq.n	80037a0 <UART_SetConfig+0x118>
 8003796:	2280      	movs	r2, #128	@ 0x80
 8003798:	0252      	lsls	r2, r2, #9
 800379a:	4293      	cmp	r3, r2
 800379c:	d00a      	beq.n	80037b4 <UART_SetConfig+0x12c>
 800379e:	e013      	b.n	80037c8 <UART_SetConfig+0x140>
 80037a0:	231f      	movs	r3, #31
 80037a2:	18fb      	adds	r3, r7, r3
 80037a4:	2200      	movs	r2, #0
 80037a6:	701a      	strb	r2, [r3, #0]
 80037a8:	e02b      	b.n	8003802 <UART_SetConfig+0x17a>
 80037aa:	231f      	movs	r3, #31
 80037ac:	18fb      	adds	r3, r7, r3
 80037ae:	2202      	movs	r2, #2
 80037b0:	701a      	strb	r2, [r3, #0]
 80037b2:	e026      	b.n	8003802 <UART_SetConfig+0x17a>
 80037b4:	231f      	movs	r3, #31
 80037b6:	18fb      	adds	r3, r7, r3
 80037b8:	2204      	movs	r2, #4
 80037ba:	701a      	strb	r2, [r3, #0]
 80037bc:	e021      	b.n	8003802 <UART_SetConfig+0x17a>
 80037be:	231f      	movs	r3, #31
 80037c0:	18fb      	adds	r3, r7, r3
 80037c2:	2208      	movs	r2, #8
 80037c4:	701a      	strb	r2, [r3, #0]
 80037c6:	e01c      	b.n	8003802 <UART_SetConfig+0x17a>
 80037c8:	231f      	movs	r3, #31
 80037ca:	18fb      	adds	r3, r7, r3
 80037cc:	2210      	movs	r2, #16
 80037ce:	701a      	strb	r2, [r3, #0]
 80037d0:	e017      	b.n	8003802 <UART_SetConfig+0x17a>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a6d      	ldr	r2, [pc, #436]	@ (800398c <UART_SetConfig+0x304>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d104      	bne.n	80037e6 <UART_SetConfig+0x15e>
 80037dc:	231f      	movs	r3, #31
 80037de:	18fb      	adds	r3, r7, r3
 80037e0:	2200      	movs	r2, #0
 80037e2:	701a      	strb	r2, [r3, #0]
 80037e4:	e00d      	b.n	8003802 <UART_SetConfig+0x17a>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a69      	ldr	r2, [pc, #420]	@ (8003990 <UART_SetConfig+0x308>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d104      	bne.n	80037fa <UART_SetConfig+0x172>
 80037f0:	231f      	movs	r3, #31
 80037f2:	18fb      	adds	r3, r7, r3
 80037f4:	2200      	movs	r2, #0
 80037f6:	701a      	strb	r2, [r3, #0]
 80037f8:	e003      	b.n	8003802 <UART_SetConfig+0x17a>
 80037fa:	231f      	movs	r3, #31
 80037fc:	18fb      	adds	r3, r7, r3
 80037fe:	2210      	movs	r2, #16
 8003800:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	69da      	ldr	r2, [r3, #28]
 8003806:	2380      	movs	r3, #128	@ 0x80
 8003808:	021b      	lsls	r3, r3, #8
 800380a:	429a      	cmp	r2, r3
 800380c:	d15c      	bne.n	80038c8 <UART_SetConfig+0x240>
  {
    switch (clocksource)
 800380e:	231f      	movs	r3, #31
 8003810:	18fb      	adds	r3, r7, r3
 8003812:	781b      	ldrb	r3, [r3, #0]
 8003814:	2b08      	cmp	r3, #8
 8003816:	d015      	beq.n	8003844 <UART_SetConfig+0x1bc>
 8003818:	dc18      	bgt.n	800384c <UART_SetConfig+0x1c4>
 800381a:	2b04      	cmp	r3, #4
 800381c:	d00d      	beq.n	800383a <UART_SetConfig+0x1b2>
 800381e:	dc15      	bgt.n	800384c <UART_SetConfig+0x1c4>
 8003820:	2b00      	cmp	r3, #0
 8003822:	d002      	beq.n	800382a <UART_SetConfig+0x1a2>
 8003824:	2b02      	cmp	r3, #2
 8003826:	d005      	beq.n	8003834 <UART_SetConfig+0x1ac>
 8003828:	e010      	b.n	800384c <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800382a:	f7fe fb8f 	bl	8001f4c <HAL_RCC_GetPCLK1Freq>
 800382e:	0003      	movs	r3, r0
 8003830:	61bb      	str	r3, [r7, #24]
        break;
 8003832:	e012      	b.n	800385a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003834:	4b57      	ldr	r3, [pc, #348]	@ (8003994 <UART_SetConfig+0x30c>)
 8003836:	61bb      	str	r3, [r7, #24]
        break;
 8003838:	e00f      	b.n	800385a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800383a:	f7fe fb0b 	bl	8001e54 <HAL_RCC_GetSysClockFreq>
 800383e:	0003      	movs	r3, r0
 8003840:	61bb      	str	r3, [r7, #24]
        break;
 8003842:	e00a      	b.n	800385a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003844:	2380      	movs	r3, #128	@ 0x80
 8003846:	021b      	lsls	r3, r3, #8
 8003848:	61bb      	str	r3, [r7, #24]
        break;
 800384a:	e006      	b.n	800385a <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 800384c:	2300      	movs	r3, #0
 800384e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003850:	231e      	movs	r3, #30
 8003852:	18fb      	adds	r3, r7, r3
 8003854:	2201      	movs	r2, #1
 8003856:	701a      	strb	r2, [r3, #0]
        break;
 8003858:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800385a:	69bb      	ldr	r3, [r7, #24]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d100      	bne.n	8003862 <UART_SetConfig+0x1da>
 8003860:	e07a      	b.n	8003958 <UART_SetConfig+0x2d0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003862:	69bb      	ldr	r3, [r7, #24]
 8003864:	005a      	lsls	r2, r3, #1
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	085b      	lsrs	r3, r3, #1
 800386c:	18d2      	adds	r2, r2, r3
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	0019      	movs	r1, r3
 8003874:	0010      	movs	r0, r2
 8003876:	f7fc fc47 	bl	8000108 <__udivsi3>
 800387a:	0003      	movs	r3, r0
 800387c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	2b0f      	cmp	r3, #15
 8003882:	d91c      	bls.n	80038be <UART_SetConfig+0x236>
 8003884:	693a      	ldr	r2, [r7, #16]
 8003886:	2380      	movs	r3, #128	@ 0x80
 8003888:	025b      	lsls	r3, r3, #9
 800388a:	429a      	cmp	r2, r3
 800388c:	d217      	bcs.n	80038be <UART_SetConfig+0x236>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	b29a      	uxth	r2, r3
 8003892:	200e      	movs	r0, #14
 8003894:	183b      	adds	r3, r7, r0
 8003896:	210f      	movs	r1, #15
 8003898:	438a      	bics	r2, r1
 800389a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	085b      	lsrs	r3, r3, #1
 80038a0:	b29b      	uxth	r3, r3
 80038a2:	2207      	movs	r2, #7
 80038a4:	4013      	ands	r3, r2
 80038a6:	b299      	uxth	r1, r3
 80038a8:	183b      	adds	r3, r7, r0
 80038aa:	183a      	adds	r2, r7, r0
 80038ac:	8812      	ldrh	r2, [r2, #0]
 80038ae:	430a      	orrs	r2, r1
 80038b0:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	183a      	adds	r2, r7, r0
 80038b8:	8812      	ldrh	r2, [r2, #0]
 80038ba:	60da      	str	r2, [r3, #12]
 80038bc:	e04c      	b.n	8003958 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 80038be:	231e      	movs	r3, #30
 80038c0:	18fb      	adds	r3, r7, r3
 80038c2:	2201      	movs	r2, #1
 80038c4:	701a      	strb	r2, [r3, #0]
 80038c6:	e047      	b.n	8003958 <UART_SetConfig+0x2d0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80038c8:	231f      	movs	r3, #31
 80038ca:	18fb      	adds	r3, r7, r3
 80038cc:	781b      	ldrb	r3, [r3, #0]
 80038ce:	2b08      	cmp	r3, #8
 80038d0:	d015      	beq.n	80038fe <UART_SetConfig+0x276>
 80038d2:	dc18      	bgt.n	8003906 <UART_SetConfig+0x27e>
 80038d4:	2b04      	cmp	r3, #4
 80038d6:	d00d      	beq.n	80038f4 <UART_SetConfig+0x26c>
 80038d8:	dc15      	bgt.n	8003906 <UART_SetConfig+0x27e>
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d002      	beq.n	80038e4 <UART_SetConfig+0x25c>
 80038de:	2b02      	cmp	r3, #2
 80038e0:	d005      	beq.n	80038ee <UART_SetConfig+0x266>
 80038e2:	e010      	b.n	8003906 <UART_SetConfig+0x27e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038e4:	f7fe fb32 	bl	8001f4c <HAL_RCC_GetPCLK1Freq>
 80038e8:	0003      	movs	r3, r0
 80038ea:	61bb      	str	r3, [r7, #24]
        break;
 80038ec:	e012      	b.n	8003914 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038ee:	4b29      	ldr	r3, [pc, #164]	@ (8003994 <UART_SetConfig+0x30c>)
 80038f0:	61bb      	str	r3, [r7, #24]
        break;
 80038f2:	e00f      	b.n	8003914 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038f4:	f7fe faae 	bl	8001e54 <HAL_RCC_GetSysClockFreq>
 80038f8:	0003      	movs	r3, r0
 80038fa:	61bb      	str	r3, [r7, #24]
        break;
 80038fc:	e00a      	b.n	8003914 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038fe:	2380      	movs	r3, #128	@ 0x80
 8003900:	021b      	lsls	r3, r3, #8
 8003902:	61bb      	str	r3, [r7, #24]
        break;
 8003904:	e006      	b.n	8003914 <UART_SetConfig+0x28c>
      default:
        pclk = 0U;
 8003906:	2300      	movs	r3, #0
 8003908:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800390a:	231e      	movs	r3, #30
 800390c:	18fb      	adds	r3, r7, r3
 800390e:	2201      	movs	r2, #1
 8003910:	701a      	strb	r2, [r3, #0]
        break;
 8003912:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8003914:	69bb      	ldr	r3, [r7, #24]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d01e      	beq.n	8003958 <UART_SetConfig+0x2d0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	085a      	lsrs	r2, r3, #1
 8003920:	69bb      	ldr	r3, [r7, #24]
 8003922:	18d2      	adds	r2, r2, r3
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	0019      	movs	r1, r3
 800392a:	0010      	movs	r0, r2
 800392c:	f7fc fbec 	bl	8000108 <__udivsi3>
 8003930:	0003      	movs	r3, r0
 8003932:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	2b0f      	cmp	r3, #15
 8003938:	d90a      	bls.n	8003950 <UART_SetConfig+0x2c8>
 800393a:	693a      	ldr	r2, [r7, #16]
 800393c:	2380      	movs	r3, #128	@ 0x80
 800393e:	025b      	lsls	r3, r3, #9
 8003940:	429a      	cmp	r2, r3
 8003942:	d205      	bcs.n	8003950 <UART_SetConfig+0x2c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	b29a      	uxth	r2, r3
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	60da      	str	r2, [r3, #12]
 800394e:	e003      	b.n	8003958 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 8003950:	231e      	movs	r3, #30
 8003952:	18fb      	adds	r3, r7, r3
 8003954:	2201      	movs	r2, #1
 8003956:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2200      	movs	r2, #0
 800395c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2200      	movs	r2, #0
 8003962:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003964:	231e      	movs	r3, #30
 8003966:	18fb      	adds	r3, r7, r3
 8003968:	781b      	ldrb	r3, [r3, #0]
}
 800396a:	0018      	movs	r0, r3
 800396c:	46bd      	mov	sp, r7
 800396e:	b008      	add	sp, #32
 8003970:	bd80      	pop	{r7, pc}
 8003972:	46c0      	nop			@ (mov r8, r8)
 8003974:	efff69f3 	.word	0xefff69f3
 8003978:	ffffcfff 	.word	0xffffcfff
 800397c:	fffff4ff 	.word	0xfffff4ff
 8003980:	40013800 	.word	0x40013800
 8003984:	40021000 	.word	0x40021000
 8003988:	40004400 	.word	0x40004400
 800398c:	40004800 	.word	0x40004800
 8003990:	40004c00 	.word	0x40004c00
 8003994:	007a1200 	.word	0x007a1200

08003998 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b082      	sub	sp, #8
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039a4:	2208      	movs	r2, #8
 80039a6:	4013      	ands	r3, r2
 80039a8:	d00b      	beq.n	80039c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	4a4a      	ldr	r2, [pc, #296]	@ (8003adc <UART_AdvFeatureConfig+0x144>)
 80039b2:	4013      	ands	r3, r2
 80039b4:	0019      	movs	r1, r3
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	430a      	orrs	r2, r1
 80039c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039c6:	2201      	movs	r2, #1
 80039c8:	4013      	ands	r3, r2
 80039ca:	d00b      	beq.n	80039e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	4a43      	ldr	r2, [pc, #268]	@ (8003ae0 <UART_AdvFeatureConfig+0x148>)
 80039d4:	4013      	ands	r3, r2
 80039d6:	0019      	movs	r1, r3
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	430a      	orrs	r2, r1
 80039e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039e8:	2202      	movs	r2, #2
 80039ea:	4013      	ands	r3, r2
 80039ec:	d00b      	beq.n	8003a06 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	4a3b      	ldr	r2, [pc, #236]	@ (8003ae4 <UART_AdvFeatureConfig+0x14c>)
 80039f6:	4013      	ands	r3, r2
 80039f8:	0019      	movs	r1, r3
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	430a      	orrs	r2, r1
 8003a04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a0a:	2204      	movs	r2, #4
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	d00b      	beq.n	8003a28 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	4a34      	ldr	r2, [pc, #208]	@ (8003ae8 <UART_AdvFeatureConfig+0x150>)
 8003a18:	4013      	ands	r3, r2
 8003a1a:	0019      	movs	r1, r3
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	430a      	orrs	r2, r1
 8003a26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a2c:	2210      	movs	r2, #16
 8003a2e:	4013      	ands	r3, r2
 8003a30:	d00b      	beq.n	8003a4a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	4a2c      	ldr	r2, [pc, #176]	@ (8003aec <UART_AdvFeatureConfig+0x154>)
 8003a3a:	4013      	ands	r3, r2
 8003a3c:	0019      	movs	r1, r3
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	430a      	orrs	r2, r1
 8003a48:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a4e:	2220      	movs	r2, #32
 8003a50:	4013      	ands	r3, r2
 8003a52:	d00b      	beq.n	8003a6c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	4a25      	ldr	r2, [pc, #148]	@ (8003af0 <UART_AdvFeatureConfig+0x158>)
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	0019      	movs	r1, r3
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	430a      	orrs	r2, r1
 8003a6a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a70:	2240      	movs	r2, #64	@ 0x40
 8003a72:	4013      	ands	r3, r2
 8003a74:	d01d      	beq.n	8003ab2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	4a1d      	ldr	r2, [pc, #116]	@ (8003af4 <UART_AdvFeatureConfig+0x15c>)
 8003a7e:	4013      	ands	r3, r2
 8003a80:	0019      	movs	r1, r3
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	430a      	orrs	r2, r1
 8003a8c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003a92:	2380      	movs	r3, #128	@ 0x80
 8003a94:	035b      	lsls	r3, r3, #13
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d10b      	bne.n	8003ab2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	4a15      	ldr	r2, [pc, #84]	@ (8003af8 <UART_AdvFeatureConfig+0x160>)
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	0019      	movs	r1, r3
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	430a      	orrs	r2, r1
 8003ab0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ab6:	2280      	movs	r2, #128	@ 0x80
 8003ab8:	4013      	ands	r3, r2
 8003aba:	d00b      	beq.n	8003ad4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	4a0e      	ldr	r2, [pc, #56]	@ (8003afc <UART_AdvFeatureConfig+0x164>)
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	0019      	movs	r1, r3
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	430a      	orrs	r2, r1
 8003ad2:	605a      	str	r2, [r3, #4]
  }
}
 8003ad4:	46c0      	nop			@ (mov r8, r8)
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	b002      	add	sp, #8
 8003ada:	bd80      	pop	{r7, pc}
 8003adc:	ffff7fff 	.word	0xffff7fff
 8003ae0:	fffdffff 	.word	0xfffdffff
 8003ae4:	fffeffff 	.word	0xfffeffff
 8003ae8:	fffbffff 	.word	0xfffbffff
 8003aec:	ffffefff 	.word	0xffffefff
 8003af0:	ffffdfff 	.word	0xffffdfff
 8003af4:	ffefffff 	.word	0xffefffff
 8003af8:	ff9fffff 	.word	0xff9fffff
 8003afc:	fff7ffff 	.word	0xfff7ffff

08003b00 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b092      	sub	sp, #72	@ 0x48
 8003b04:	af02      	add	r7, sp, #8
 8003b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2284      	movs	r2, #132	@ 0x84
 8003b0c:	2100      	movs	r1, #0
 8003b0e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003b10:	f7fd f886 	bl	8000c20 <HAL_GetTick>
 8003b14:	0003      	movs	r3, r0
 8003b16:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	2208      	movs	r2, #8
 8003b20:	4013      	ands	r3, r2
 8003b22:	2b08      	cmp	r3, #8
 8003b24:	d12c      	bne.n	8003b80 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b28:	2280      	movs	r2, #128	@ 0x80
 8003b2a:	0391      	lsls	r1, r2, #14
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	4a46      	ldr	r2, [pc, #280]	@ (8003c48 <UART_CheckIdleState+0x148>)
 8003b30:	9200      	str	r2, [sp, #0]
 8003b32:	2200      	movs	r2, #0
 8003b34:	f000 f88c 	bl	8003c50 <UART_WaitOnFlagUntilTimeout>
 8003b38:	1e03      	subs	r3, r0, #0
 8003b3a:	d021      	beq.n	8003b80 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b3c:	f3ef 8310 	mrs	r3, PRIMASK
 8003b40:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003b44:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003b46:	2301      	movs	r3, #1
 8003b48:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b4c:	f383 8810 	msr	PRIMASK, r3
}
 8003b50:	46c0      	nop			@ (mov r8, r8)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	2180      	movs	r1, #128	@ 0x80
 8003b5e:	438a      	bics	r2, r1
 8003b60:	601a      	str	r2, [r3, #0]
 8003b62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b64:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b68:	f383 8810 	msr	PRIMASK, r3
}
 8003b6c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2220      	movs	r2, #32
 8003b72:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2278      	movs	r2, #120	@ 0x78
 8003b78:	2100      	movs	r1, #0
 8003b7a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b7c:	2303      	movs	r3, #3
 8003b7e:	e05f      	b.n	8003c40 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	2204      	movs	r2, #4
 8003b88:	4013      	ands	r3, r2
 8003b8a:	2b04      	cmp	r3, #4
 8003b8c:	d146      	bne.n	8003c1c <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b90:	2280      	movs	r2, #128	@ 0x80
 8003b92:	03d1      	lsls	r1, r2, #15
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	4a2c      	ldr	r2, [pc, #176]	@ (8003c48 <UART_CheckIdleState+0x148>)
 8003b98:	9200      	str	r2, [sp, #0]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f000 f858 	bl	8003c50 <UART_WaitOnFlagUntilTimeout>
 8003ba0:	1e03      	subs	r3, r0, #0
 8003ba2:	d03b      	beq.n	8003c1c <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ba4:	f3ef 8310 	mrs	r3, PRIMASK
 8003ba8:	60fb      	str	r3, [r7, #12]
  return(result);
 8003baa:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bac:	637b      	str	r3, [r7, #52]	@ 0x34
 8003bae:	2301      	movs	r3, #1
 8003bb0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	f383 8810 	msr	PRIMASK, r3
}
 8003bb8:	46c0      	nop			@ (mov r8, r8)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4921      	ldr	r1, [pc, #132]	@ (8003c4c <UART_CheckIdleState+0x14c>)
 8003bc6:	400a      	ands	r2, r1
 8003bc8:	601a      	str	r2, [r3, #0]
 8003bca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bcc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	f383 8810 	msr	PRIMASK, r3
}
 8003bd4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bd6:	f3ef 8310 	mrs	r3, PRIMASK
 8003bda:	61bb      	str	r3, [r7, #24]
  return(result);
 8003bdc:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bde:	633b      	str	r3, [r7, #48]	@ 0x30
 8003be0:	2301      	movs	r3, #1
 8003be2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003be4:	69fb      	ldr	r3, [r7, #28]
 8003be6:	f383 8810 	msr	PRIMASK, r3
}
 8003bea:	46c0      	nop			@ (mov r8, r8)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	689a      	ldr	r2, [r3, #8]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	2101      	movs	r1, #1
 8003bf8:	438a      	bics	r2, r1
 8003bfa:	609a      	str	r2, [r3, #8]
 8003bfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bfe:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c00:	6a3b      	ldr	r3, [r7, #32]
 8003c02:	f383 8810 	msr	PRIMASK, r3
}
 8003c06:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2280      	movs	r2, #128	@ 0x80
 8003c0c:	2120      	movs	r1, #32
 8003c0e:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2278      	movs	r2, #120	@ 0x78
 8003c14:	2100      	movs	r1, #0
 8003c16:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c18:	2303      	movs	r3, #3
 8003c1a:	e011      	b.n	8003c40 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2220      	movs	r2, #32
 8003c20:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2280      	movs	r2, #128	@ 0x80
 8003c26:	2120      	movs	r1, #32
 8003c28:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2200      	movs	r2, #0
 8003c34:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2278      	movs	r2, #120	@ 0x78
 8003c3a:	2100      	movs	r1, #0
 8003c3c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003c3e:	2300      	movs	r3, #0
}
 8003c40:	0018      	movs	r0, r3
 8003c42:	46bd      	mov	sp, r7
 8003c44:	b010      	add	sp, #64	@ 0x40
 8003c46:	bd80      	pop	{r7, pc}
 8003c48:	01ffffff 	.word	0x01ffffff
 8003c4c:	fffffedf 	.word	0xfffffedf

08003c50 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b084      	sub	sp, #16
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	60f8      	str	r0, [r7, #12]
 8003c58:	60b9      	str	r1, [r7, #8]
 8003c5a:	603b      	str	r3, [r7, #0]
 8003c5c:	1dfb      	adds	r3, r7, #7
 8003c5e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c60:	e051      	b.n	8003d06 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c62:	69bb      	ldr	r3, [r7, #24]
 8003c64:	3301      	adds	r3, #1
 8003c66:	d04e      	beq.n	8003d06 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c68:	f7fc ffda 	bl	8000c20 <HAL_GetTick>
 8003c6c:	0002      	movs	r2, r0
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	69ba      	ldr	r2, [r7, #24]
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d302      	bcc.n	8003c7e <UART_WaitOnFlagUntilTimeout+0x2e>
 8003c78:	69bb      	ldr	r3, [r7, #24]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d101      	bne.n	8003c82 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	e051      	b.n	8003d26 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	2204      	movs	r2, #4
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	d03b      	beq.n	8003d06 <UART_WaitOnFlagUntilTimeout+0xb6>
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	2b80      	cmp	r3, #128	@ 0x80
 8003c92:	d038      	beq.n	8003d06 <UART_WaitOnFlagUntilTimeout+0xb6>
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	2b40      	cmp	r3, #64	@ 0x40
 8003c98:	d035      	beq.n	8003d06 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	69db      	ldr	r3, [r3, #28]
 8003ca0:	2208      	movs	r2, #8
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	2b08      	cmp	r3, #8
 8003ca6:	d111      	bne.n	8003ccc <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	2208      	movs	r2, #8
 8003cae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	0018      	movs	r0, r3
 8003cb4:	f000 f900 	bl	8003eb8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2284      	movs	r2, #132	@ 0x84
 8003cbc:	2108      	movs	r1, #8
 8003cbe:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2278      	movs	r2, #120	@ 0x78
 8003cc4:	2100      	movs	r1, #0
 8003cc6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	e02c      	b.n	8003d26 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	69da      	ldr	r2, [r3, #28]
 8003cd2:	2380      	movs	r3, #128	@ 0x80
 8003cd4:	011b      	lsls	r3, r3, #4
 8003cd6:	401a      	ands	r2, r3
 8003cd8:	2380      	movs	r3, #128	@ 0x80
 8003cda:	011b      	lsls	r3, r3, #4
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d112      	bne.n	8003d06 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	2280      	movs	r2, #128	@ 0x80
 8003ce6:	0112      	lsls	r2, r2, #4
 8003ce8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	0018      	movs	r0, r3
 8003cee:	f000 f8e3 	bl	8003eb8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2284      	movs	r2, #132	@ 0x84
 8003cf6:	2120      	movs	r1, #32
 8003cf8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2278      	movs	r2, #120	@ 0x78
 8003cfe:	2100      	movs	r1, #0
 8003d00:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003d02:	2303      	movs	r3, #3
 8003d04:	e00f      	b.n	8003d26 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	69db      	ldr	r3, [r3, #28]
 8003d0c:	68ba      	ldr	r2, [r7, #8]
 8003d0e:	4013      	ands	r3, r2
 8003d10:	68ba      	ldr	r2, [r7, #8]
 8003d12:	1ad3      	subs	r3, r2, r3
 8003d14:	425a      	negs	r2, r3
 8003d16:	4153      	adcs	r3, r2
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	001a      	movs	r2, r3
 8003d1c:	1dfb      	adds	r3, r7, #7
 8003d1e:	781b      	ldrb	r3, [r3, #0]
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d09e      	beq.n	8003c62 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d24:	2300      	movs	r3, #0
}
 8003d26:	0018      	movs	r0, r3
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	b004      	add	sp, #16
 8003d2c:	bd80      	pop	{r7, pc}
	...

08003d30 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b090      	sub	sp, #64	@ 0x40
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	60f8      	str	r0, [r7, #12]
 8003d38:	60b9      	str	r1, [r7, #8]
 8003d3a:	1dbb      	adds	r3, r7, #6
 8003d3c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	68ba      	ldr	r2, [r7, #8]
 8003d42:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	1dba      	adds	r2, r7, #6
 8003d48:	2158      	movs	r1, #88	@ 0x58
 8003d4a:	8812      	ldrh	r2, [r2, #0]
 8003d4c:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2284      	movs	r2, #132	@ 0x84
 8003d52:	2100      	movs	r1, #0
 8003d54:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2280      	movs	r2, #128	@ 0x80
 8003d5a:	2122      	movs	r1, #34	@ 0x22
 8003d5c:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d028      	beq.n	8003db8 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d6a:	4a3e      	ldr	r2, [pc, #248]	@ (8003e64 <UART_Start_Receive_DMA+0x134>)
 8003d6c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d72:	4a3d      	ldr	r2, [pc, #244]	@ (8003e68 <UART_Start_Receive_DMA+0x138>)
 8003d74:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d7a:	4a3c      	ldr	r2, [pc, #240]	@ (8003e6c <UART_Start_Receive_DMA+0x13c>)
 8003d7c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d82:	2200      	movs	r2, #0
 8003d84:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	3324      	adds	r3, #36	@ 0x24
 8003d90:	0019      	movs	r1, r3
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d96:	001a      	movs	r2, r3
 8003d98:	1dbb      	adds	r3, r7, #6
 8003d9a:	881b      	ldrh	r3, [r3, #0]
 8003d9c:	f7fd f870 	bl	8000e80 <HAL_DMA_Start_IT>
 8003da0:	1e03      	subs	r3, r0, #0
 8003da2:	d009      	beq.n	8003db8 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2284      	movs	r2, #132	@ 0x84
 8003da8:	2110      	movs	r1, #16
 8003daa:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2280      	movs	r2, #128	@ 0x80
 8003db0:	2120      	movs	r1, #32
 8003db2:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	e050      	b.n	8003e5a <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	691b      	ldr	r3, [r3, #16]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d019      	beq.n	8003df4 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003dc0:	f3ef 8310 	mrs	r3, PRIMASK
 8003dc4:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8003dc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003dc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003dca:	2301      	movs	r3, #1
 8003dcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dd0:	f383 8810 	msr	PRIMASK, r3
}
 8003dd4:	46c0      	nop			@ (mov r8, r8)
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	2180      	movs	r1, #128	@ 0x80
 8003de2:	0049      	lsls	r1, r1, #1
 8003de4:	430a      	orrs	r2, r1
 8003de6:	601a      	str	r2, [r3, #0]
 8003de8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003dea:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dee:	f383 8810 	msr	PRIMASK, r3
}
 8003df2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003df4:	f3ef 8310 	mrs	r3, PRIMASK
 8003df8:	613b      	str	r3, [r7, #16]
  return(result);
 8003dfa:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dfc:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003dfe:	2301      	movs	r3, #1
 8003e00:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	f383 8810 	msr	PRIMASK, r3
}
 8003e08:	46c0      	nop			@ (mov r8, r8)
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	689a      	ldr	r2, [r3, #8]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	2101      	movs	r1, #1
 8003e16:	430a      	orrs	r2, r1
 8003e18:	609a      	str	r2, [r3, #8]
 8003e1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e1c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e1e:	69bb      	ldr	r3, [r7, #24]
 8003e20:	f383 8810 	msr	PRIMASK, r3
}
 8003e24:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e26:	f3ef 8310 	mrs	r3, PRIMASK
 8003e2a:	61fb      	str	r3, [r7, #28]
  return(result);
 8003e2c:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e2e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e30:	2301      	movs	r3, #1
 8003e32:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e34:	6a3b      	ldr	r3, [r7, #32]
 8003e36:	f383 8810 	msr	PRIMASK, r3
}
 8003e3a:	46c0      	nop			@ (mov r8, r8)
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	689a      	ldr	r2, [r3, #8]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	2140      	movs	r1, #64	@ 0x40
 8003e48:	430a      	orrs	r2, r1
 8003e4a:	609a      	str	r2, [r3, #8]
 8003e4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e4e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e52:	f383 8810 	msr	PRIMASK, r3
}
 8003e56:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 8003e58:	2300      	movs	r3, #0
}
 8003e5a:	0018      	movs	r0, r3
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	b010      	add	sp, #64	@ 0x40
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	46c0      	nop			@ (mov r8, r8)
 8003e64:	08003f81 	.word	0x08003f81
 8003e68:	080040ad 	.word	0x080040ad
 8003e6c:	080040ef 	.word	0x080040ef

08003e70 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b086      	sub	sp, #24
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e78:	f3ef 8310 	mrs	r3, PRIMASK
 8003e7c:	60bb      	str	r3, [r7, #8]
  return(result);
 8003e7e:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003e80:	617b      	str	r3, [r7, #20]
 8003e82:	2301      	movs	r3, #1
 8003e84:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	f383 8810 	msr	PRIMASK, r3
}
 8003e8c:	46c0      	nop			@ (mov r8, r8)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	21c0      	movs	r1, #192	@ 0xc0
 8003e9a:	438a      	bics	r2, r1
 8003e9c:	601a      	str	r2, [r3, #0]
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	f383 8810 	msr	PRIMASK, r3
}
 8003ea8:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2220      	movs	r2, #32
 8003eae:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8003eb0:	46c0      	nop			@ (mov r8, r8)
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	b006      	add	sp, #24
 8003eb6:	bd80      	pop	{r7, pc}

08003eb8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b08e      	sub	sp, #56	@ 0x38
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ec0:	f3ef 8310 	mrs	r3, PRIMASK
 8003ec4:	617b      	str	r3, [r7, #20]
  return(result);
 8003ec6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ec8:	637b      	str	r3, [r7, #52]	@ 0x34
 8003eca:	2301      	movs	r3, #1
 8003ecc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ece:	69bb      	ldr	r3, [r7, #24]
 8003ed0:	f383 8810 	msr	PRIMASK, r3
}
 8003ed4:	46c0      	nop			@ (mov r8, r8)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4926      	ldr	r1, [pc, #152]	@ (8003f7c <UART_EndRxTransfer+0xc4>)
 8003ee2:	400a      	ands	r2, r1
 8003ee4:	601a      	str	r2, [r3, #0]
 8003ee6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ee8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003eea:	69fb      	ldr	r3, [r7, #28]
 8003eec:	f383 8810 	msr	PRIMASK, r3
}
 8003ef0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ef2:	f3ef 8310 	mrs	r3, PRIMASK
 8003ef6:	623b      	str	r3, [r7, #32]
  return(result);
 8003ef8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003efa:	633b      	str	r3, [r7, #48]	@ 0x30
 8003efc:	2301      	movs	r3, #1
 8003efe:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f02:	f383 8810 	msr	PRIMASK, r3
}
 8003f06:	46c0      	nop			@ (mov r8, r8)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	689a      	ldr	r2, [r3, #8]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	2101      	movs	r1, #1
 8003f14:	438a      	bics	r2, r1
 8003f16:	609a      	str	r2, [r3, #8]
 8003f18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f1e:	f383 8810 	msr	PRIMASK, r3
}
 8003f22:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d118      	bne.n	8003f5e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f2c:	f3ef 8310 	mrs	r3, PRIMASK
 8003f30:	60bb      	str	r3, [r7, #8]
  return(result);
 8003f32:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f34:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f36:	2301      	movs	r3, #1
 8003f38:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	f383 8810 	msr	PRIMASK, r3
}
 8003f40:	46c0      	nop			@ (mov r8, r8)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	2110      	movs	r1, #16
 8003f4e:	438a      	bics	r2, r1
 8003f50:	601a      	str	r2, [r3, #0]
 8003f52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f54:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	f383 8810 	msr	PRIMASK, r3
}
 8003f5c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2280      	movs	r2, #128	@ 0x80
 8003f62:	2120      	movs	r1, #32
 8003f64:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003f72:	46c0      	nop			@ (mov r8, r8)
 8003f74:	46bd      	mov	sp, r7
 8003f76:	b00e      	add	sp, #56	@ 0x38
 8003f78:	bd80      	pop	{r7, pc}
 8003f7a:	46c0      	nop			@ (mov r8, r8)
 8003f7c:	fffffedf 	.word	0xfffffedf

08003f80 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b094      	sub	sp, #80	@ 0x50
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f8c:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	699b      	ldr	r3, [r3, #24]
 8003f92:	2b20      	cmp	r3, #32
 8003f94:	d06f      	beq.n	8004076 <UART_DMAReceiveCplt+0xf6>
  {
    huart->RxXferCount = 0U;
 8003f96:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f98:	225a      	movs	r2, #90	@ 0x5a
 8003f9a:	2100      	movs	r1, #0
 8003f9c:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f9e:	f3ef 8310 	mrs	r3, PRIMASK
 8003fa2:	61bb      	str	r3, [r7, #24]
  return(result);
 8003fa4:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003fa6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003fa8:	2301      	movs	r3, #1
 8003faa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fac:	69fb      	ldr	r3, [r7, #28]
 8003fae:	f383 8810 	msr	PRIMASK, r3
}
 8003fb2:	46c0      	nop			@ (mov r8, r8)
 8003fb4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	493a      	ldr	r1, [pc, #232]	@ (80040a8 <UART_DMAReceiveCplt+0x128>)
 8003fc0:	400a      	ands	r2, r1
 8003fc2:	601a      	str	r2, [r3, #0]
 8003fc4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003fc6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fc8:	6a3b      	ldr	r3, [r7, #32]
 8003fca:	f383 8810 	msr	PRIMASK, r3
}
 8003fce:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fd0:	f3ef 8310 	mrs	r3, PRIMASK
 8003fd4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fd8:	647b      	str	r3, [r7, #68]	@ 0x44
 8003fda:	2301      	movs	r3, #1
 8003fdc:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fe0:	f383 8810 	msr	PRIMASK, r3
}
 8003fe4:	46c0      	nop			@ (mov r8, r8)
 8003fe6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	689a      	ldr	r2, [r3, #8]
 8003fec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	2101      	movs	r1, #1
 8003ff2:	438a      	bics	r2, r1
 8003ff4:	609a      	str	r2, [r3, #8]
 8003ff6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ff8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ffa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ffc:	f383 8810 	msr	PRIMASK, r3
}
 8004000:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004002:	f3ef 8310 	mrs	r3, PRIMASK
 8004006:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8004008:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800400a:	643b      	str	r3, [r7, #64]	@ 0x40
 800400c:	2301      	movs	r3, #1
 800400e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004010:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004012:	f383 8810 	msr	PRIMASK, r3
}
 8004016:	46c0      	nop			@ (mov r8, r8)
 8004018:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	689a      	ldr	r2, [r3, #8]
 800401e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	2140      	movs	r1, #64	@ 0x40
 8004024:	438a      	bics	r2, r1
 8004026:	609a      	str	r2, [r3, #8]
 8004028:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800402a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800402c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800402e:	f383 8810 	msr	PRIMASK, r3
}
 8004032:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004034:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004036:	2280      	movs	r2, #128	@ 0x80
 8004038:	2120      	movs	r1, #32
 800403a:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800403c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800403e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004040:	2b01      	cmp	r3, #1
 8004042:	d118      	bne.n	8004076 <UART_DMAReceiveCplt+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004044:	f3ef 8310 	mrs	r3, PRIMASK
 8004048:	60fb      	str	r3, [r7, #12]
  return(result);
 800404a:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800404c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800404e:	2301      	movs	r3, #1
 8004050:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	f383 8810 	msr	PRIMASK, r3
}
 8004058:	46c0      	nop			@ (mov r8, r8)
 800405a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	2110      	movs	r1, #16
 8004066:	438a      	bics	r2, r1
 8004068:	601a      	str	r2, [r3, #0]
 800406a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800406c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	f383 8810 	msr	PRIMASK, r3
}
 8004074:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004076:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004078:	2200      	movs	r2, #0
 800407a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800407c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800407e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004080:	2b01      	cmp	r3, #1
 8004082:	d108      	bne.n	8004096 <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004084:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004086:	2258      	movs	r2, #88	@ 0x58
 8004088:	5a9a      	ldrh	r2, [r3, r2]
 800408a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800408c:	0011      	movs	r1, r2
 800408e:	0018      	movs	r0, r3
 8004090:	f7ff faee 	bl	8003670 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004094:	e003      	b.n	800409e <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8004096:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004098:	0018      	movs	r0, r3
 800409a:	f7fc fb99 	bl	80007d0 <HAL_UART_RxCpltCallback>
}
 800409e:	46c0      	nop			@ (mov r8, r8)
 80040a0:	46bd      	mov	sp, r7
 80040a2:	b014      	add	sp, #80	@ 0x50
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	46c0      	nop			@ (mov r8, r8)
 80040a8:	fffffeff 	.word	0xfffffeff

080040ac <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b084      	sub	sp, #16
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040b8:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2201      	movs	r2, #1
 80040be:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d10a      	bne.n	80040de <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2258      	movs	r2, #88	@ 0x58
 80040cc:	5a9b      	ldrh	r3, [r3, r2]
 80040ce:	085b      	lsrs	r3, r3, #1
 80040d0:	b29a      	uxth	r2, r3
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	0011      	movs	r1, r2
 80040d6:	0018      	movs	r0, r3
 80040d8:	f7ff faca 	bl	8003670 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80040dc:	e003      	b.n	80040e6 <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	0018      	movs	r0, r3
 80040e2:	f7fc fba9 	bl	8000838 <HAL_UART_RxHalfCpltCallback>
}
 80040e6:	46c0      	nop			@ (mov r8, r8)
 80040e8:	46bd      	mov	sp, r7
 80040ea:	b004      	add	sp, #16
 80040ec:	bd80      	pop	{r7, pc}

080040ee <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80040ee:	b580      	push	{r7, lr}
 80040f0:	b086      	sub	sp, #24
 80040f2:	af00      	add	r7, sp, #0
 80040f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040fa:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004100:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	2280      	movs	r2, #128	@ 0x80
 8004106:	589b      	ldr	r3, [r3, r2]
 8004108:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	2280      	movs	r2, #128	@ 0x80
 8004112:	4013      	ands	r3, r2
 8004114:	2b80      	cmp	r3, #128	@ 0x80
 8004116:	d10a      	bne.n	800412e <UART_DMAError+0x40>
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	2b21      	cmp	r3, #33	@ 0x21
 800411c:	d107      	bne.n	800412e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	2252      	movs	r2, #82	@ 0x52
 8004122:	2100      	movs	r1, #0
 8004124:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	0018      	movs	r0, r3
 800412a:	f7ff fea1 	bl	8003e70 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	2240      	movs	r2, #64	@ 0x40
 8004136:	4013      	ands	r3, r2
 8004138:	2b40      	cmp	r3, #64	@ 0x40
 800413a:	d10a      	bne.n	8004152 <UART_DMAError+0x64>
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2b22      	cmp	r3, #34	@ 0x22
 8004140:	d107      	bne.n	8004152 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	225a      	movs	r2, #90	@ 0x5a
 8004146:	2100      	movs	r1, #0
 8004148:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	0018      	movs	r0, r3
 800414e:	f7ff feb3 	bl	8003eb8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	2284      	movs	r2, #132	@ 0x84
 8004156:	589b      	ldr	r3, [r3, r2]
 8004158:	2210      	movs	r2, #16
 800415a:	431a      	orrs	r2, r3
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	2184      	movs	r1, #132	@ 0x84
 8004160:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	0018      	movs	r0, r3
 8004166:	f7ff fa7b 	bl	8003660 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800416a:	46c0      	nop			@ (mov r8, r8)
 800416c:	46bd      	mov	sp, r7
 800416e:	b006      	add	sp, #24
 8004170:	bd80      	pop	{r7, pc}

08004172 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004172:	b580      	push	{r7, lr}
 8004174:	b084      	sub	sp, #16
 8004176:	af00      	add	r7, sp, #0
 8004178:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800417e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	225a      	movs	r2, #90	@ 0x5a
 8004184:	2100      	movs	r1, #0
 8004186:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2252      	movs	r2, #82	@ 0x52
 800418c:	2100      	movs	r1, #0
 800418e:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	0018      	movs	r0, r3
 8004194:	f7ff fa64 	bl	8003660 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004198:	46c0      	nop			@ (mov r8, r8)
 800419a:	46bd      	mov	sp, r7
 800419c:	b004      	add	sp, #16
 800419e:	bd80      	pop	{r7, pc}

080041a0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b086      	sub	sp, #24
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041a8:	f3ef 8310 	mrs	r3, PRIMASK
 80041ac:	60bb      	str	r3, [r7, #8]
  return(result);
 80041ae:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80041b0:	617b      	str	r3, [r7, #20]
 80041b2:	2301      	movs	r3, #1
 80041b4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	f383 8810 	msr	PRIMASK, r3
}
 80041bc:	46c0      	nop			@ (mov r8, r8)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	2140      	movs	r1, #64	@ 0x40
 80041ca:	438a      	bics	r2, r1
 80041cc:	601a      	str	r2, [r3, #0]
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	f383 8810 	msr	PRIMASK, r3
}
 80041d8:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2220      	movs	r2, #32
 80041de:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2200      	movs	r2, #0
 80041e4:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	0018      	movs	r0, r3
 80041ea:	f7fc fb0b 	bl	8000804 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80041ee:	46c0      	nop			@ (mov r8, r8)
 80041f0:	46bd      	mov	sp, r7
 80041f2:	b006      	add	sp, #24
 80041f4:	bd80      	pop	{r7, pc}

080041f6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80041f6:	b580      	push	{r7, lr}
 80041f8:	b082      	sub	sp, #8
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80041fe:	46c0      	nop			@ (mov r8, r8)
 8004200:	46bd      	mov	sp, r7
 8004202:	b002      	add	sp, #8
 8004204:	bd80      	pop	{r7, pc}

08004206 <memset>:
 8004206:	0003      	movs	r3, r0
 8004208:	1882      	adds	r2, r0, r2
 800420a:	4293      	cmp	r3, r2
 800420c:	d100      	bne.n	8004210 <memset+0xa>
 800420e:	4770      	bx	lr
 8004210:	7019      	strb	r1, [r3, #0]
 8004212:	3301      	adds	r3, #1
 8004214:	e7f9      	b.n	800420a <memset+0x4>
	...

08004218 <__libc_init_array>:
 8004218:	b570      	push	{r4, r5, r6, lr}
 800421a:	2600      	movs	r6, #0
 800421c:	4c0c      	ldr	r4, [pc, #48]	@ (8004250 <__libc_init_array+0x38>)
 800421e:	4d0d      	ldr	r5, [pc, #52]	@ (8004254 <__libc_init_array+0x3c>)
 8004220:	1b64      	subs	r4, r4, r5
 8004222:	10a4      	asrs	r4, r4, #2
 8004224:	42a6      	cmp	r6, r4
 8004226:	d109      	bne.n	800423c <__libc_init_array+0x24>
 8004228:	2600      	movs	r6, #0
 800422a:	f000 f823 	bl	8004274 <_init>
 800422e:	4c0a      	ldr	r4, [pc, #40]	@ (8004258 <__libc_init_array+0x40>)
 8004230:	4d0a      	ldr	r5, [pc, #40]	@ (800425c <__libc_init_array+0x44>)
 8004232:	1b64      	subs	r4, r4, r5
 8004234:	10a4      	asrs	r4, r4, #2
 8004236:	42a6      	cmp	r6, r4
 8004238:	d105      	bne.n	8004246 <__libc_init_array+0x2e>
 800423a:	bd70      	pop	{r4, r5, r6, pc}
 800423c:	00b3      	lsls	r3, r6, #2
 800423e:	58eb      	ldr	r3, [r5, r3]
 8004240:	4798      	blx	r3
 8004242:	3601      	adds	r6, #1
 8004244:	e7ee      	b.n	8004224 <__libc_init_array+0xc>
 8004246:	00b3      	lsls	r3, r6, #2
 8004248:	58eb      	ldr	r3, [r5, r3]
 800424a:	4798      	blx	r3
 800424c:	3601      	adds	r6, #1
 800424e:	e7f2      	b.n	8004236 <__libc_init_array+0x1e>
 8004250:	080042c4 	.word	0x080042c4
 8004254:	080042c4 	.word	0x080042c4
 8004258:	080042c8 	.word	0x080042c8
 800425c:	080042c4 	.word	0x080042c4

08004260 <memcpy>:
 8004260:	2300      	movs	r3, #0
 8004262:	b510      	push	{r4, lr}
 8004264:	429a      	cmp	r2, r3
 8004266:	d100      	bne.n	800426a <memcpy+0xa>
 8004268:	bd10      	pop	{r4, pc}
 800426a:	5ccc      	ldrb	r4, [r1, r3]
 800426c:	54c4      	strb	r4, [r0, r3]
 800426e:	3301      	adds	r3, #1
 8004270:	e7f8      	b.n	8004264 <memcpy+0x4>
	...

08004274 <_init>:
 8004274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004276:	46c0      	nop			@ (mov r8, r8)
 8004278:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800427a:	bc08      	pop	{r3}
 800427c:	469e      	mov	lr, r3
 800427e:	4770      	bx	lr

08004280 <_fini>:
 8004280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004282:	46c0      	nop			@ (mov r8, r8)
 8004284:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004286:	bc08      	pop	{r3}
 8004288:	469e      	mov	lr, r3
 800428a:	4770      	bx	lr
