
uart_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004648  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08004708  08004708  00005708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004740  08004740  00006010  2**0
                  CONTENTS
  4 .ARM          00000000  08004740  08004740  00006010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004740  08004740  00006010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004740  08004740  00005740  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004744  08004744  00005744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08004748  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000bd0  20000010  08004758  00006010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000be0  08004758  00006be0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e28e  00000000  00000000  00006038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002485  00000000  00000000  000142c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d30  00000000  00000000  00016750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a51  00000000  00000000  00017480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a6e6  00000000  00000000  00017ed1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000116f1  00000000  00000000  000325b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098cd7  00000000  00000000  00043ca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dc97f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e80  00000000  00000000  000dc9c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000047  00000000  00000000  000df844  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080046f0 	.word	0x080046f0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	080046f0 	.word	0x080046f0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000226:	4b0c      	ldr	r3, [pc, #48]	@ (8000258 <MX_DMA_Init+0x38>)
 8000228:	695a      	ldr	r2, [r3, #20]
 800022a:	4b0b      	ldr	r3, [pc, #44]	@ (8000258 <MX_DMA_Init+0x38>)
 800022c:	2101      	movs	r1, #1
 800022e:	430a      	orrs	r2, r1
 8000230:	615a      	str	r2, [r3, #20]
 8000232:	4b09      	ldr	r3, [pc, #36]	@ (8000258 <MX_DMA_Init+0x38>)
 8000234:	695b      	ldr	r3, [r3, #20]
 8000236:	2201      	movs	r2, #1
 8000238:	4013      	ands	r3, r2
 800023a:	607b      	str	r3, [r7, #4]
 800023c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800023e:	2200      	movs	r2, #0
 8000240:	2100      	movs	r1, #0
 8000242:	200a      	movs	r0, #10
 8000244:	f000 fe5c 	bl	8000f00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000248:	200a      	movs	r0, #10
 800024a:	f000 fe6e 	bl	8000f2a <HAL_NVIC_EnableIRQ>

}
 800024e:	46c0      	nop			@ (mov r8, r8)
 8000250:	46bd      	mov	sp, r7
 8000252:	b002      	add	sp, #8
 8000254:	bd80      	pop	{r7, pc}
 8000256:	46c0      	nop			@ (mov r8, r8)
 8000258:	40021000 	.word	0x40021000

0800025c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800025c:	b590      	push	{r4, r7, lr}
 800025e:	b089      	sub	sp, #36	@ 0x24
 8000260:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000262:	240c      	movs	r4, #12
 8000264:	193b      	adds	r3, r7, r4
 8000266:	0018      	movs	r0, r3
 8000268:	2314      	movs	r3, #20
 800026a:	001a      	movs	r2, r3
 800026c:	2100      	movs	r1, #0
 800026e:	f004 fa08 	bl	8004682 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000272:	4b2a      	ldr	r3, [pc, #168]	@ (800031c <MX_GPIO_Init+0xc0>)
 8000274:	695a      	ldr	r2, [r3, #20]
 8000276:	4b29      	ldr	r3, [pc, #164]	@ (800031c <MX_GPIO_Init+0xc0>)
 8000278:	2180      	movs	r1, #128	@ 0x80
 800027a:	0289      	lsls	r1, r1, #10
 800027c:	430a      	orrs	r2, r1
 800027e:	615a      	str	r2, [r3, #20]
 8000280:	4b26      	ldr	r3, [pc, #152]	@ (800031c <MX_GPIO_Init+0xc0>)
 8000282:	695a      	ldr	r2, [r3, #20]
 8000284:	2380      	movs	r3, #128	@ 0x80
 8000286:	029b      	lsls	r3, r3, #10
 8000288:	4013      	ands	r3, r2
 800028a:	60bb      	str	r3, [r7, #8]
 800028c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800028e:	4b23      	ldr	r3, [pc, #140]	@ (800031c <MX_GPIO_Init+0xc0>)
 8000290:	695a      	ldr	r2, [r3, #20]
 8000292:	4b22      	ldr	r3, [pc, #136]	@ (800031c <MX_GPIO_Init+0xc0>)
 8000294:	2180      	movs	r1, #128	@ 0x80
 8000296:	0309      	lsls	r1, r1, #12
 8000298:	430a      	orrs	r2, r1
 800029a:	615a      	str	r2, [r3, #20]
 800029c:	4b1f      	ldr	r3, [pc, #124]	@ (800031c <MX_GPIO_Init+0xc0>)
 800029e:	695a      	ldr	r2, [r3, #20]
 80002a0:	2380      	movs	r3, #128	@ 0x80
 80002a2:	031b      	lsls	r3, r3, #12
 80002a4:	4013      	ands	r3, r2
 80002a6:	607b      	str	r3, [r7, #4]
 80002a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_RESET);
 80002aa:	2380      	movs	r3, #128	@ 0x80
 80002ac:	009b      	lsls	r3, r3, #2
 80002ae:	481c      	ldr	r0, [pc, #112]	@ (8000320 <MX_GPIO_Init+0xc4>)
 80002b0:	2200      	movs	r2, #0
 80002b2:	0019      	movs	r1, r3
 80002b4:	f001 f9ee 	bl	8001694 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80002b8:	193b      	adds	r3, r7, r4
 80002ba:	2201      	movs	r2, #1
 80002bc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80002be:	193b      	adds	r3, r7, r4
 80002c0:	2288      	movs	r2, #136	@ 0x88
 80002c2:	0352      	lsls	r2, r2, #13
 80002c4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002c6:	193b      	adds	r3, r7, r4
 80002c8:	2200      	movs	r2, #0
 80002ca:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002cc:	193a      	adds	r2, r7, r4
 80002ce:	2390      	movs	r3, #144	@ 0x90
 80002d0:	05db      	lsls	r3, r3, #23
 80002d2:	0011      	movs	r1, r2
 80002d4:	0018      	movs	r0, r3
 80002d6:	f001 f865 	bl	80013a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD5_Pin;
 80002da:	0021      	movs	r1, r4
 80002dc:	187b      	adds	r3, r7, r1
 80002de:	2280      	movs	r2, #128	@ 0x80
 80002e0:	0092      	lsls	r2, r2, #2
 80002e2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002e4:	187b      	adds	r3, r7, r1
 80002e6:	2201      	movs	r2, #1
 80002e8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002ea:	187b      	adds	r3, r7, r1
 80002ec:	2200      	movs	r2, #0
 80002ee:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002f0:	187b      	adds	r3, r7, r1
 80002f2:	2200      	movs	r2, #0
 80002f4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD5_GPIO_Port, &GPIO_InitStruct);
 80002f6:	187b      	adds	r3, r7, r1
 80002f8:	4a09      	ldr	r2, [pc, #36]	@ (8000320 <MX_GPIO_Init+0xc4>)
 80002fa:	0019      	movs	r1, r3
 80002fc:	0010      	movs	r0, r2
 80002fe:	f001 f851 	bl	80013a4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8000302:	2200      	movs	r2, #0
 8000304:	2100      	movs	r1, #0
 8000306:	2005      	movs	r0, #5
 8000308:	f000 fdfa 	bl	8000f00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 800030c:	2005      	movs	r0, #5
 800030e:	f000 fe0c 	bl	8000f2a <HAL_NVIC_EnableIRQ>

}
 8000312:	46c0      	nop			@ (mov r8, r8)
 8000314:	46bd      	mov	sp, r7
 8000316:	b009      	add	sp, #36	@ 0x24
 8000318:	bd90      	pop	{r4, r7, pc}
 800031a:	46c0      	nop			@ (mov r8, r8)
 800031c:	40021000 	.word	0x40021000
 8000320:	48000800 	.word	0x48000800

08000324 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000324:	b580      	push	{r7, lr}
 8000326:	b082      	sub	sp, #8
 8000328:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN 1 */
	uint8_t counter = 0;
 800032a:	1dfb      	adds	r3, r7, #7
 800032c:	2200      	movs	r2, #0
 800032e:	701a      	strb	r2, [r3, #0]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000330:	f000 fcb2 	bl	8000c98 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000334:	f000 f862 	bl	80003fc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000338:	f7ff ff90 	bl	800025c <MX_GPIO_Init>
	MX_DMA_Init();
 800033c:	f7ff ff70 	bl	8000220 <MX_DMA_Init>
	MX_TIM16_Init();
 8000340:	f000 f9b8 	bl	80006b4 <MX_TIM16_Init>
	MX_TIM3_Init();
 8000344:	f000 f936 	bl	80005b4 <MX_TIM3_Init>
	MX_USART1_UART_Init();
 8000348:	f000 fabe 	bl	80008c8 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */

	memset(start_buff, '1', START_BUFF_SIZE / 4);
 800034c:	2380      	movs	r3, #128	@ 0x80
 800034e:	005a      	lsls	r2, r3, #1
 8000350:	4b22      	ldr	r3, [pc, #136]	@ (80003dc <main+0xb8>)
 8000352:	2131      	movs	r1, #49	@ 0x31
 8000354:	0018      	movs	r0, r3
 8000356:	f004 f994 	bl	8004682 <memset>
	memset(start_buff + 256, '2', START_BUFF_SIZE / 4);
 800035a:	4b21      	ldr	r3, [pc, #132]	@ (80003e0 <main+0xbc>)
 800035c:	2280      	movs	r2, #128	@ 0x80
 800035e:	0052      	lsls	r2, r2, #1
 8000360:	2132      	movs	r1, #50	@ 0x32
 8000362:	0018      	movs	r0, r3
 8000364:	f004 f98d 	bl	8004682 <memset>
	memset(start_buff + 512, '3', START_BUFF_SIZE / 4);
 8000368:	4b1e      	ldr	r3, [pc, #120]	@ (80003e4 <main+0xc0>)
 800036a:	2280      	movs	r2, #128	@ 0x80
 800036c:	0052      	lsls	r2, r2, #1
 800036e:	2133      	movs	r1, #51	@ 0x33
 8000370:	0018      	movs	r0, r3
 8000372:	f004 f986 	bl	8004682 <memset>
	memset(start_buff + 768, '4', START_BUFF_SIZE / 4);
 8000376:	4b1c      	ldr	r3, [pc, #112]	@ (80003e8 <main+0xc4>)
 8000378:	2280      	movs	r2, #128	@ 0x80
 800037a:	0052      	lsls	r2, r2, #1
 800037c:	2134      	movs	r1, #52	@ 0x34
 800037e:	0018      	movs	r0, r3
 8000380:	f004 f97f 	bl	8004682 <memset>

	transmit_data_to_uart_dma(start_buff, START_BUFF_SIZE, tx_dma,
 8000384:	2380      	movs	r3, #128	@ 0x80
 8000386:	005b      	lsls	r3, r3, #1
 8000388:	4a18      	ldr	r2, [pc, #96]	@ (80003ec <main+0xc8>)
 800038a:	2180      	movs	r1, #128	@ 0x80
 800038c:	00c9      	lsls	r1, r1, #3
 800038e:	4813      	ldr	r0, [pc, #76]	@ (80003dc <main+0xb8>)
 8000390:	f000 fbf0 	bl	8000b74 <transmit_data_to_uart_dma>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8000394:	2380      	movs	r3, #128	@ 0x80
 8000396:	009b      	lsls	r3, r3, #2
 8000398:	4815      	ldr	r0, [pc, #84]	@ (80003f0 <main+0xcc>)
 800039a:	2201      	movs	r2, #1
 800039c:	0019      	movs	r1, r3
 800039e:	f001 f979 	bl	8001694 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 80003a2:	2064      	movs	r0, #100	@ 0x64
 80003a4:	f000 fcdc 	bl	8000d60 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 80003a8:	2380      	movs	r3, #128	@ 0x80
 80003aa:	009b      	lsls	r3, r3, #2
 80003ac:	4810      	ldr	r0, [pc, #64]	@ (80003f0 <main+0xcc>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	0019      	movs	r1, r3
 80003b2:	f001 f96f 	bl	8001694 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 80003b6:	2064      	movs	r0, #100	@ 0x64
 80003b8:	f000 fcd2 	bl	8000d60 <HAL_Delay>

		receive_data_from_uart_dma(rx_dma, RX_DMA_SIZE, final_buff,
 80003bc:	2380      	movs	r3, #128	@ 0x80
 80003be:	00db      	lsls	r3, r3, #3
 80003c0:	4a0c      	ldr	r2, [pc, #48]	@ (80003f4 <main+0xd0>)
 80003c2:	2180      	movs	r1, #128	@ 0x80
 80003c4:	0049      	lsls	r1, r1, #1
 80003c6:	480c      	ldr	r0, [pc, #48]	@ (80003f8 <main+0xd4>)
 80003c8:	f000 fb58 	bl	8000a7c <receive_data_from_uart_dma>
		FINAL_BUFF_SIZE);
		counter++;
 80003cc:	1dfb      	adds	r3, r7, #7
 80003ce:	781a      	ldrb	r2, [r3, #0]
 80003d0:	1dfb      	adds	r3, r7, #7
 80003d2:	3201      	adds	r2, #1
 80003d4:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 80003d6:	46c0      	nop			@ (mov r8, r8)
 80003d8:	e7dc      	b.n	8000394 <main+0x70>
 80003da:	46c0      	nop			@ (mov r8, r8)
 80003dc:	2000062c 	.word	0x2000062c
 80003e0:	2000072c 	.word	0x2000072c
 80003e4:	2000082c 	.word	0x2000082c
 80003e8:	2000092c 	.word	0x2000092c
 80003ec:	2000012c 	.word	0x2000012c
 80003f0:	48000800 	.word	0x48000800
 80003f4:	2000022c 	.word	0x2000022c
 80003f8:	2000002c 	.word	0x2000002c

080003fc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80003fc:	b590      	push	{r4, r7, lr}
 80003fe:	b099      	sub	sp, #100	@ 0x64
 8000400:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000402:	242c      	movs	r4, #44	@ 0x2c
 8000404:	193b      	adds	r3, r7, r4
 8000406:	0018      	movs	r0, r3
 8000408:	2334      	movs	r3, #52	@ 0x34
 800040a:	001a      	movs	r2, r3
 800040c:	2100      	movs	r1, #0
 800040e:	f004 f938 	bl	8004682 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000412:	231c      	movs	r3, #28
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	0018      	movs	r0, r3
 8000418:	2310      	movs	r3, #16
 800041a:	001a      	movs	r2, r3
 800041c:	2100      	movs	r1, #0
 800041e:	f004 f930 	bl	8004682 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8000422:	003b      	movs	r3, r7
 8000424:	0018      	movs	r0, r3
 8000426:	231c      	movs	r3, #28
 8000428:	001a      	movs	r2, r3
 800042a:	2100      	movs	r1, #0
 800042c:	f004 f929 	bl	8004682 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 8000430:	193b      	adds	r3, r7, r4
 8000432:	2220      	movs	r2, #32
 8000434:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000436:	193b      	adds	r3, r7, r4
 8000438:	2201      	movs	r2, #1
 800043a:	621a      	str	r2, [r3, #32]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800043c:	193b      	adds	r3, r7, r4
 800043e:	2200      	movs	r2, #0
 8000440:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000442:	193b      	adds	r3, r7, r4
 8000444:	0018      	movs	r0, r3
 8000446:	f001 f969 	bl	800171c <HAL_RCC_OscConfig>
 800044a:	1e03      	subs	r3, r0, #0
 800044c:	d001      	beq.n	8000452 <SystemClock_Config+0x56>
		Error_Handler();
 800044e:	f000 f828 	bl	80004a2 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000452:	211c      	movs	r1, #28
 8000454:	187b      	adds	r3, r7, r1
 8000456:	2207      	movs	r2, #7
 8000458:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 800045a:	187b      	adds	r3, r7, r1
 800045c:	2203      	movs	r2, #3
 800045e:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000460:	187b      	adds	r3, r7, r1
 8000462:	2200      	movs	r2, #0
 8000464:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000466:	187b      	adds	r3, r7, r1
 8000468:	2200      	movs	r2, #0
 800046a:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 800046c:	187b      	adds	r3, r7, r1
 800046e:	2101      	movs	r1, #1
 8000470:	0018      	movs	r0, r3
 8000472:	f001 fcd9 	bl	8001e28 <HAL_RCC_ClockConfig>
 8000476:	1e03      	subs	r3, r0, #0
 8000478:	d001      	beq.n	800047e <SystemClock_Config+0x82>
		Error_Handler();
 800047a:	f000 f812 	bl	80004a2 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800047e:	003b      	movs	r3, r7
 8000480:	2201      	movs	r2, #1
 8000482:	601a      	str	r2, [r3, #0]
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000484:	003b      	movs	r3, r7
 8000486:	2200      	movs	r2, #0
 8000488:	609a      	str	r2, [r3, #8]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 800048a:	003b      	movs	r3, r7
 800048c:	0018      	movs	r0, r3
 800048e:	f001 fe37 	bl	8002100 <HAL_RCCEx_PeriphCLKConfig>
 8000492:	1e03      	subs	r3, r0, #0
 8000494:	d001      	beq.n	800049a <SystemClock_Config+0x9e>
		Error_Handler();
 8000496:	f000 f804 	bl	80004a2 <Error_Handler>
	}
}
 800049a:	46c0      	nop			@ (mov r8, r8)
 800049c:	46bd      	mov	sp, r7
 800049e:	b019      	add	sp, #100	@ 0x64
 80004a0:	bd90      	pop	{r4, r7, pc}

080004a2 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80004a2:	b580      	push	{r7, lr}
 80004a4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004a6:	b672      	cpsid	i
}
 80004a8:	46c0      	nop			@ (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80004aa:	46c0      	nop			@ (mov r8, r8)
 80004ac:	e7fd      	b.n	80004aa <Error_Handler+0x8>
	...

080004b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b082      	sub	sp, #8
 80004b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004b6:	4b0f      	ldr	r3, [pc, #60]	@ (80004f4 <HAL_MspInit+0x44>)
 80004b8:	699a      	ldr	r2, [r3, #24]
 80004ba:	4b0e      	ldr	r3, [pc, #56]	@ (80004f4 <HAL_MspInit+0x44>)
 80004bc:	2101      	movs	r1, #1
 80004be:	430a      	orrs	r2, r1
 80004c0:	619a      	str	r2, [r3, #24]
 80004c2:	4b0c      	ldr	r3, [pc, #48]	@ (80004f4 <HAL_MspInit+0x44>)
 80004c4:	699b      	ldr	r3, [r3, #24]
 80004c6:	2201      	movs	r2, #1
 80004c8:	4013      	ands	r3, r2
 80004ca:	607b      	str	r3, [r7, #4]
 80004cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004ce:	4b09      	ldr	r3, [pc, #36]	@ (80004f4 <HAL_MspInit+0x44>)
 80004d0:	69da      	ldr	r2, [r3, #28]
 80004d2:	4b08      	ldr	r3, [pc, #32]	@ (80004f4 <HAL_MspInit+0x44>)
 80004d4:	2180      	movs	r1, #128	@ 0x80
 80004d6:	0549      	lsls	r1, r1, #21
 80004d8:	430a      	orrs	r2, r1
 80004da:	61da      	str	r2, [r3, #28]
 80004dc:	4b05      	ldr	r3, [pc, #20]	@ (80004f4 <HAL_MspInit+0x44>)
 80004de:	69da      	ldr	r2, [r3, #28]
 80004e0:	2380      	movs	r3, #128	@ 0x80
 80004e2:	055b      	lsls	r3, r3, #21
 80004e4:	4013      	ands	r3, r2
 80004e6:	603b      	str	r3, [r7, #0]
 80004e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004ea:	46c0      	nop			@ (mov r8, r8)
 80004ec:	46bd      	mov	sp, r7
 80004ee:	b002      	add	sp, #8
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	46c0      	nop			@ (mov r8, r8)
 80004f4:	40021000 	.word	0x40021000

080004f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80004fc:	46c0      	nop			@ (mov r8, r8)
 80004fe:	e7fd      	b.n	80004fc <NMI_Handler+0x4>

08000500 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000504:	46c0      	nop			@ (mov r8, r8)
 8000506:	e7fd      	b.n	8000504 <HardFault_Handler+0x4>

08000508 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800050c:	46c0      	nop			@ (mov r8, r8)
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}

08000512 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000512:	b580      	push	{r7, lr}
 8000514:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000516:	46c0      	nop			@ (mov r8, r8)
 8000518:	46bd      	mov	sp, r7
 800051a:	bd80      	pop	{r7, pc}

0800051c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000520:	f000 fc02 	bl	8000d28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000524:	46c0      	nop			@ (mov r8, r8)
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}

0800052a <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 800052a:	b580      	push	{r7, lr}
 800052c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800052e:	2001      	movs	r0, #1
 8000530:	f001 f8ce 	bl	80016d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8000534:	46c0      	nop			@ (mov r8, r8)
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}
	...

0800053c <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000540:	4b05      	ldr	r3, [pc, #20]	@ (8000558 <DMA1_Channel2_3_IRQHandler+0x1c>)
 8000542:	0018      	movs	r0, r3
 8000544:	f000 fe39 	bl	80011ba <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000548:	4b04      	ldr	r3, [pc, #16]	@ (800055c <DMA1_Channel2_3_IRQHandler+0x20>)
 800054a:	0018      	movs	r0, r3
 800054c:	f000 fe35 	bl	80011ba <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8000550:	46c0      	nop			@ (mov r8, r8)
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}
 8000556:	46c0      	nop			@ (mov r8, r8)
 8000558:	20000b90 	.word	0x20000b90
 800055c:	20000b4c 	.word	0x20000b4c

08000560 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000564:	4b03      	ldr	r3, [pc, #12]	@ (8000574 <TIM3_IRQHandler+0x14>)
 8000566:	0018      	movs	r0, r3
 8000568:	f001 ff70 	bl	800244c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800056c:	46c0      	nop			@ (mov r8, r8)
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}
 8000572:	46c0      	nop			@ (mov r8, r8)
 8000574:	20000a2c 	.word	0x20000a2c

08000578 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 800057c:	4b03      	ldr	r3, [pc, #12]	@ (800058c <TIM16_IRQHandler+0x14>)
 800057e:	0018      	movs	r0, r3
 8000580:	f001 ff64 	bl	800244c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8000584:	46c0      	nop			@ (mov r8, r8)
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}
 800058a:	46c0      	nop			@ (mov r8, r8)
 800058c:	20000a74 	.word	0x20000a74

08000590 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000594:	4b03      	ldr	r3, [pc, #12]	@ (80005a4 <USART1_IRQHandler+0x14>)
 8000596:	0018      	movs	r0, r3
 8000598:	f002 ff66 	bl	8003468 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800059c:	46c0      	nop			@ (mov r8, r8)
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	46c0      	nop			@ (mov r8, r8)
 80005a4:	20000ac4 	.word	0x20000ac4

080005a8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80005ac:	46c0      	nop			@ (mov r8, r8)
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
	...

080005b4 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim16;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b08e      	sub	sp, #56	@ 0x38
 80005b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005ba:	2328      	movs	r3, #40	@ 0x28
 80005bc:	18fb      	adds	r3, r7, r3
 80005be:	0018      	movs	r0, r3
 80005c0:	2310      	movs	r3, #16
 80005c2:	001a      	movs	r2, r3
 80005c4:	2100      	movs	r1, #0
 80005c6:	f004 f85c 	bl	8004682 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005ca:	2320      	movs	r3, #32
 80005cc:	18fb      	adds	r3, r7, r3
 80005ce:	0018      	movs	r0, r3
 80005d0:	2308      	movs	r3, #8
 80005d2:	001a      	movs	r2, r3
 80005d4:	2100      	movs	r1, #0
 80005d6:	f004 f854 	bl	8004682 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005da:	1d3b      	adds	r3, r7, #4
 80005dc:	0018      	movs	r0, r3
 80005de:	231c      	movs	r3, #28
 80005e0:	001a      	movs	r2, r3
 80005e2:	2100      	movs	r1, #0
 80005e4:	f004 f84d 	bl	8004682 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80005e8:	4b2f      	ldr	r3, [pc, #188]	@ (80006a8 <MX_TIM3_Init+0xf4>)
 80005ea:	4a30      	ldr	r2, [pc, #192]	@ (80006ac <MX_TIM3_Init+0xf8>)
 80005ec:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 199;
 80005ee:	4b2e      	ldr	r3, [pc, #184]	@ (80006a8 <MX_TIM3_Init+0xf4>)
 80005f0:	22c7      	movs	r2, #199	@ 0xc7
 80005f2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005f4:	4b2c      	ldr	r3, [pc, #176]	@ (80006a8 <MX_TIM3_Init+0xf4>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80005fa:	4b2b      	ldr	r3, [pc, #172]	@ (80006a8 <MX_TIM3_Init+0xf4>)
 80005fc:	4a2c      	ldr	r2, [pc, #176]	@ (80006b0 <MX_TIM3_Init+0xfc>)
 80005fe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000600:	4b29      	ldr	r3, [pc, #164]	@ (80006a8 <MX_TIM3_Init+0xf4>)
 8000602:	2200      	movs	r2, #0
 8000604:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000606:	4b28      	ldr	r3, [pc, #160]	@ (80006a8 <MX_TIM3_Init+0xf4>)
 8000608:	2200      	movs	r2, #0
 800060a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800060c:	4b26      	ldr	r3, [pc, #152]	@ (80006a8 <MX_TIM3_Init+0xf4>)
 800060e:	0018      	movs	r0, r3
 8000610:	f001 fe74 	bl	80022fc <HAL_TIM_Base_Init>
 8000614:	1e03      	subs	r3, r0, #0
 8000616:	d001      	beq.n	800061c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000618:	f7ff ff43 	bl	80004a2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800061c:	2128      	movs	r1, #40	@ 0x28
 800061e:	187b      	adds	r3, r7, r1
 8000620:	2280      	movs	r2, #128	@ 0x80
 8000622:	0152      	lsls	r2, r2, #5
 8000624:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000626:	187a      	adds	r2, r7, r1
 8000628:	4b1f      	ldr	r3, [pc, #124]	@ (80006a8 <MX_TIM3_Init+0xf4>)
 800062a:	0011      	movs	r1, r2
 800062c:	0018      	movs	r0, r3
 800062e:	f002 f8c1 	bl	80027b4 <HAL_TIM_ConfigClockSource>
 8000632:	1e03      	subs	r3, r0, #0
 8000634:	d001      	beq.n	800063a <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8000636:	f7ff ff34 	bl	80004a2 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800063a:	4b1b      	ldr	r3, [pc, #108]	@ (80006a8 <MX_TIM3_Init+0xf4>)
 800063c:	0018      	movs	r0, r3
 800063e:	f001 fead 	bl	800239c <HAL_TIM_PWM_Init>
 8000642:	1e03      	subs	r3, r0, #0
 8000644:	d001      	beq.n	800064a <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000646:	f7ff ff2c 	bl	80004a2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800064a:	2120      	movs	r1, #32
 800064c:	187b      	adds	r3, r7, r1
 800064e:	2200      	movs	r2, #0
 8000650:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000652:	187b      	adds	r3, r7, r1
 8000654:	2200      	movs	r2, #0
 8000656:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000658:	187a      	adds	r2, r7, r1
 800065a:	4b13      	ldr	r3, [pc, #76]	@ (80006a8 <MX_TIM3_Init+0xf4>)
 800065c:	0011      	movs	r1, r2
 800065e:	0018      	movs	r0, r3
 8000660:	f002 fcc8 	bl	8002ff4 <HAL_TIMEx_MasterConfigSynchronization>
 8000664:	1e03      	subs	r3, r0, #0
 8000666:	d001      	beq.n	800066c <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8000668:	f7ff ff1b 	bl	80004a2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800066c:	1d3b      	adds	r3, r7, #4
 800066e:	2260      	movs	r2, #96	@ 0x60
 8000670:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000672:	1d3b      	adds	r3, r7, #4
 8000674:	2200      	movs	r2, #0
 8000676:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000678:	1d3b      	adds	r3, r7, #4
 800067a:	2200      	movs	r2, #0
 800067c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800067e:	1d3b      	adds	r3, r7, #4
 8000680:	2200      	movs	r2, #0
 8000682:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000684:	1d39      	adds	r1, r7, #4
 8000686:	4b08      	ldr	r3, [pc, #32]	@ (80006a8 <MX_TIM3_Init+0xf4>)
 8000688:	2208      	movs	r2, #8
 800068a:	0018      	movs	r0, r3
 800068c:	f001 ffcc 	bl	8002628 <HAL_TIM_PWM_ConfigChannel>
 8000690:	1e03      	subs	r3, r0, #0
 8000692:	d001      	beq.n	8000698 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 8000694:	f7ff ff05 	bl	80004a2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000698:	4b03      	ldr	r3, [pc, #12]	@ (80006a8 <MX_TIM3_Init+0xf4>)
 800069a:	0018      	movs	r0, r3
 800069c:	f000 f878 	bl	8000790 <HAL_TIM_MspPostInit>

}
 80006a0:	46c0      	nop			@ (mov r8, r8)
 80006a2:	46bd      	mov	sp, r7
 80006a4:	b00e      	add	sp, #56	@ 0x38
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	20000a2c 	.word	0x20000a2c
 80006ac:	40000400 	.word	0x40000400
 80006b0:	000003e7 	.word	0x000003e7

080006b4 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80006b8:	4b0f      	ldr	r3, [pc, #60]	@ (80006f8 <MX_TIM16_Init+0x44>)
 80006ba:	4a10      	ldr	r2, [pc, #64]	@ (80006fc <MX_TIM16_Init+0x48>)
 80006bc:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 47999;
 80006be:	4b0e      	ldr	r3, [pc, #56]	@ (80006f8 <MX_TIM16_Init+0x44>)
 80006c0:	4a0f      	ldr	r2, [pc, #60]	@ (8000700 <MX_TIM16_Init+0x4c>)
 80006c2:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006c4:	4b0c      	ldr	r3, [pc, #48]	@ (80006f8 <MX_TIM16_Init+0x44>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 999;
 80006ca:	4b0b      	ldr	r3, [pc, #44]	@ (80006f8 <MX_TIM16_Init+0x44>)
 80006cc:	4a0d      	ldr	r2, [pc, #52]	@ (8000704 <MX_TIM16_Init+0x50>)
 80006ce:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006d0:	4b09      	ldr	r3, [pc, #36]	@ (80006f8 <MX_TIM16_Init+0x44>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 1;
 80006d6:	4b08      	ldr	r3, [pc, #32]	@ (80006f8 <MX_TIM16_Init+0x44>)
 80006d8:	2201      	movs	r2, #1
 80006da:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006dc:	4b06      	ldr	r3, [pc, #24]	@ (80006f8 <MX_TIM16_Init+0x44>)
 80006de:	2200      	movs	r2, #0
 80006e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80006e2:	4b05      	ldr	r3, [pc, #20]	@ (80006f8 <MX_TIM16_Init+0x44>)
 80006e4:	0018      	movs	r0, r3
 80006e6:	f001 fe09 	bl	80022fc <HAL_TIM_Base_Init>
 80006ea:	1e03      	subs	r3, r0, #0
 80006ec:	d001      	beq.n	80006f2 <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 80006ee:	f7ff fed8 	bl	80004a2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80006f2:	46c0      	nop			@ (mov r8, r8)
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	20000a74 	.word	0x20000a74
 80006fc:	40014400 	.word	0x40014400
 8000700:	0000bb7f 	.word	0x0000bb7f
 8000704:	000003e7 	.word	0x000003e7

08000708 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b084      	sub	sp, #16
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a1b      	ldr	r2, [pc, #108]	@ (8000784 <HAL_TIM_Base_MspInit+0x7c>)
 8000716:	4293      	cmp	r3, r2
 8000718:	d114      	bne.n	8000744 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800071a:	4b1b      	ldr	r3, [pc, #108]	@ (8000788 <HAL_TIM_Base_MspInit+0x80>)
 800071c:	69da      	ldr	r2, [r3, #28]
 800071e:	4b1a      	ldr	r3, [pc, #104]	@ (8000788 <HAL_TIM_Base_MspInit+0x80>)
 8000720:	2102      	movs	r1, #2
 8000722:	430a      	orrs	r2, r1
 8000724:	61da      	str	r2, [r3, #28]
 8000726:	4b18      	ldr	r3, [pc, #96]	@ (8000788 <HAL_TIM_Base_MspInit+0x80>)
 8000728:	69db      	ldr	r3, [r3, #28]
 800072a:	2202      	movs	r2, #2
 800072c:	4013      	ands	r3, r2
 800072e:	60fb      	str	r3, [r7, #12]
 8000730:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000732:	2200      	movs	r2, #0
 8000734:	2100      	movs	r1, #0
 8000736:	2010      	movs	r0, #16
 8000738:	f000 fbe2 	bl	8000f00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800073c:	2010      	movs	r0, #16
 800073e:	f000 fbf4 	bl	8000f2a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8000742:	e01a      	b.n	800077a <HAL_TIM_Base_MspInit+0x72>
  else if(tim_baseHandle->Instance==TIM16)
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a10      	ldr	r2, [pc, #64]	@ (800078c <HAL_TIM_Base_MspInit+0x84>)
 800074a:	4293      	cmp	r3, r2
 800074c:	d115      	bne.n	800077a <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800074e:	4b0e      	ldr	r3, [pc, #56]	@ (8000788 <HAL_TIM_Base_MspInit+0x80>)
 8000750:	699a      	ldr	r2, [r3, #24]
 8000752:	4b0d      	ldr	r3, [pc, #52]	@ (8000788 <HAL_TIM_Base_MspInit+0x80>)
 8000754:	2180      	movs	r1, #128	@ 0x80
 8000756:	0289      	lsls	r1, r1, #10
 8000758:	430a      	orrs	r2, r1
 800075a:	619a      	str	r2, [r3, #24]
 800075c:	4b0a      	ldr	r3, [pc, #40]	@ (8000788 <HAL_TIM_Base_MspInit+0x80>)
 800075e:	699a      	ldr	r2, [r3, #24]
 8000760:	2380      	movs	r3, #128	@ 0x80
 8000762:	029b      	lsls	r3, r3, #10
 8000764:	4013      	ands	r3, r2
 8000766:	60bb      	str	r3, [r7, #8]
 8000768:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 800076a:	2200      	movs	r2, #0
 800076c:	2100      	movs	r1, #0
 800076e:	2015      	movs	r0, #21
 8000770:	f000 fbc6 	bl	8000f00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8000774:	2015      	movs	r0, #21
 8000776:	f000 fbd8 	bl	8000f2a <HAL_NVIC_EnableIRQ>
}
 800077a:	46c0      	nop			@ (mov r8, r8)
 800077c:	46bd      	mov	sp, r7
 800077e:	b004      	add	sp, #16
 8000780:	bd80      	pop	{r7, pc}
 8000782:	46c0      	nop			@ (mov r8, r8)
 8000784:	40000400 	.word	0x40000400
 8000788:	40021000 	.word	0x40021000
 800078c:	40014400 	.word	0x40014400

08000790 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000790:	b590      	push	{r4, r7, lr}
 8000792:	b089      	sub	sp, #36	@ 0x24
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000798:	240c      	movs	r4, #12
 800079a:	193b      	adds	r3, r7, r4
 800079c:	0018      	movs	r0, r3
 800079e:	2314      	movs	r3, #20
 80007a0:	001a      	movs	r2, r3
 80007a2:	2100      	movs	r1, #0
 80007a4:	f003 ff6d 	bl	8004682 <memset>
  if(timHandle->Instance==TIM3)
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4a15      	ldr	r2, [pc, #84]	@ (8000804 <HAL_TIM_MspPostInit+0x74>)
 80007ae:	4293      	cmp	r3, r2
 80007b0:	d124      	bne.n	80007fc <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80007b2:	4b15      	ldr	r3, [pc, #84]	@ (8000808 <HAL_TIM_MspPostInit+0x78>)
 80007b4:	695a      	ldr	r2, [r3, #20]
 80007b6:	4b14      	ldr	r3, [pc, #80]	@ (8000808 <HAL_TIM_MspPostInit+0x78>)
 80007b8:	2180      	movs	r1, #128	@ 0x80
 80007ba:	0309      	lsls	r1, r1, #12
 80007bc:	430a      	orrs	r2, r1
 80007be:	615a      	str	r2, [r3, #20]
 80007c0:	4b11      	ldr	r3, [pc, #68]	@ (8000808 <HAL_TIM_MspPostInit+0x78>)
 80007c2:	695a      	ldr	r2, [r3, #20]
 80007c4:	2380      	movs	r3, #128	@ 0x80
 80007c6:	031b      	lsls	r3, r3, #12
 80007c8:	4013      	ands	r3, r2
 80007ca:	60bb      	str	r3, [r7, #8]
 80007cc:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80007ce:	193b      	adds	r3, r7, r4
 80007d0:	2280      	movs	r2, #128	@ 0x80
 80007d2:	0052      	lsls	r2, r2, #1
 80007d4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d6:	0021      	movs	r1, r4
 80007d8:	187b      	adds	r3, r7, r1
 80007da:	2202      	movs	r2, #2
 80007dc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007de:	187b      	adds	r3, r7, r1
 80007e0:	2200      	movs	r2, #0
 80007e2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e4:	187b      	adds	r3, r7, r1
 80007e6:	2200      	movs	r2, #0
 80007e8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_TIM3;
 80007ea:	187b      	adds	r3, r7, r1
 80007ec:	2200      	movs	r2, #0
 80007ee:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007f0:	187b      	adds	r3, r7, r1
 80007f2:	4a06      	ldr	r2, [pc, #24]	@ (800080c <HAL_TIM_MspPostInit+0x7c>)
 80007f4:	0019      	movs	r1, r3
 80007f6:	0010      	movs	r0, r2
 80007f8:	f000 fdd4 	bl	80013a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80007fc:	46c0      	nop			@ (mov r8, r8)
 80007fe:	46bd      	mov	sp, r7
 8000800:	b009      	add	sp, #36	@ 0x24
 8000802:	bd90      	pop	{r4, r7, pc}
 8000804:	40000400 	.word	0x40000400
 8000808:	40021000 	.word	0x40021000
 800080c:	48000800 	.word	0x48000800

08000810 <HAL_UART_RxCpltCallback>:
/* USER CODE BEGIN 0 */
uint8_t uart1_rx_cnt = 0; // Receive buffer count

volatile bool is_data_ready_to_be_read = false;
volatile bool is_rx_full_completed = false;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4a06      	ldr	r2, [pc, #24]	@ (8000838 <HAL_UART_RxCpltCallback+0x28>)
 800081e:	4293      	cmp	r3, r2
 8000820:	d105      	bne.n	800082e <HAL_UART_RxCpltCallback+0x1e>
		is_data_ready_to_be_read = true;
 8000822:	4b06      	ldr	r3, [pc, #24]	@ (800083c <HAL_UART_RxCpltCallback+0x2c>)
 8000824:	2201      	movs	r2, #1
 8000826:	701a      	strb	r2, [r3, #0]
		is_rx_full_completed = true;
 8000828:	4b05      	ldr	r3, [pc, #20]	@ (8000840 <HAL_UART_RxCpltCallback+0x30>)
 800082a:	2201      	movs	r2, #1
 800082c:	701a      	strb	r2, [r3, #0]
	}
}
 800082e:	46c0      	nop			@ (mov r8, r8)
 8000830:	46bd      	mov	sp, r7
 8000832:	b002      	add	sp, #8
 8000834:	bd80      	pop	{r7, pc}
 8000836:	46c0      	nop			@ (mov r8, r8)
 8000838:	40013800 	.word	0x40013800
 800083c:	20000abc 	.word	0x20000abc
 8000840:	20000abd 	.word	0x20000abd

08000844 <HAL_UART_TxCpltCallback>:

volatile bool is_tx_completed = false;
volatile bool is_tx_full_completed = false;
/* Регистр TXE пуст */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a06      	ldr	r2, [pc, #24]	@ (800086c <HAL_UART_TxCpltCallback+0x28>)
 8000852:	4293      	cmp	r3, r2
 8000854:	d105      	bne.n	8000862 <HAL_UART_TxCpltCallback+0x1e>
		is_tx_completed = true;
 8000856:	4b06      	ldr	r3, [pc, #24]	@ (8000870 <HAL_UART_TxCpltCallback+0x2c>)
 8000858:	2201      	movs	r2, #1
 800085a:	701a      	strb	r2, [r3, #0]
		is_tx_full_completed = true;
 800085c:	4b05      	ldr	r3, [pc, #20]	@ (8000874 <HAL_UART_TxCpltCallback+0x30>)
 800085e:	2201      	movs	r2, #1
 8000860:	701a      	strb	r2, [r3, #0]
	}
}
 8000862:	46c0      	nop			@ (mov r8, r8)
 8000864:	46bd      	mov	sp, r7
 8000866:	b002      	add	sp, #8
 8000868:	bd80      	pop	{r7, pc}
 800086a:	46c0      	nop			@ (mov r8, r8)
 800086c:	40013800 	.word	0x40013800
 8000870:	20000abe 	.word	0x20000abe
 8000874:	20000abf 	.word	0x20000abf

08000878 <HAL_UART_RxHalfCpltCallback>:

volatile bool is_rx_half_completed = false;
void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart) {
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4a04      	ldr	r2, [pc, #16]	@ (8000898 <HAL_UART_RxHalfCpltCallback+0x20>)
 8000886:	4293      	cmp	r3, r2
 8000888:	d102      	bne.n	8000890 <HAL_UART_RxHalfCpltCallback+0x18>
		is_rx_half_completed = true;
 800088a:	4b04      	ldr	r3, [pc, #16]	@ (800089c <HAL_UART_RxHalfCpltCallback+0x24>)
 800088c:	2201      	movs	r2, #1
 800088e:	701a      	strb	r2, [r3, #0]
	}
}
 8000890:	46c0      	nop			@ (mov r8, r8)
 8000892:	46bd      	mov	sp, r7
 8000894:	b002      	add	sp, #8
 8000896:	bd80      	pop	{r7, pc}
 8000898:	40013800 	.word	0x40013800
 800089c:	20000ac0 	.word	0x20000ac0

080008a0 <HAL_UART_TxHalfCpltCallback>:

volatile bool is_tx_half_completed = true;
void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart) {
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a04      	ldr	r2, [pc, #16]	@ (80008c0 <HAL_UART_TxHalfCpltCallback+0x20>)
 80008ae:	4293      	cmp	r3, r2
 80008b0:	d102      	bne.n	80008b8 <HAL_UART_TxHalfCpltCallback+0x18>
		is_tx_half_completed = true;
 80008b2:	4b04      	ldr	r3, [pc, #16]	@ (80008c4 <HAL_UART_TxHalfCpltCallback+0x24>)
 80008b4:	2201      	movs	r2, #1
 80008b6:	701a      	strb	r2, [r3, #0]
	}
}
 80008b8:	46c0      	nop			@ (mov r8, r8)
 80008ba:	46bd      	mov	sp, r7
 80008bc:	b002      	add	sp, #8
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	40013800 	.word	0x40013800
 80008c4:	20000004 	.word	0x20000004

080008c8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void) {
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80008cc:	4b14      	ldr	r3, [pc, #80]	@ (8000920 <MX_USART1_UART_Init+0x58>)
 80008ce:	4a15      	ldr	r2, [pc, #84]	@ (8000924 <MX_USART1_UART_Init+0x5c>)
 80008d0:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 80008d2:	4b13      	ldr	r3, [pc, #76]	@ (8000920 <MX_USART1_UART_Init+0x58>)
 80008d4:	2296      	movs	r2, #150	@ 0x96
 80008d6:	0192      	lsls	r2, r2, #6
 80008d8:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008da:	4b11      	ldr	r3, [pc, #68]	@ (8000920 <MX_USART1_UART_Init+0x58>)
 80008dc:	2200      	movs	r2, #0
 80008de:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80008e0:	4b0f      	ldr	r3, [pc, #60]	@ (8000920 <MX_USART1_UART_Init+0x58>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80008e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000920 <MX_USART1_UART_Init+0x58>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80008ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000920 <MX_USART1_UART_Init+0x58>)
 80008ee:	220c      	movs	r2, #12
 80008f0:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008f2:	4b0b      	ldr	r3, [pc, #44]	@ (8000920 <MX_USART1_UART_Init+0x58>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008f8:	4b09      	ldr	r3, [pc, #36]	@ (8000920 <MX_USART1_UART_Init+0x58>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008fe:	4b08      	ldr	r3, [pc, #32]	@ (8000920 <MX_USART1_UART_Init+0x58>)
 8000900:	2200      	movs	r2, #0
 8000902:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000904:	4b06      	ldr	r3, [pc, #24]	@ (8000920 <MX_USART1_UART_Init+0x58>)
 8000906:	2200      	movs	r2, #0
 8000908:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 800090a:	4b05      	ldr	r3, [pc, #20]	@ (8000920 <MX_USART1_UART_Init+0x58>)
 800090c:	0018      	movs	r0, r3
 800090e:	f002 fbdf 	bl	80030d0 <HAL_UART_Init>
 8000912:	1e03      	subs	r3, r0, #0
 8000914:	d001      	beq.n	800091a <MX_USART1_UART_Init+0x52>
		Error_Handler();
 8000916:	f7ff fdc4 	bl	80004a2 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 800091a:	46c0      	nop			@ (mov r8, r8)
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	20000ac4 	.word	0x20000ac4
 8000924:	40013800 	.word	0x40013800

08000928 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *uartHandle) {
 8000928:	b590      	push	{r4, r7, lr}
 800092a:	b08b      	sub	sp, #44	@ 0x2c
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000930:	2414      	movs	r4, #20
 8000932:	193b      	adds	r3, r7, r4
 8000934:	0018      	movs	r0, r3
 8000936:	2314      	movs	r3, #20
 8000938:	001a      	movs	r2, r3
 800093a:	2100      	movs	r1, #0
 800093c:	f003 fea1 	bl	8004682 <memset>
	if (uartHandle->Instance == USART1) {
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a47      	ldr	r2, [pc, #284]	@ (8000a64 <HAL_UART_MspInit+0x13c>)
 8000946:	4293      	cmp	r3, r2
 8000948:	d000      	beq.n	800094c <HAL_UART_MspInit+0x24>
 800094a:	e087      	b.n	8000a5c <HAL_UART_MspInit+0x134>
		/* USER CODE BEGIN USART1_MspInit 0 */

		/* USER CODE END USART1_MspInit 0 */
		/* USART1 clock enable */
		__HAL_RCC_USART1_CLK_ENABLE();
 800094c:	4b46      	ldr	r3, [pc, #280]	@ (8000a68 <HAL_UART_MspInit+0x140>)
 800094e:	699a      	ldr	r2, [r3, #24]
 8000950:	4b45      	ldr	r3, [pc, #276]	@ (8000a68 <HAL_UART_MspInit+0x140>)
 8000952:	2180      	movs	r1, #128	@ 0x80
 8000954:	01c9      	lsls	r1, r1, #7
 8000956:	430a      	orrs	r2, r1
 8000958:	619a      	str	r2, [r3, #24]
 800095a:	4b43      	ldr	r3, [pc, #268]	@ (8000a68 <HAL_UART_MspInit+0x140>)
 800095c:	699a      	ldr	r2, [r3, #24]
 800095e:	2380      	movs	r3, #128	@ 0x80
 8000960:	01db      	lsls	r3, r3, #7
 8000962:	4013      	ands	r3, r2
 8000964:	613b      	str	r3, [r7, #16]
 8000966:	693b      	ldr	r3, [r7, #16]

		__HAL_RCC_GPIOA_CLK_ENABLE();
 8000968:	4b3f      	ldr	r3, [pc, #252]	@ (8000a68 <HAL_UART_MspInit+0x140>)
 800096a:	695a      	ldr	r2, [r3, #20]
 800096c:	4b3e      	ldr	r3, [pc, #248]	@ (8000a68 <HAL_UART_MspInit+0x140>)
 800096e:	2180      	movs	r1, #128	@ 0x80
 8000970:	0289      	lsls	r1, r1, #10
 8000972:	430a      	orrs	r2, r1
 8000974:	615a      	str	r2, [r3, #20]
 8000976:	4b3c      	ldr	r3, [pc, #240]	@ (8000a68 <HAL_UART_MspInit+0x140>)
 8000978:	695a      	ldr	r2, [r3, #20]
 800097a:	2380      	movs	r3, #128	@ 0x80
 800097c:	029b      	lsls	r3, r3, #10
 800097e:	4013      	ands	r3, r2
 8000980:	60fb      	str	r3, [r7, #12]
 8000982:	68fb      	ldr	r3, [r7, #12]
		/**USART1 GPIO Configuration
		 PA9     ------> USART1_TX
		 PA10     ------> USART1_RX
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_9 | GPIO_PIN_10;
 8000984:	193b      	adds	r3, r7, r4
 8000986:	22c0      	movs	r2, #192	@ 0xc0
 8000988:	00d2      	lsls	r2, r2, #3
 800098a:	601a      	str	r2, [r3, #0]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098c:	0021      	movs	r1, r4
 800098e:	187b      	adds	r3, r7, r1
 8000990:	2202      	movs	r2, #2
 8000992:	605a      	str	r2, [r3, #4]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000994:	187b      	adds	r3, r7, r1
 8000996:	2200      	movs	r2, #0
 8000998:	609a      	str	r2, [r3, #8]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800099a:	187b      	adds	r3, r7, r1
 800099c:	2203      	movs	r2, #3
 800099e:	60da      	str	r2, [r3, #12]
		GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80009a0:	187b      	adds	r3, r7, r1
 80009a2:	2201      	movs	r2, #1
 80009a4:	611a      	str	r2, [r3, #16]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a6:	187a      	adds	r2, r7, r1
 80009a8:	2390      	movs	r3, #144	@ 0x90
 80009aa:	05db      	lsls	r3, r3, #23
 80009ac:	0011      	movs	r1, r2
 80009ae:	0018      	movs	r0, r3
 80009b0:	f000 fcf8 	bl	80013a4 <HAL_GPIO_Init>

		/* USART1 DMA Init */
		/* USART1_RX Init */
		hdma_usart1_rx.Instance = DMA1_Channel3;
 80009b4:	4b2d      	ldr	r3, [pc, #180]	@ (8000a6c <HAL_UART_MspInit+0x144>)
 80009b6:	4a2e      	ldr	r2, [pc, #184]	@ (8000a70 <HAL_UART_MspInit+0x148>)
 80009b8:	601a      	str	r2, [r3, #0]
		hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009ba:	4b2c      	ldr	r3, [pc, #176]	@ (8000a6c <HAL_UART_MspInit+0x144>)
 80009bc:	2200      	movs	r2, #0
 80009be:	605a      	str	r2, [r3, #4]
		hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009c0:	4b2a      	ldr	r3, [pc, #168]	@ (8000a6c <HAL_UART_MspInit+0x144>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	609a      	str	r2, [r3, #8]
		hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80009c6:	4b29      	ldr	r3, [pc, #164]	@ (8000a6c <HAL_UART_MspInit+0x144>)
 80009c8:	2280      	movs	r2, #128	@ 0x80
 80009ca:	60da      	str	r2, [r3, #12]
		hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80009cc:	4b27      	ldr	r3, [pc, #156]	@ (8000a6c <HAL_UART_MspInit+0x144>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	611a      	str	r2, [r3, #16]
		hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80009d2:	4b26      	ldr	r3, [pc, #152]	@ (8000a6c <HAL_UART_MspInit+0x144>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	615a      	str	r2, [r3, #20]
		hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80009d8:	4b24      	ldr	r3, [pc, #144]	@ (8000a6c <HAL_UART_MspInit+0x144>)
 80009da:	2220      	movs	r2, #32
 80009dc:	619a      	str	r2, [r3, #24]
		hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80009de:	4b23      	ldr	r3, [pc, #140]	@ (8000a6c <HAL_UART_MspInit+0x144>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	61da      	str	r2, [r3, #28]
		if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK) {
 80009e4:	4b21      	ldr	r3, [pc, #132]	@ (8000a6c <HAL_UART_MspInit+0x144>)
 80009e6:	0018      	movs	r0, r3
 80009e8:	f000 fabc 	bl	8000f64 <HAL_DMA_Init>
 80009ec:	1e03      	subs	r3, r0, #0
 80009ee:	d001      	beq.n	80009f4 <HAL_UART_MspInit+0xcc>
			Error_Handler();
 80009f0:	f7ff fd57 	bl	80004a2 <Error_Handler>
		}

		__HAL_LINKDMA(uartHandle, hdmarx, hdma_usart1_rx);
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	4a1d      	ldr	r2, [pc, #116]	@ (8000a6c <HAL_UART_MspInit+0x144>)
 80009f8:	675a      	str	r2, [r3, #116]	@ 0x74
 80009fa:	4b1c      	ldr	r3, [pc, #112]	@ (8000a6c <HAL_UART_MspInit+0x144>)
 80009fc:	687a      	ldr	r2, [r7, #4]
 80009fe:	625a      	str	r2, [r3, #36]	@ 0x24

		/* USART1_TX Init */
		hdma_usart1_tx.Instance = DMA1_Channel2;
 8000a00:	4b1c      	ldr	r3, [pc, #112]	@ (8000a74 <HAL_UART_MspInit+0x14c>)
 8000a02:	4a1d      	ldr	r2, [pc, #116]	@ (8000a78 <HAL_UART_MspInit+0x150>)
 8000a04:	601a      	str	r2, [r3, #0]
		hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a06:	4b1b      	ldr	r3, [pc, #108]	@ (8000a74 <HAL_UART_MspInit+0x14c>)
 8000a08:	2210      	movs	r2, #16
 8000a0a:	605a      	str	r2, [r3, #4]
		hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a0c:	4b19      	ldr	r3, [pc, #100]	@ (8000a74 <HAL_UART_MspInit+0x14c>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	609a      	str	r2, [r3, #8]
		hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000a12:	4b18      	ldr	r3, [pc, #96]	@ (8000a74 <HAL_UART_MspInit+0x14c>)
 8000a14:	2280      	movs	r2, #128	@ 0x80
 8000a16:	60da      	str	r2, [r3, #12]
		hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a18:	4b16      	ldr	r3, [pc, #88]	@ (8000a74 <HAL_UART_MspInit+0x14c>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	611a      	str	r2, [r3, #16]
		hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a1e:	4b15      	ldr	r3, [pc, #84]	@ (8000a74 <HAL_UART_MspInit+0x14c>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	615a      	str	r2, [r3, #20]
		hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 8000a24:	4b13      	ldr	r3, [pc, #76]	@ (8000a74 <HAL_UART_MspInit+0x14c>)
 8000a26:	2220      	movs	r2, #32
 8000a28:	619a      	str	r2, [r3, #24]
		hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000a2a:	4b12      	ldr	r3, [pc, #72]	@ (8000a74 <HAL_UART_MspInit+0x14c>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	61da      	str	r2, [r3, #28]
		if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK) {
 8000a30:	4b10      	ldr	r3, [pc, #64]	@ (8000a74 <HAL_UART_MspInit+0x14c>)
 8000a32:	0018      	movs	r0, r3
 8000a34:	f000 fa96 	bl	8000f64 <HAL_DMA_Init>
 8000a38:	1e03      	subs	r3, r0, #0
 8000a3a:	d001      	beq.n	8000a40 <HAL_UART_MspInit+0x118>
			Error_Handler();
 8000a3c:	f7ff fd31 	bl	80004a2 <Error_Handler>
		}

		__HAL_LINKDMA(uartHandle, hdmatx, hdma_usart1_tx);
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	4a0c      	ldr	r2, [pc, #48]	@ (8000a74 <HAL_UART_MspInit+0x14c>)
 8000a44:	671a      	str	r2, [r3, #112]	@ 0x70
 8000a46:	4b0b      	ldr	r3, [pc, #44]	@ (8000a74 <HAL_UART_MspInit+0x14c>)
 8000a48:	687a      	ldr	r2, [r7, #4]
 8000a4a:	625a      	str	r2, [r3, #36]	@ 0x24

		/* USART1 interrupt Init */
		HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	2100      	movs	r1, #0
 8000a50:	201b      	movs	r0, #27
 8000a52:	f000 fa55 	bl	8000f00 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000a56:	201b      	movs	r0, #27
 8000a58:	f000 fa67 	bl	8000f2a <HAL_NVIC_EnableIRQ>
		/* USER CODE BEGIN USART1_MspInit 1 */

		/* USER CODE END USART1_MspInit 1 */
	}
}
 8000a5c:	46c0      	nop			@ (mov r8, r8)
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	b00b      	add	sp, #44	@ 0x2c
 8000a62:	bd90      	pop	{r4, r7, pc}
 8000a64:	40013800 	.word	0x40013800
 8000a68:	40021000 	.word	0x40021000
 8000a6c:	20000b4c 	.word	0x20000b4c
 8000a70:	40020030 	.word	0x40020030
 8000a74:	20000b90 	.word	0x20000b90
 8000a78:	4002001c 	.word	0x4002001c

08000a7c <receive_data_from_uart_dma>:

}

uint32_t index_byte = 0;
void receive_data_from_uart_dma(char *rx_buff, uint16_t rx_buff_len,
		char *final_buff, uint16_t final_buff_len) {
 8000a7c:	b5b0      	push	{r4, r5, r7, lr}
 8000a7e:	b086      	sub	sp, #24
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	60f8      	str	r0, [r7, #12]
 8000a84:	0008      	movs	r0, r1
 8000a86:	607a      	str	r2, [r7, #4]
 8000a88:	0019      	movs	r1, r3
 8000a8a:	250a      	movs	r5, #10
 8000a8c:	197b      	adds	r3, r7, r5
 8000a8e:	1c02      	adds	r2, r0, #0
 8000a90:	801a      	strh	r2, [r3, #0]
 8000a92:	2008      	movs	r0, #8
 8000a94:	183b      	adds	r3, r7, r0
 8000a96:	1c0a      	adds	r2, r1, #0
 8000a98:	801a      	strh	r2, [r3, #0]

	uint16_t rx_half_len = rx_buff_len / 2;
 8000a9a:	2416      	movs	r4, #22
 8000a9c:	193b      	adds	r3, r7, r4
 8000a9e:	197a      	adds	r2, r7, r5
 8000aa0:	8812      	ldrh	r2, [r2, #0]
 8000aa2:	0852      	lsrs	r2, r2, #1
 8000aa4:	801a      	strh	r2, [r3, #0]
	index_byte = 0;
 8000aa6:	4b2f      	ldr	r3, [pc, #188]	@ (8000b64 <receive_data_from_uart_dma+0xe8>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	601a      	str	r2, [r3, #0]
	memset(final_buff, '\0', final_buff_len);
 8000aac:	183b      	adds	r3, r7, r0
 8000aae:	881a      	ldrh	r2, [r3, #0]
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	0018      	movs	r0, r3
 8000ab6:	f003 fde4 	bl	8004682 <memset>

	HAL_UART_Receive_DMA(&huart1, (uint8_t*) rx_buff, rx_buff_len);
 8000aba:	197b      	adds	r3, r7, r5
 8000abc:	881a      	ldrh	r2, [r3, #0]
 8000abe:	68f9      	ldr	r1, [r7, #12]
 8000ac0:	4b29      	ldr	r3, [pc, #164]	@ (8000b68 <receive_data_from_uart_dma+0xec>)
 8000ac2:	0018      	movs	r0, r3
 8000ac4:	f002 fbe8 	bl	8003298 <HAL_UART_Receive_DMA>

	if (is_rx_half_completed) {
 8000ac8:	4b28      	ldr	r3, [pc, #160]	@ (8000b6c <receive_data_from_uart_dma+0xf0>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	b2db      	uxtb	r3, r3
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d01a      	beq.n	8000b08 <receive_data_from_uart_dma+0x8c>
		is_rx_half_completed = false;
 8000ad2:	4b26      	ldr	r3, [pc, #152]	@ (8000b6c <receive_data_from_uart_dma+0xf0>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	701a      	strb	r2, [r3, #0]

		memcpy(final_buff + index_byte, rx_buff, rx_half_len);
 8000ad8:	4b22      	ldr	r3, [pc, #136]	@ (8000b64 <receive_data_from_uart_dma+0xe8>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	687a      	ldr	r2, [r7, #4]
 8000ade:	18d0      	adds	r0, r2, r3
 8000ae0:	193b      	adds	r3, r7, r4
 8000ae2:	881a      	ldrh	r2, [r3, #0]
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	0019      	movs	r1, r3
 8000ae8:	f003 fdf8 	bl	80046dc <memcpy>
		memset(rx_buff, '\0', rx_half_len);
 8000aec:	193b      	adds	r3, r7, r4
 8000aee:	881a      	ldrh	r2, [r3, #0]
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	2100      	movs	r1, #0
 8000af4:	0018      	movs	r0, r3
 8000af6:	f003 fdc4 	bl	8004682 <memset>
		index_byte += rx_half_len;
 8000afa:	193b      	adds	r3, r7, r4
 8000afc:	881a      	ldrh	r2, [r3, #0]
 8000afe:	4b19      	ldr	r3, [pc, #100]	@ (8000b64 <receive_data_from_uart_dma+0xe8>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	18d2      	adds	r2, r2, r3
 8000b04:	4b17      	ldr	r3, [pc, #92]	@ (8000b64 <receive_data_from_uart_dma+0xe8>)
 8000b06:	601a      	str	r2, [r3, #0]
	}

	if (is_rx_full_completed) {
 8000b08:	4b19      	ldr	r3, [pc, #100]	@ (8000b70 <receive_data_from_uart_dma+0xf4>)
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	b2db      	uxtb	r3, r3
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d023      	beq.n	8000b5a <receive_data_from_uart_dma+0xde>
		is_rx_full_completed = false;
 8000b12:	4b17      	ldr	r3, [pc, #92]	@ (8000b70 <receive_data_from_uart_dma+0xf4>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	701a      	strb	r2, [r3, #0]

		memcpy(final_buff + index_byte, rx_buff + index_byte, rx_half_len);
 8000b18:	4b12      	ldr	r3, [pc, #72]	@ (8000b64 <receive_data_from_uart_dma+0xe8>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	687a      	ldr	r2, [r7, #4]
 8000b1e:	18d0      	adds	r0, r2, r3
 8000b20:	4b10      	ldr	r3, [pc, #64]	@ (8000b64 <receive_data_from_uart_dma+0xe8>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	68fa      	ldr	r2, [r7, #12]
 8000b26:	18d1      	adds	r1, r2, r3
 8000b28:	2416      	movs	r4, #22
 8000b2a:	193b      	adds	r3, r7, r4
 8000b2c:	881b      	ldrh	r3, [r3, #0]
 8000b2e:	001a      	movs	r2, r3
 8000b30:	f003 fdd4 	bl	80046dc <memcpy>
		memset(rx_buff + rx_half_len, '\0', rx_half_len);
 8000b34:	0021      	movs	r1, r4
 8000b36:	187b      	adds	r3, r7, r1
 8000b38:	881b      	ldrh	r3, [r3, #0]
 8000b3a:	68fa      	ldr	r2, [r7, #12]
 8000b3c:	18d0      	adds	r0, r2, r3
 8000b3e:	000c      	movs	r4, r1
 8000b40:	187b      	adds	r3, r7, r1
 8000b42:	881b      	ldrh	r3, [r3, #0]
 8000b44:	001a      	movs	r2, r3
 8000b46:	2100      	movs	r1, #0
 8000b48:	f003 fd9b 	bl	8004682 <memset>
		index_byte += rx_half_len;
 8000b4c:	193b      	adds	r3, r7, r4
 8000b4e:	881a      	ldrh	r2, [r3, #0]
 8000b50:	4b04      	ldr	r3, [pc, #16]	@ (8000b64 <receive_data_from_uart_dma+0xe8>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	18d2      	adds	r2, r2, r3
 8000b56:	4b03      	ldr	r3, [pc, #12]	@ (8000b64 <receive_data_from_uart_dma+0xe8>)
 8000b58:	601a      	str	r2, [r3, #0]
//	if (index_byte == final_buff_len) {
//		index_byte = 0;
//		memset(final_buff, '\0', final_buff_len);
//	}

}
 8000b5a:	46c0      	nop			@ (mov r8, r8)
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	b006      	add	sp, #24
 8000b60:	bdb0      	pop	{r4, r5, r7, pc}
 8000b62:	46c0      	nop			@ (mov r8, r8)
 8000b64:	20000bd4 	.word	0x20000bd4
 8000b68:	20000ac4 	.word	0x20000ac4
 8000b6c:	20000ac0 	.word	0x20000ac0
 8000b70:	20000abd 	.word	0x20000abd

08000b74 <transmit_data_to_uart_dma>:

uint32_t index_tx_byte = 0;
void transmit_data_to_uart_dma(char *start_buff, uint16_t start_buff_len,
		char *tx_buff, uint16_t tx_buff_len) {
 8000b74:	b590      	push	{r4, r7, lr}
 8000b76:	b085      	sub	sp, #20
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	60f8      	str	r0, [r7, #12]
 8000b7c:	0008      	movs	r0, r1
 8000b7e:	607a      	str	r2, [r7, #4]
 8000b80:	0019      	movs	r1, r3
 8000b82:	230a      	movs	r3, #10
 8000b84:	18fb      	adds	r3, r7, r3
 8000b86:	1c02      	adds	r2, r0, #0
 8000b88:	801a      	strh	r2, [r3, #0]
 8000b8a:	2308      	movs	r3, #8
 8000b8c:	18fb      	adds	r3, r7, r3
 8000b8e:	1c0a      	adds	r2, r1, #0
 8000b90:	801a      	strh	r2, [r3, #0]

	while (index_tx_byte < start_buff_len) {
 8000b92:	e030      	b.n	8000bf6 <transmit_data_to_uart_dma+0x82>
		is_tx_full_completed = false;
 8000b94:	4b28      	ldr	r3, [pc, #160]	@ (8000c38 <transmit_data_to_uart_dma+0xc4>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	701a      	strb	r2, [r3, #0]

		memset(tx_buff, '\0', tx_buff_len);
 8000b9a:	2408      	movs	r4, #8
 8000b9c:	193b      	adds	r3, r7, r4
 8000b9e:	881a      	ldrh	r2, [r3, #0]
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	0018      	movs	r0, r3
 8000ba6:	f003 fd6c 	bl	8004682 <memset>
		memcpy(tx_buff, start_buff + index_tx_byte, tx_buff_len);
 8000baa:	4b24      	ldr	r3, [pc, #144]	@ (8000c3c <transmit_data_to_uart_dma+0xc8>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	68fa      	ldr	r2, [r7, #12]
 8000bb0:	18d1      	adds	r1, r2, r3
 8000bb2:	193b      	adds	r3, r7, r4
 8000bb4:	881a      	ldrh	r2, [r3, #0]
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	0018      	movs	r0, r3
 8000bba:	f003 fd8f 	bl	80046dc <memcpy>
		HAL_UART_Transmit_DMA(&huart1, (uint8_t*) tx_buff, tx_buff_len);
 8000bbe:	193b      	adds	r3, r7, r4
 8000bc0:	881a      	ldrh	r2, [r3, #0]
 8000bc2:	6879      	ldr	r1, [r7, #4]
 8000bc4:	4b1e      	ldr	r3, [pc, #120]	@ (8000c40 <transmit_data_to_uart_dma+0xcc>)
 8000bc6:	0018      	movs	r0, r3
 8000bc8:	f002 fad6 	bl	8003178 <HAL_UART_Transmit_DMA>
		while (!is_tx_full_completed) {
 8000bcc:	46c0      	nop			@ (mov r8, r8)
 8000bce:	4b1a      	ldr	r3, [pc, #104]	@ (8000c38 <transmit_data_to_uart_dma+0xc4>)
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	b2db      	uxtb	r3, r3
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	4053      	eors	r3, r2
 8000bd8:	b2db      	uxtb	r3, r3
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d1f7      	bne.n	8000bce <transmit_data_to_uart_dma+0x5a>
		}
		HAL_UART_DMAStop(&huart1);
 8000bde:	4b18      	ldr	r3, [pc, #96]	@ (8000c40 <transmit_data_to_uart_dma+0xcc>)
 8000be0:	0018      	movs	r0, r3
 8000be2:	f002 fbb0 	bl	8003346 <HAL_UART_DMAStop>
		index_tx_byte += tx_buff_len;
 8000be6:	2308      	movs	r3, #8
 8000be8:	18fb      	adds	r3, r7, r3
 8000bea:	881a      	ldrh	r2, [r3, #0]
 8000bec:	4b13      	ldr	r3, [pc, #76]	@ (8000c3c <transmit_data_to_uart_dma+0xc8>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	18d2      	adds	r2, r2, r3
 8000bf2:	4b12      	ldr	r3, [pc, #72]	@ (8000c3c <transmit_data_to_uart_dma+0xc8>)
 8000bf4:	601a      	str	r2, [r3, #0]
	while (index_tx_byte < start_buff_len) {
 8000bf6:	210a      	movs	r1, #10
 8000bf8:	187b      	adds	r3, r7, r1
 8000bfa:	881a      	ldrh	r2, [r3, #0]
 8000bfc:	4b0f      	ldr	r3, [pc, #60]	@ (8000c3c <transmit_data_to_uart_dma+0xc8>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	429a      	cmp	r2, r3
 8000c02:	d8c7      	bhi.n	8000b94 <transmit_data_to_uart_dma+0x20>
	}

	if (index_tx_byte == start_buff_len) {
 8000c04:	187b      	adds	r3, r7, r1
 8000c06:	881a      	ldrh	r2, [r3, #0]
 8000c08:	4b0c      	ldr	r3, [pc, #48]	@ (8000c3c <transmit_data_to_uart_dma+0xc8>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	429a      	cmp	r2, r3
 8000c0e:	d10e      	bne.n	8000c2e <transmit_data_to_uart_dma+0xba>
		index_tx_byte = 0;
 8000c10:	4b0a      	ldr	r3, [pc, #40]	@ (8000c3c <transmit_data_to_uart_dma+0xc8>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	601a      	str	r2, [r3, #0]
		HAL_UART_DMAStop(&huart1);
 8000c16:	4b0a      	ldr	r3, [pc, #40]	@ (8000c40 <transmit_data_to_uart_dma+0xcc>)
 8000c18:	0018      	movs	r0, r3
 8000c1a:	f002 fb94 	bl	8003346 <HAL_UART_DMAStop>
		memset(tx_buff, '\0', tx_buff_len);
 8000c1e:	2308      	movs	r3, #8
 8000c20:	18fb      	adds	r3, r7, r3
 8000c22:	881a      	ldrh	r2, [r3, #0]
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	2100      	movs	r1, #0
 8000c28:	0018      	movs	r0, r3
 8000c2a:	f003 fd2a 	bl	8004682 <memset>
	}
}
 8000c2e:	46c0      	nop			@ (mov r8, r8)
 8000c30:	46bd      	mov	sp, r7
 8000c32:	b005      	add	sp, #20
 8000c34:	bd90      	pop	{r4, r7, pc}
 8000c36:	46c0      	nop			@ (mov r8, r8)
 8000c38:	20000abf 	.word	0x20000abf
 8000c3c:	20000bd8 	.word	0x20000bd8
 8000c40:	20000ac4 	.word	0x20000ac4

08000c44 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c44:	480d      	ldr	r0, [pc, #52]	@ (8000c7c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c46:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c48:	f7ff fcae 	bl	80005a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c4c:	480c      	ldr	r0, [pc, #48]	@ (8000c80 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c4e:	490d      	ldr	r1, [pc, #52]	@ (8000c84 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c50:	4a0d      	ldr	r2, [pc, #52]	@ (8000c88 <LoopForever+0xe>)
  movs r3, #0
 8000c52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c54:	e002      	b.n	8000c5c <LoopCopyDataInit>

08000c56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c5a:	3304      	adds	r3, #4

08000c5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c60:	d3f9      	bcc.n	8000c56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c62:	4a0a      	ldr	r2, [pc, #40]	@ (8000c8c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c64:	4c0a      	ldr	r4, [pc, #40]	@ (8000c90 <LoopForever+0x16>)
  movs r3, #0
 8000c66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c68:	e001      	b.n	8000c6e <LoopFillZerobss>

08000c6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c6c:	3204      	adds	r2, #4

08000c6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c70:	d3fb      	bcc.n	8000c6a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c72:	f003 fd0f 	bl	8004694 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c76:	f7ff fb55 	bl	8000324 <main>

08000c7a <LoopForever>:

LoopForever:
    b LoopForever
 8000c7a:	e7fe      	b.n	8000c7a <LoopForever>
  ldr   r0, =_estack
 8000c7c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000c80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c84:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000c88:	08004748 	.word	0x08004748
  ldr r2, =_sbss
 8000c8c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000c90:	20000be0 	.word	0x20000be0

08000c94 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c94:	e7fe      	b.n	8000c94 <ADC1_COMP_IRQHandler>
	...

08000c98 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c9c:	4b07      	ldr	r3, [pc, #28]	@ (8000cbc <HAL_Init+0x24>)
 8000c9e:	681a      	ldr	r2, [r3, #0]
 8000ca0:	4b06      	ldr	r3, [pc, #24]	@ (8000cbc <HAL_Init+0x24>)
 8000ca2:	2110      	movs	r1, #16
 8000ca4:	430a      	orrs	r2, r1
 8000ca6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000ca8:	2000      	movs	r0, #0
 8000caa:	f000 f809 	bl	8000cc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cae:	f7ff fbff 	bl	80004b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cb2:	2300      	movs	r3, #0
}
 8000cb4:	0018      	movs	r0, r3
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	46c0      	nop			@ (mov r8, r8)
 8000cbc:	40022000 	.word	0x40022000

08000cc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cc0:	b590      	push	{r4, r7, lr}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cc8:	4b14      	ldr	r3, [pc, #80]	@ (8000d1c <HAL_InitTick+0x5c>)
 8000cca:	681c      	ldr	r4, [r3, #0]
 8000ccc:	4b14      	ldr	r3, [pc, #80]	@ (8000d20 <HAL_InitTick+0x60>)
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	0019      	movs	r1, r3
 8000cd2:	23fa      	movs	r3, #250	@ 0xfa
 8000cd4:	0098      	lsls	r0, r3, #2
 8000cd6:	f7ff fa17 	bl	8000108 <__udivsi3>
 8000cda:	0003      	movs	r3, r0
 8000cdc:	0019      	movs	r1, r3
 8000cde:	0020      	movs	r0, r4
 8000ce0:	f7ff fa12 	bl	8000108 <__udivsi3>
 8000ce4:	0003      	movs	r3, r0
 8000ce6:	0018      	movs	r0, r3
 8000ce8:	f000 f92f 	bl	8000f4a <HAL_SYSTICK_Config>
 8000cec:	1e03      	subs	r3, r0, #0
 8000cee:	d001      	beq.n	8000cf4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	e00f      	b.n	8000d14 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	2b03      	cmp	r3, #3
 8000cf8:	d80b      	bhi.n	8000d12 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cfa:	6879      	ldr	r1, [r7, #4]
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	425b      	negs	r3, r3
 8000d00:	2200      	movs	r2, #0
 8000d02:	0018      	movs	r0, r3
 8000d04:	f000 f8fc 	bl	8000f00 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d08:	4b06      	ldr	r3, [pc, #24]	@ (8000d24 <HAL_InitTick+0x64>)
 8000d0a:	687a      	ldr	r2, [r7, #4]
 8000d0c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	e000      	b.n	8000d14 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000d12:	2301      	movs	r3, #1
}
 8000d14:	0018      	movs	r0, r3
 8000d16:	46bd      	mov	sp, r7
 8000d18:	b003      	add	sp, #12
 8000d1a:	bd90      	pop	{r4, r7, pc}
 8000d1c:	20000000 	.word	0x20000000
 8000d20:	2000000c 	.word	0x2000000c
 8000d24:	20000008 	.word	0x20000008

08000d28 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d2c:	4b05      	ldr	r3, [pc, #20]	@ (8000d44 <HAL_IncTick+0x1c>)
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	001a      	movs	r2, r3
 8000d32:	4b05      	ldr	r3, [pc, #20]	@ (8000d48 <HAL_IncTick+0x20>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	18d2      	adds	r2, r2, r3
 8000d38:	4b03      	ldr	r3, [pc, #12]	@ (8000d48 <HAL_IncTick+0x20>)
 8000d3a:	601a      	str	r2, [r3, #0]
}
 8000d3c:	46c0      	nop			@ (mov r8, r8)
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	46c0      	nop			@ (mov r8, r8)
 8000d44:	2000000c 	.word	0x2000000c
 8000d48:	20000bdc 	.word	0x20000bdc

08000d4c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d50:	4b02      	ldr	r3, [pc, #8]	@ (8000d5c <HAL_GetTick+0x10>)
 8000d52:	681b      	ldr	r3, [r3, #0]
}
 8000d54:	0018      	movs	r0, r3
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	46c0      	nop			@ (mov r8, r8)
 8000d5c:	20000bdc 	.word	0x20000bdc

08000d60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b084      	sub	sp, #16
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d68:	f7ff fff0 	bl	8000d4c <HAL_GetTick>
 8000d6c:	0003      	movs	r3, r0
 8000d6e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	3301      	adds	r3, #1
 8000d78:	d005      	beq.n	8000d86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d7a:	4b0a      	ldr	r3, [pc, #40]	@ (8000da4 <HAL_Delay+0x44>)
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	001a      	movs	r2, r3
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	189b      	adds	r3, r3, r2
 8000d84:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000d86:	46c0      	nop			@ (mov r8, r8)
 8000d88:	f7ff ffe0 	bl	8000d4c <HAL_GetTick>
 8000d8c:	0002      	movs	r2, r0
 8000d8e:	68bb      	ldr	r3, [r7, #8]
 8000d90:	1ad3      	subs	r3, r2, r3
 8000d92:	68fa      	ldr	r2, [r7, #12]
 8000d94:	429a      	cmp	r2, r3
 8000d96:	d8f7      	bhi.n	8000d88 <HAL_Delay+0x28>
  {
  }
}
 8000d98:	46c0      	nop			@ (mov r8, r8)
 8000d9a:	46c0      	nop			@ (mov r8, r8)
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	b004      	add	sp, #16
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	46c0      	nop			@ (mov r8, r8)
 8000da4:	2000000c 	.word	0x2000000c

08000da8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	0002      	movs	r2, r0
 8000db0:	1dfb      	adds	r3, r7, #7
 8000db2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000db4:	1dfb      	adds	r3, r7, #7
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	2b7f      	cmp	r3, #127	@ 0x7f
 8000dba:	d809      	bhi.n	8000dd0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dbc:	1dfb      	adds	r3, r7, #7
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	001a      	movs	r2, r3
 8000dc2:	231f      	movs	r3, #31
 8000dc4:	401a      	ands	r2, r3
 8000dc6:	4b04      	ldr	r3, [pc, #16]	@ (8000dd8 <__NVIC_EnableIRQ+0x30>)
 8000dc8:	2101      	movs	r1, #1
 8000dca:	4091      	lsls	r1, r2
 8000dcc:	000a      	movs	r2, r1
 8000dce:	601a      	str	r2, [r3, #0]
  }
}
 8000dd0:	46c0      	nop			@ (mov r8, r8)
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	b002      	add	sp, #8
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	e000e100 	.word	0xe000e100

08000ddc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ddc:	b590      	push	{r4, r7, lr}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	0002      	movs	r2, r0
 8000de4:	6039      	str	r1, [r7, #0]
 8000de6:	1dfb      	adds	r3, r7, #7
 8000de8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000dea:	1dfb      	adds	r3, r7, #7
 8000dec:	781b      	ldrb	r3, [r3, #0]
 8000dee:	2b7f      	cmp	r3, #127	@ 0x7f
 8000df0:	d828      	bhi.n	8000e44 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000df2:	4a2f      	ldr	r2, [pc, #188]	@ (8000eb0 <__NVIC_SetPriority+0xd4>)
 8000df4:	1dfb      	adds	r3, r7, #7
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	b25b      	sxtb	r3, r3
 8000dfa:	089b      	lsrs	r3, r3, #2
 8000dfc:	33c0      	adds	r3, #192	@ 0xc0
 8000dfe:	009b      	lsls	r3, r3, #2
 8000e00:	589b      	ldr	r3, [r3, r2]
 8000e02:	1dfa      	adds	r2, r7, #7
 8000e04:	7812      	ldrb	r2, [r2, #0]
 8000e06:	0011      	movs	r1, r2
 8000e08:	2203      	movs	r2, #3
 8000e0a:	400a      	ands	r2, r1
 8000e0c:	00d2      	lsls	r2, r2, #3
 8000e0e:	21ff      	movs	r1, #255	@ 0xff
 8000e10:	4091      	lsls	r1, r2
 8000e12:	000a      	movs	r2, r1
 8000e14:	43d2      	mvns	r2, r2
 8000e16:	401a      	ands	r2, r3
 8000e18:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	019b      	lsls	r3, r3, #6
 8000e1e:	22ff      	movs	r2, #255	@ 0xff
 8000e20:	401a      	ands	r2, r3
 8000e22:	1dfb      	adds	r3, r7, #7
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	0018      	movs	r0, r3
 8000e28:	2303      	movs	r3, #3
 8000e2a:	4003      	ands	r3, r0
 8000e2c:	00db      	lsls	r3, r3, #3
 8000e2e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e30:	481f      	ldr	r0, [pc, #124]	@ (8000eb0 <__NVIC_SetPriority+0xd4>)
 8000e32:	1dfb      	adds	r3, r7, #7
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	b25b      	sxtb	r3, r3
 8000e38:	089b      	lsrs	r3, r3, #2
 8000e3a:	430a      	orrs	r2, r1
 8000e3c:	33c0      	adds	r3, #192	@ 0xc0
 8000e3e:	009b      	lsls	r3, r3, #2
 8000e40:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000e42:	e031      	b.n	8000ea8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e44:	4a1b      	ldr	r2, [pc, #108]	@ (8000eb4 <__NVIC_SetPriority+0xd8>)
 8000e46:	1dfb      	adds	r3, r7, #7
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	0019      	movs	r1, r3
 8000e4c:	230f      	movs	r3, #15
 8000e4e:	400b      	ands	r3, r1
 8000e50:	3b08      	subs	r3, #8
 8000e52:	089b      	lsrs	r3, r3, #2
 8000e54:	3306      	adds	r3, #6
 8000e56:	009b      	lsls	r3, r3, #2
 8000e58:	18d3      	adds	r3, r2, r3
 8000e5a:	3304      	adds	r3, #4
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	1dfa      	adds	r2, r7, #7
 8000e60:	7812      	ldrb	r2, [r2, #0]
 8000e62:	0011      	movs	r1, r2
 8000e64:	2203      	movs	r2, #3
 8000e66:	400a      	ands	r2, r1
 8000e68:	00d2      	lsls	r2, r2, #3
 8000e6a:	21ff      	movs	r1, #255	@ 0xff
 8000e6c:	4091      	lsls	r1, r2
 8000e6e:	000a      	movs	r2, r1
 8000e70:	43d2      	mvns	r2, r2
 8000e72:	401a      	ands	r2, r3
 8000e74:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	019b      	lsls	r3, r3, #6
 8000e7a:	22ff      	movs	r2, #255	@ 0xff
 8000e7c:	401a      	ands	r2, r3
 8000e7e:	1dfb      	adds	r3, r7, #7
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	0018      	movs	r0, r3
 8000e84:	2303      	movs	r3, #3
 8000e86:	4003      	ands	r3, r0
 8000e88:	00db      	lsls	r3, r3, #3
 8000e8a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e8c:	4809      	ldr	r0, [pc, #36]	@ (8000eb4 <__NVIC_SetPriority+0xd8>)
 8000e8e:	1dfb      	adds	r3, r7, #7
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	001c      	movs	r4, r3
 8000e94:	230f      	movs	r3, #15
 8000e96:	4023      	ands	r3, r4
 8000e98:	3b08      	subs	r3, #8
 8000e9a:	089b      	lsrs	r3, r3, #2
 8000e9c:	430a      	orrs	r2, r1
 8000e9e:	3306      	adds	r3, #6
 8000ea0:	009b      	lsls	r3, r3, #2
 8000ea2:	18c3      	adds	r3, r0, r3
 8000ea4:	3304      	adds	r3, #4
 8000ea6:	601a      	str	r2, [r3, #0]
}
 8000ea8:	46c0      	nop			@ (mov r8, r8)
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	b003      	add	sp, #12
 8000eae:	bd90      	pop	{r4, r7, pc}
 8000eb0:	e000e100 	.word	0xe000e100
 8000eb4:	e000ed00 	.word	0xe000ed00

08000eb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	1e5a      	subs	r2, r3, #1
 8000ec4:	2380      	movs	r3, #128	@ 0x80
 8000ec6:	045b      	lsls	r3, r3, #17
 8000ec8:	429a      	cmp	r2, r3
 8000eca:	d301      	bcc.n	8000ed0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ecc:	2301      	movs	r3, #1
 8000ece:	e010      	b.n	8000ef2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ed0:	4b0a      	ldr	r3, [pc, #40]	@ (8000efc <SysTick_Config+0x44>)
 8000ed2:	687a      	ldr	r2, [r7, #4]
 8000ed4:	3a01      	subs	r2, #1
 8000ed6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ed8:	2301      	movs	r3, #1
 8000eda:	425b      	negs	r3, r3
 8000edc:	2103      	movs	r1, #3
 8000ede:	0018      	movs	r0, r3
 8000ee0:	f7ff ff7c 	bl	8000ddc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ee4:	4b05      	ldr	r3, [pc, #20]	@ (8000efc <SysTick_Config+0x44>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eea:	4b04      	ldr	r3, [pc, #16]	@ (8000efc <SysTick_Config+0x44>)
 8000eec:	2207      	movs	r2, #7
 8000eee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ef0:	2300      	movs	r3, #0
}
 8000ef2:	0018      	movs	r0, r3
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	b002      	add	sp, #8
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	46c0      	nop			@ (mov r8, r8)
 8000efc:	e000e010 	.word	0xe000e010

08000f00 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	60b9      	str	r1, [r7, #8]
 8000f08:	607a      	str	r2, [r7, #4]
 8000f0a:	210f      	movs	r1, #15
 8000f0c:	187b      	adds	r3, r7, r1
 8000f0e:	1c02      	adds	r2, r0, #0
 8000f10:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000f12:	68ba      	ldr	r2, [r7, #8]
 8000f14:	187b      	adds	r3, r7, r1
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	b25b      	sxtb	r3, r3
 8000f1a:	0011      	movs	r1, r2
 8000f1c:	0018      	movs	r0, r3
 8000f1e:	f7ff ff5d 	bl	8000ddc <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8000f22:	46c0      	nop			@ (mov r8, r8)
 8000f24:	46bd      	mov	sp, r7
 8000f26:	b004      	add	sp, #16
 8000f28:	bd80      	pop	{r7, pc}

08000f2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f2a:	b580      	push	{r7, lr}
 8000f2c:	b082      	sub	sp, #8
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	0002      	movs	r2, r0
 8000f32:	1dfb      	adds	r3, r7, #7
 8000f34:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f36:	1dfb      	adds	r3, r7, #7
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	b25b      	sxtb	r3, r3
 8000f3c:	0018      	movs	r0, r3
 8000f3e:	f7ff ff33 	bl	8000da8 <__NVIC_EnableIRQ>
}
 8000f42:	46c0      	nop			@ (mov r8, r8)
 8000f44:	46bd      	mov	sp, r7
 8000f46:	b002      	add	sp, #8
 8000f48:	bd80      	pop	{r7, pc}

08000f4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	b082      	sub	sp, #8
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	0018      	movs	r0, r3
 8000f56:	f7ff ffaf 	bl	8000eb8 <SysTick_Config>
 8000f5a:	0003      	movs	r3, r0
}
 8000f5c:	0018      	movs	r0, r3
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	b002      	add	sp, #8
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d101      	bne.n	8000f7a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000f76:	2301      	movs	r3, #1
 8000f78:	e036      	b.n	8000fe8 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	2221      	movs	r2, #33	@ 0x21
 8000f7e:	2102      	movs	r1, #2
 8000f80:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	4a18      	ldr	r2, [pc, #96]	@ (8000ff0 <HAL_DMA_Init+0x8c>)
 8000f8e:	4013      	ands	r3, r2
 8000f90:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000f9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	68db      	ldr	r3, [r3, #12]
 8000fa0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fa6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	695b      	ldr	r3, [r3, #20]
 8000fac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fb2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	69db      	ldr	r3, [r3, #28]
 8000fb8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000fba:	68fa      	ldr	r2, [r7, #12]
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	68fa      	ldr	r2, [r7, #12]
 8000fc6:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	0018      	movs	r0, r3
 8000fcc:	f000 f9ce 	bl	800136c <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2221      	movs	r2, #33	@ 0x21
 8000fda:	2101      	movs	r1, #1
 8000fdc:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2220      	movs	r2, #32
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000fe6:	2300      	movs	r3, #0
}
 8000fe8:	0018      	movs	r0, r3
 8000fea:	46bd      	mov	sp, r7
 8000fec:	b004      	add	sp, #16
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	ffffc00f 	.word	0xffffc00f

08000ff4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b086      	sub	sp, #24
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	60f8      	str	r0, [r7, #12]
 8000ffc:	60b9      	str	r1, [r7, #8]
 8000ffe:	607a      	str	r2, [r7, #4]
 8001000:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001002:	2317      	movs	r3, #23
 8001004:	18fb      	adds	r3, r7, r3
 8001006:	2200      	movs	r2, #0
 8001008:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	2220      	movs	r2, #32
 800100e:	5c9b      	ldrb	r3, [r3, r2]
 8001010:	2b01      	cmp	r3, #1
 8001012:	d101      	bne.n	8001018 <HAL_DMA_Start_IT+0x24>
 8001014:	2302      	movs	r3, #2
 8001016:	e04f      	b.n	80010b8 <HAL_DMA_Start_IT+0xc4>
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	2220      	movs	r2, #32
 800101c:	2101      	movs	r1, #1
 800101e:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	2221      	movs	r2, #33	@ 0x21
 8001024:	5c9b      	ldrb	r3, [r3, r2]
 8001026:	b2db      	uxtb	r3, r3
 8001028:	2b01      	cmp	r3, #1
 800102a:	d13a      	bne.n	80010a2 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	2221      	movs	r2, #33	@ 0x21
 8001030:	2102      	movs	r1, #2
 8001032:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	2200      	movs	r2, #0
 8001038:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	2101      	movs	r1, #1
 8001046:	438a      	bics	r2, r1
 8001048:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	687a      	ldr	r2, [r7, #4]
 800104e:	68b9      	ldr	r1, [r7, #8]
 8001050:	68f8      	ldr	r0, [r7, #12]
 8001052:	f000 f95e 	bl	8001312 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800105a:	2b00      	cmp	r3, #0
 800105c:	d008      	beq.n	8001070 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	681a      	ldr	r2, [r3, #0]
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	210e      	movs	r1, #14
 800106a:	430a      	orrs	r2, r1
 800106c:	601a      	str	r2, [r3, #0]
 800106e:	e00f      	b.n	8001090 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	210a      	movs	r1, #10
 800107c:	430a      	orrs	r2, r1
 800107e:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	2104      	movs	r1, #4
 800108c:	438a      	bics	r2, r1
 800108e:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	2101      	movs	r1, #1
 800109c:	430a      	orrs	r2, r1
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	e007      	b.n	80010b2 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	2220      	movs	r2, #32
 80010a6:	2100      	movs	r1, #0
 80010a8:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 80010aa:	2317      	movs	r3, #23
 80010ac:	18fb      	adds	r3, r7, r3
 80010ae:	2202      	movs	r2, #2
 80010b0:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80010b2:	2317      	movs	r3, #23
 80010b4:	18fb      	adds	r3, r7, r3
 80010b6:	781b      	ldrb	r3, [r3, #0]
}
 80010b8:	0018      	movs	r0, r3
 80010ba:	46bd      	mov	sp, r7
 80010bc:	b006      	add	sp, #24
 80010be:	bd80      	pop	{r7, pc}

080010c0 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2221      	movs	r2, #33	@ 0x21
 80010cc:	5c9b      	ldrb	r3, [r3, r2]
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	2b02      	cmp	r3, #2
 80010d2:	d008      	beq.n	80010e6 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2204      	movs	r2, #4
 80010d8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2220      	movs	r2, #32
 80010de:	2100      	movs	r1, #0
 80010e0:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80010e2:	2301      	movs	r3, #1
 80010e4:	e020      	b.n	8001128 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	210e      	movs	r1, #14
 80010f2:	438a      	bics	r2, r1
 80010f4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	2101      	movs	r1, #1
 8001102:	438a      	bics	r2, r1
 8001104:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800110e:	2101      	movs	r1, #1
 8001110:	4091      	lsls	r1, r2
 8001112:	000a      	movs	r2, r1
 8001114:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	2221      	movs	r2, #33	@ 0x21
 800111a:	2101      	movs	r1, #1
 800111c:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2220      	movs	r2, #32
 8001122:	2100      	movs	r1, #0
 8001124:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001126:	2300      	movs	r3, #0
}
 8001128:	0018      	movs	r0, r3
 800112a:	46bd      	mov	sp, r7
 800112c:	b002      	add	sp, #8
 800112e:	bd80      	pop	{r7, pc}

08001130 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001138:	210f      	movs	r1, #15
 800113a:	187b      	adds	r3, r7, r1
 800113c:	2200      	movs	r2, #0
 800113e:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2221      	movs	r2, #33	@ 0x21
 8001144:	5c9b      	ldrb	r3, [r3, r2]
 8001146:	b2db      	uxtb	r3, r3
 8001148:	2b02      	cmp	r3, #2
 800114a:	d006      	beq.n	800115a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2204      	movs	r2, #4
 8001150:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8001152:	187b      	adds	r3, r7, r1
 8001154:	2201      	movs	r2, #1
 8001156:	701a      	strb	r2, [r3, #0]
 8001158:	e028      	b.n	80011ac <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	210e      	movs	r1, #14
 8001166:	438a      	bics	r2, r1
 8001168:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	2101      	movs	r1, #1
 8001176:	438a      	bics	r2, r1
 8001178:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001182:	2101      	movs	r1, #1
 8001184:	4091      	lsls	r1, r2
 8001186:	000a      	movs	r2, r1
 8001188:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2221      	movs	r2, #33	@ 0x21
 800118e:	2101      	movs	r1, #1
 8001190:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2220      	movs	r2, #32
 8001196:	2100      	movs	r1, #0
 8001198:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d004      	beq.n	80011ac <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80011a6:	687a      	ldr	r2, [r7, #4]
 80011a8:	0010      	movs	r0, r2
 80011aa:	4798      	blx	r3
    }
  }
  return status;
 80011ac:	230f      	movs	r3, #15
 80011ae:	18fb      	adds	r3, r7, r3
 80011b0:	781b      	ldrb	r3, [r3, #0]
}
 80011b2:	0018      	movs	r0, r3
 80011b4:	46bd      	mov	sp, r7
 80011b6:	b004      	add	sp, #16
 80011b8:	bd80      	pop	{r7, pc}

080011ba <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80011ba:	b580      	push	{r7, lr}
 80011bc:	b084      	sub	sp, #16
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011d6:	2204      	movs	r2, #4
 80011d8:	409a      	lsls	r2, r3
 80011da:	0013      	movs	r3, r2
 80011dc:	68fa      	ldr	r2, [r7, #12]
 80011de:	4013      	ands	r3, r2
 80011e0:	d024      	beq.n	800122c <HAL_DMA_IRQHandler+0x72>
 80011e2:	68bb      	ldr	r3, [r7, #8]
 80011e4:	2204      	movs	r2, #4
 80011e6:	4013      	ands	r3, r2
 80011e8:	d020      	beq.n	800122c <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	2220      	movs	r2, #32
 80011f2:	4013      	ands	r3, r2
 80011f4:	d107      	bne.n	8001206 <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	2104      	movs	r1, #4
 8001202:	438a      	bics	r2, r1
 8001204:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800120e:	2104      	movs	r1, #4
 8001210:	4091      	lsls	r1, r2
 8001212:	000a      	movs	r2, r1
 8001214:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800121a:	2b00      	cmp	r3, #0
 800121c:	d100      	bne.n	8001220 <HAL_DMA_IRQHandler+0x66>
 800121e:	e06a      	b.n	80012f6 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001224:	687a      	ldr	r2, [r7, #4]
 8001226:	0010      	movs	r0, r2
 8001228:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800122a:	e064      	b.n	80012f6 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001230:	2202      	movs	r2, #2
 8001232:	409a      	lsls	r2, r3
 8001234:	0013      	movs	r3, r2
 8001236:	68fa      	ldr	r2, [r7, #12]
 8001238:	4013      	ands	r3, r2
 800123a:	d02b      	beq.n	8001294 <HAL_DMA_IRQHandler+0xda>
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	2202      	movs	r2, #2
 8001240:	4013      	ands	r3, r2
 8001242:	d027      	beq.n	8001294 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	2220      	movs	r2, #32
 800124c:	4013      	ands	r3, r2
 800124e:	d10b      	bne.n	8001268 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	210a      	movs	r1, #10
 800125c:	438a      	bics	r2, r1
 800125e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2221      	movs	r2, #33	@ 0x21
 8001264:	2101      	movs	r1, #1
 8001266:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001270:	2102      	movs	r1, #2
 8001272:	4091      	lsls	r1, r2
 8001274:	000a      	movs	r2, r1
 8001276:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2220      	movs	r2, #32
 800127c:	2100      	movs	r1, #0
 800127e:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001284:	2b00      	cmp	r3, #0
 8001286:	d036      	beq.n	80012f6 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800128c:	687a      	ldr	r2, [r7, #4]
 800128e:	0010      	movs	r0, r2
 8001290:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001292:	e030      	b.n	80012f6 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001298:	2208      	movs	r2, #8
 800129a:	409a      	lsls	r2, r3
 800129c:	0013      	movs	r3, r2
 800129e:	68fa      	ldr	r2, [r7, #12]
 80012a0:	4013      	ands	r3, r2
 80012a2:	d028      	beq.n	80012f6 <HAL_DMA_IRQHandler+0x13c>
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	2208      	movs	r2, #8
 80012a8:	4013      	ands	r3, r2
 80012aa:	d024      	beq.n	80012f6 <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	210e      	movs	r1, #14
 80012b8:	438a      	bics	r2, r1
 80012ba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80012c4:	2101      	movs	r1, #1
 80012c6:	4091      	lsls	r1, r2
 80012c8:	000a      	movs	r2, r1
 80012ca:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2201      	movs	r2, #1
 80012d0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2221      	movs	r2, #33	@ 0x21
 80012d6:	2101      	movs	r1, #1
 80012d8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2220      	movs	r2, #32
 80012de:	2100      	movs	r1, #0
 80012e0:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d005      	beq.n	80012f6 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ee:	687a      	ldr	r2, [r7, #4]
 80012f0:	0010      	movs	r0, r2
 80012f2:	4798      	blx	r3
    }
  }
}
 80012f4:	e7ff      	b.n	80012f6 <HAL_DMA_IRQHandler+0x13c>
 80012f6:	46c0      	nop			@ (mov r8, r8)
 80012f8:	46bd      	mov	sp, r7
 80012fa:	b004      	add	sp, #16
 80012fc:	bd80      	pop	{r7, pc}

080012fe <HAL_DMA_GetError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80012fe:	b580      	push	{r7, lr}
 8001300:	b082      	sub	sp, #8
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
}
 800130a:	0018      	movs	r0, r3
 800130c:	46bd      	mov	sp, r7
 800130e:	b002      	add	sp, #8
 8001310:	bd80      	pop	{r7, pc}

08001312 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001312:	b580      	push	{r7, lr}
 8001314:	b084      	sub	sp, #16
 8001316:	af00      	add	r7, sp, #0
 8001318:	60f8      	str	r0, [r7, #12]
 800131a:	60b9      	str	r1, [r7, #8]
 800131c:	607a      	str	r2, [r7, #4]
 800131e:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001328:	2101      	movs	r1, #1
 800132a:	4091      	lsls	r1, r2
 800132c:	000a      	movs	r2, r1
 800132e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	683a      	ldr	r2, [r7, #0]
 8001336:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	2b10      	cmp	r3, #16
 800133e:	d108      	bne.n	8001352 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	687a      	ldr	r2, [r7, #4]
 8001346:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	68ba      	ldr	r2, [r7, #8]
 800134e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001350:	e007      	b.n	8001362 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	68ba      	ldr	r2, [r7, #8]
 8001358:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	687a      	ldr	r2, [r7, #4]
 8001360:	60da      	str	r2, [r3, #12]
}
 8001362:	46c0      	nop			@ (mov r8, r8)
 8001364:	46bd      	mov	sp, r7
 8001366:	b004      	add	sp, #16
 8001368:	bd80      	pop	{r7, pc}
	...

0800136c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a08      	ldr	r2, [pc, #32]	@ (800139c <DMA_CalcBaseAndBitshift+0x30>)
 800137a:	4694      	mov	ip, r2
 800137c:	4463      	add	r3, ip
 800137e:	2114      	movs	r1, #20
 8001380:	0018      	movs	r0, r3
 8001382:	f7fe fec1 	bl	8000108 <__udivsi3>
 8001386:	0003      	movs	r3, r0
 8001388:	009a      	lsls	r2, r3, #2
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4a03      	ldr	r2, [pc, #12]	@ (80013a0 <DMA_CalcBaseAndBitshift+0x34>)
 8001392:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 8001394:	46c0      	nop			@ (mov r8, r8)
 8001396:	46bd      	mov	sp, r7
 8001398:	b002      	add	sp, #8
 800139a:	bd80      	pop	{r7, pc}
 800139c:	bffdfff8 	.word	0xbffdfff8
 80013a0:	40020000 	.word	0x40020000

080013a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b086      	sub	sp, #24
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013ae:	2300      	movs	r3, #0
 80013b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013b2:	e155      	b.n	8001660 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	2101      	movs	r1, #1
 80013ba:	697a      	ldr	r2, [r7, #20]
 80013bc:	4091      	lsls	r1, r2
 80013be:	000a      	movs	r2, r1
 80013c0:	4013      	ands	r3, r2
 80013c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d100      	bne.n	80013cc <HAL_GPIO_Init+0x28>
 80013ca:	e146      	b.n	800165a <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	2203      	movs	r2, #3
 80013d2:	4013      	ands	r3, r2
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	d005      	beq.n	80013e4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	2203      	movs	r2, #3
 80013de:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80013e0:	2b02      	cmp	r3, #2
 80013e2:	d130      	bne.n	8001446 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	005b      	lsls	r3, r3, #1
 80013ee:	2203      	movs	r2, #3
 80013f0:	409a      	lsls	r2, r3
 80013f2:	0013      	movs	r3, r2
 80013f4:	43da      	mvns	r2, r3
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	4013      	ands	r3, r2
 80013fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	68da      	ldr	r2, [r3, #12]
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	005b      	lsls	r3, r3, #1
 8001404:	409a      	lsls	r2, r3
 8001406:	0013      	movs	r3, r2
 8001408:	693a      	ldr	r2, [r7, #16]
 800140a:	4313      	orrs	r3, r2
 800140c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	693a      	ldr	r2, [r7, #16]
 8001412:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800141a:	2201      	movs	r2, #1
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	409a      	lsls	r2, r3
 8001420:	0013      	movs	r3, r2
 8001422:	43da      	mvns	r2, r3
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	4013      	ands	r3, r2
 8001428:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	091b      	lsrs	r3, r3, #4
 8001430:	2201      	movs	r2, #1
 8001432:	401a      	ands	r2, r3
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	409a      	lsls	r2, r3
 8001438:	0013      	movs	r3, r2
 800143a:	693a      	ldr	r2, [r7, #16]
 800143c:	4313      	orrs	r3, r2
 800143e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	693a      	ldr	r2, [r7, #16]
 8001444:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	2203      	movs	r2, #3
 800144c:	4013      	ands	r3, r2
 800144e:	2b03      	cmp	r3, #3
 8001450:	d017      	beq.n	8001482 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	68db      	ldr	r3, [r3, #12]
 8001456:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	005b      	lsls	r3, r3, #1
 800145c:	2203      	movs	r2, #3
 800145e:	409a      	lsls	r2, r3
 8001460:	0013      	movs	r3, r2
 8001462:	43da      	mvns	r2, r3
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	4013      	ands	r3, r2
 8001468:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	689a      	ldr	r2, [r3, #8]
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	005b      	lsls	r3, r3, #1
 8001472:	409a      	lsls	r2, r3
 8001474:	0013      	movs	r3, r2
 8001476:	693a      	ldr	r2, [r7, #16]
 8001478:	4313      	orrs	r3, r2
 800147a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	693a      	ldr	r2, [r7, #16]
 8001480:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	2203      	movs	r2, #3
 8001488:	4013      	ands	r3, r2
 800148a:	2b02      	cmp	r3, #2
 800148c:	d123      	bne.n	80014d6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	08da      	lsrs	r2, r3, #3
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	3208      	adds	r2, #8
 8001496:	0092      	lsls	r2, r2, #2
 8001498:	58d3      	ldr	r3, [r2, r3]
 800149a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	2207      	movs	r2, #7
 80014a0:	4013      	ands	r3, r2
 80014a2:	009b      	lsls	r3, r3, #2
 80014a4:	220f      	movs	r2, #15
 80014a6:	409a      	lsls	r2, r3
 80014a8:	0013      	movs	r3, r2
 80014aa:	43da      	mvns	r2, r3
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	4013      	ands	r3, r2
 80014b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	691a      	ldr	r2, [r3, #16]
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	2107      	movs	r1, #7
 80014ba:	400b      	ands	r3, r1
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	409a      	lsls	r2, r3
 80014c0:	0013      	movs	r3, r2
 80014c2:	693a      	ldr	r2, [r7, #16]
 80014c4:	4313      	orrs	r3, r2
 80014c6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	08da      	lsrs	r2, r3, #3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	3208      	adds	r2, #8
 80014d0:	0092      	lsls	r2, r2, #2
 80014d2:	6939      	ldr	r1, [r7, #16]
 80014d4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	005b      	lsls	r3, r3, #1
 80014e0:	2203      	movs	r2, #3
 80014e2:	409a      	lsls	r2, r3
 80014e4:	0013      	movs	r3, r2
 80014e6:	43da      	mvns	r2, r3
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	4013      	ands	r3, r2
 80014ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	2203      	movs	r2, #3
 80014f4:	401a      	ands	r2, r3
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	005b      	lsls	r3, r3, #1
 80014fa:	409a      	lsls	r2, r3
 80014fc:	0013      	movs	r3, r2
 80014fe:	693a      	ldr	r2, [r7, #16]
 8001500:	4313      	orrs	r3, r2
 8001502:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	693a      	ldr	r2, [r7, #16]
 8001508:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	685a      	ldr	r2, [r3, #4]
 800150e:	23c0      	movs	r3, #192	@ 0xc0
 8001510:	029b      	lsls	r3, r3, #10
 8001512:	4013      	ands	r3, r2
 8001514:	d100      	bne.n	8001518 <HAL_GPIO_Init+0x174>
 8001516:	e0a0      	b.n	800165a <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001518:	4b57      	ldr	r3, [pc, #348]	@ (8001678 <HAL_GPIO_Init+0x2d4>)
 800151a:	699a      	ldr	r2, [r3, #24]
 800151c:	4b56      	ldr	r3, [pc, #344]	@ (8001678 <HAL_GPIO_Init+0x2d4>)
 800151e:	2101      	movs	r1, #1
 8001520:	430a      	orrs	r2, r1
 8001522:	619a      	str	r2, [r3, #24]
 8001524:	4b54      	ldr	r3, [pc, #336]	@ (8001678 <HAL_GPIO_Init+0x2d4>)
 8001526:	699b      	ldr	r3, [r3, #24]
 8001528:	2201      	movs	r2, #1
 800152a:	4013      	ands	r3, r2
 800152c:	60bb      	str	r3, [r7, #8]
 800152e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001530:	4a52      	ldr	r2, [pc, #328]	@ (800167c <HAL_GPIO_Init+0x2d8>)
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	089b      	lsrs	r3, r3, #2
 8001536:	3302      	adds	r3, #2
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	589b      	ldr	r3, [r3, r2]
 800153c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	2203      	movs	r2, #3
 8001542:	4013      	ands	r3, r2
 8001544:	009b      	lsls	r3, r3, #2
 8001546:	220f      	movs	r2, #15
 8001548:	409a      	lsls	r2, r3
 800154a:	0013      	movs	r3, r2
 800154c:	43da      	mvns	r2, r3
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	4013      	ands	r3, r2
 8001552:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001554:	687a      	ldr	r2, [r7, #4]
 8001556:	2390      	movs	r3, #144	@ 0x90
 8001558:	05db      	lsls	r3, r3, #23
 800155a:	429a      	cmp	r2, r3
 800155c:	d019      	beq.n	8001592 <HAL_GPIO_Init+0x1ee>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4a47      	ldr	r2, [pc, #284]	@ (8001680 <HAL_GPIO_Init+0x2dc>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d013      	beq.n	800158e <HAL_GPIO_Init+0x1ea>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4a46      	ldr	r2, [pc, #280]	@ (8001684 <HAL_GPIO_Init+0x2e0>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d00d      	beq.n	800158a <HAL_GPIO_Init+0x1e6>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4a45      	ldr	r2, [pc, #276]	@ (8001688 <HAL_GPIO_Init+0x2e4>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d007      	beq.n	8001586 <HAL_GPIO_Init+0x1e2>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4a44      	ldr	r2, [pc, #272]	@ (800168c <HAL_GPIO_Init+0x2e8>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d101      	bne.n	8001582 <HAL_GPIO_Init+0x1de>
 800157e:	2304      	movs	r3, #4
 8001580:	e008      	b.n	8001594 <HAL_GPIO_Init+0x1f0>
 8001582:	2305      	movs	r3, #5
 8001584:	e006      	b.n	8001594 <HAL_GPIO_Init+0x1f0>
 8001586:	2303      	movs	r3, #3
 8001588:	e004      	b.n	8001594 <HAL_GPIO_Init+0x1f0>
 800158a:	2302      	movs	r3, #2
 800158c:	e002      	b.n	8001594 <HAL_GPIO_Init+0x1f0>
 800158e:	2301      	movs	r3, #1
 8001590:	e000      	b.n	8001594 <HAL_GPIO_Init+0x1f0>
 8001592:	2300      	movs	r3, #0
 8001594:	697a      	ldr	r2, [r7, #20]
 8001596:	2103      	movs	r1, #3
 8001598:	400a      	ands	r2, r1
 800159a:	0092      	lsls	r2, r2, #2
 800159c:	4093      	lsls	r3, r2
 800159e:	693a      	ldr	r2, [r7, #16]
 80015a0:	4313      	orrs	r3, r2
 80015a2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80015a4:	4935      	ldr	r1, [pc, #212]	@ (800167c <HAL_GPIO_Init+0x2d8>)
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	089b      	lsrs	r3, r3, #2
 80015aa:	3302      	adds	r3, #2
 80015ac:	009b      	lsls	r3, r3, #2
 80015ae:	693a      	ldr	r2, [r7, #16]
 80015b0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015b2:	4b37      	ldr	r3, [pc, #220]	@ (8001690 <HAL_GPIO_Init+0x2ec>)
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	43da      	mvns	r2, r3
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	4013      	ands	r3, r2
 80015c0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	685a      	ldr	r2, [r3, #4]
 80015c6:	2380      	movs	r3, #128	@ 0x80
 80015c8:	035b      	lsls	r3, r3, #13
 80015ca:	4013      	ands	r3, r2
 80015cc:	d003      	beq.n	80015d6 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 80015ce:	693a      	ldr	r2, [r7, #16]
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	4313      	orrs	r3, r2
 80015d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80015d6:	4b2e      	ldr	r3, [pc, #184]	@ (8001690 <HAL_GPIO_Init+0x2ec>)
 80015d8:	693a      	ldr	r2, [r7, #16]
 80015da:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80015dc:	4b2c      	ldr	r3, [pc, #176]	@ (8001690 <HAL_GPIO_Init+0x2ec>)
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	43da      	mvns	r2, r3
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	4013      	ands	r3, r2
 80015ea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	685a      	ldr	r2, [r3, #4]
 80015f0:	2380      	movs	r3, #128	@ 0x80
 80015f2:	039b      	lsls	r3, r3, #14
 80015f4:	4013      	ands	r3, r2
 80015f6:	d003      	beq.n	8001600 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 80015f8:	693a      	ldr	r2, [r7, #16]
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	4313      	orrs	r3, r2
 80015fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001600:	4b23      	ldr	r3, [pc, #140]	@ (8001690 <HAL_GPIO_Init+0x2ec>)
 8001602:	693a      	ldr	r2, [r7, #16]
 8001604:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001606:	4b22      	ldr	r3, [pc, #136]	@ (8001690 <HAL_GPIO_Init+0x2ec>)
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	43da      	mvns	r2, r3
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	4013      	ands	r3, r2
 8001614:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	685a      	ldr	r2, [r3, #4]
 800161a:	2380      	movs	r3, #128	@ 0x80
 800161c:	029b      	lsls	r3, r3, #10
 800161e:	4013      	ands	r3, r2
 8001620:	d003      	beq.n	800162a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001622:	693a      	ldr	r2, [r7, #16]
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	4313      	orrs	r3, r2
 8001628:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800162a:	4b19      	ldr	r3, [pc, #100]	@ (8001690 <HAL_GPIO_Init+0x2ec>)
 800162c:	693a      	ldr	r2, [r7, #16]
 800162e:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001630:	4b17      	ldr	r3, [pc, #92]	@ (8001690 <HAL_GPIO_Init+0x2ec>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	43da      	mvns	r2, r3
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	4013      	ands	r3, r2
 800163e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	685a      	ldr	r2, [r3, #4]
 8001644:	2380      	movs	r3, #128	@ 0x80
 8001646:	025b      	lsls	r3, r3, #9
 8001648:	4013      	ands	r3, r2
 800164a:	d003      	beq.n	8001654 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800164c:	693a      	ldr	r2, [r7, #16]
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	4313      	orrs	r3, r2
 8001652:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001654:	4b0e      	ldr	r3, [pc, #56]	@ (8001690 <HAL_GPIO_Init+0x2ec>)
 8001656:	693a      	ldr	r2, [r7, #16]
 8001658:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	3301      	adds	r3, #1
 800165e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	40da      	lsrs	r2, r3
 8001668:	1e13      	subs	r3, r2, #0
 800166a:	d000      	beq.n	800166e <HAL_GPIO_Init+0x2ca>
 800166c:	e6a2      	b.n	80013b4 <HAL_GPIO_Init+0x10>
  } 
}
 800166e:	46c0      	nop			@ (mov r8, r8)
 8001670:	46c0      	nop			@ (mov r8, r8)
 8001672:	46bd      	mov	sp, r7
 8001674:	b006      	add	sp, #24
 8001676:	bd80      	pop	{r7, pc}
 8001678:	40021000 	.word	0x40021000
 800167c:	40010000 	.word	0x40010000
 8001680:	48000400 	.word	0x48000400
 8001684:	48000800 	.word	0x48000800
 8001688:	48000c00 	.word	0x48000c00
 800168c:	48001000 	.word	0x48001000
 8001690:	40010400 	.word	0x40010400

08001694 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
 800169c:	0008      	movs	r0, r1
 800169e:	0011      	movs	r1, r2
 80016a0:	1cbb      	adds	r3, r7, #2
 80016a2:	1c02      	adds	r2, r0, #0
 80016a4:	801a      	strh	r2, [r3, #0]
 80016a6:	1c7b      	adds	r3, r7, #1
 80016a8:	1c0a      	adds	r2, r1, #0
 80016aa:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016ac:	1c7b      	adds	r3, r7, #1
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d004      	beq.n	80016be <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80016b4:	1cbb      	adds	r3, r7, #2
 80016b6:	881a      	ldrh	r2, [r3, #0]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80016bc:	e003      	b.n	80016c6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80016be:	1cbb      	adds	r3, r7, #2
 80016c0:	881a      	ldrh	r2, [r3, #0]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80016c6:	46c0      	nop			@ (mov r8, r8)
 80016c8:	46bd      	mov	sp, r7
 80016ca:	b002      	add	sp, #8
 80016cc:	bd80      	pop	{r7, pc}
	...

080016d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	0002      	movs	r2, r0
 80016d8:	1dbb      	adds	r3, r7, #6
 80016da:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80016dc:	4b09      	ldr	r3, [pc, #36]	@ (8001704 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80016de:	695b      	ldr	r3, [r3, #20]
 80016e0:	1dba      	adds	r2, r7, #6
 80016e2:	8812      	ldrh	r2, [r2, #0]
 80016e4:	4013      	ands	r3, r2
 80016e6:	d008      	beq.n	80016fa <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80016e8:	4b06      	ldr	r3, [pc, #24]	@ (8001704 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80016ea:	1dba      	adds	r2, r7, #6
 80016ec:	8812      	ldrh	r2, [r2, #0]
 80016ee:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80016f0:	1dbb      	adds	r3, r7, #6
 80016f2:	881b      	ldrh	r3, [r3, #0]
 80016f4:	0018      	movs	r0, r3
 80016f6:	f000 f807 	bl	8001708 <HAL_GPIO_EXTI_Callback>
  }
}
 80016fa:	46c0      	nop			@ (mov r8, r8)
 80016fc:	46bd      	mov	sp, r7
 80016fe:	b002      	add	sp, #8
 8001700:	bd80      	pop	{r7, pc}
 8001702:	46c0      	nop			@ (mov r8, r8)
 8001704:	40010400 	.word	0x40010400

08001708 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	0002      	movs	r2, r0
 8001710:	1dbb      	adds	r3, r7, #6
 8001712:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 8001714:	46c0      	nop			@ (mov r8, r8)
 8001716:	46bd      	mov	sp, r7
 8001718:	b002      	add	sp, #8
 800171a:	bd80      	pop	{r7, pc}

0800171c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b088      	sub	sp, #32
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d102      	bne.n	8001730 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	f000 fb76 	bl	8001e1c <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	2201      	movs	r2, #1
 8001736:	4013      	ands	r3, r2
 8001738:	d100      	bne.n	800173c <HAL_RCC_OscConfig+0x20>
 800173a:	e08e      	b.n	800185a <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800173c:	4bc5      	ldr	r3, [pc, #788]	@ (8001a54 <HAL_RCC_OscConfig+0x338>)
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	220c      	movs	r2, #12
 8001742:	4013      	ands	r3, r2
 8001744:	2b04      	cmp	r3, #4
 8001746:	d00e      	beq.n	8001766 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001748:	4bc2      	ldr	r3, [pc, #776]	@ (8001a54 <HAL_RCC_OscConfig+0x338>)
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	220c      	movs	r2, #12
 800174e:	4013      	ands	r3, r2
 8001750:	2b08      	cmp	r3, #8
 8001752:	d117      	bne.n	8001784 <HAL_RCC_OscConfig+0x68>
 8001754:	4bbf      	ldr	r3, [pc, #764]	@ (8001a54 <HAL_RCC_OscConfig+0x338>)
 8001756:	685a      	ldr	r2, [r3, #4]
 8001758:	23c0      	movs	r3, #192	@ 0xc0
 800175a:	025b      	lsls	r3, r3, #9
 800175c:	401a      	ands	r2, r3
 800175e:	2380      	movs	r3, #128	@ 0x80
 8001760:	025b      	lsls	r3, r3, #9
 8001762:	429a      	cmp	r2, r3
 8001764:	d10e      	bne.n	8001784 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001766:	4bbb      	ldr	r3, [pc, #748]	@ (8001a54 <HAL_RCC_OscConfig+0x338>)
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	2380      	movs	r3, #128	@ 0x80
 800176c:	029b      	lsls	r3, r3, #10
 800176e:	4013      	ands	r3, r2
 8001770:	d100      	bne.n	8001774 <HAL_RCC_OscConfig+0x58>
 8001772:	e071      	b.n	8001858 <HAL_RCC_OscConfig+0x13c>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d000      	beq.n	800177e <HAL_RCC_OscConfig+0x62>
 800177c:	e06c      	b.n	8001858 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	f000 fb4c 	bl	8001e1c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	2b01      	cmp	r3, #1
 800178a:	d107      	bne.n	800179c <HAL_RCC_OscConfig+0x80>
 800178c:	4bb1      	ldr	r3, [pc, #708]	@ (8001a54 <HAL_RCC_OscConfig+0x338>)
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	4bb0      	ldr	r3, [pc, #704]	@ (8001a54 <HAL_RCC_OscConfig+0x338>)
 8001792:	2180      	movs	r1, #128	@ 0x80
 8001794:	0249      	lsls	r1, r1, #9
 8001796:	430a      	orrs	r2, r1
 8001798:	601a      	str	r2, [r3, #0]
 800179a:	e02f      	b.n	80017fc <HAL_RCC_OscConfig+0xe0>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d10c      	bne.n	80017be <HAL_RCC_OscConfig+0xa2>
 80017a4:	4bab      	ldr	r3, [pc, #684]	@ (8001a54 <HAL_RCC_OscConfig+0x338>)
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	4baa      	ldr	r3, [pc, #680]	@ (8001a54 <HAL_RCC_OscConfig+0x338>)
 80017aa:	49ab      	ldr	r1, [pc, #684]	@ (8001a58 <HAL_RCC_OscConfig+0x33c>)
 80017ac:	400a      	ands	r2, r1
 80017ae:	601a      	str	r2, [r3, #0]
 80017b0:	4ba8      	ldr	r3, [pc, #672]	@ (8001a54 <HAL_RCC_OscConfig+0x338>)
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	4ba7      	ldr	r3, [pc, #668]	@ (8001a54 <HAL_RCC_OscConfig+0x338>)
 80017b6:	49a9      	ldr	r1, [pc, #676]	@ (8001a5c <HAL_RCC_OscConfig+0x340>)
 80017b8:	400a      	ands	r2, r1
 80017ba:	601a      	str	r2, [r3, #0]
 80017bc:	e01e      	b.n	80017fc <HAL_RCC_OscConfig+0xe0>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	2b05      	cmp	r3, #5
 80017c4:	d10e      	bne.n	80017e4 <HAL_RCC_OscConfig+0xc8>
 80017c6:	4ba3      	ldr	r3, [pc, #652]	@ (8001a54 <HAL_RCC_OscConfig+0x338>)
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	4ba2      	ldr	r3, [pc, #648]	@ (8001a54 <HAL_RCC_OscConfig+0x338>)
 80017cc:	2180      	movs	r1, #128	@ 0x80
 80017ce:	02c9      	lsls	r1, r1, #11
 80017d0:	430a      	orrs	r2, r1
 80017d2:	601a      	str	r2, [r3, #0]
 80017d4:	4b9f      	ldr	r3, [pc, #636]	@ (8001a54 <HAL_RCC_OscConfig+0x338>)
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	4b9e      	ldr	r3, [pc, #632]	@ (8001a54 <HAL_RCC_OscConfig+0x338>)
 80017da:	2180      	movs	r1, #128	@ 0x80
 80017dc:	0249      	lsls	r1, r1, #9
 80017de:	430a      	orrs	r2, r1
 80017e0:	601a      	str	r2, [r3, #0]
 80017e2:	e00b      	b.n	80017fc <HAL_RCC_OscConfig+0xe0>
 80017e4:	4b9b      	ldr	r3, [pc, #620]	@ (8001a54 <HAL_RCC_OscConfig+0x338>)
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	4b9a      	ldr	r3, [pc, #616]	@ (8001a54 <HAL_RCC_OscConfig+0x338>)
 80017ea:	499b      	ldr	r1, [pc, #620]	@ (8001a58 <HAL_RCC_OscConfig+0x33c>)
 80017ec:	400a      	ands	r2, r1
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	4b98      	ldr	r3, [pc, #608]	@ (8001a54 <HAL_RCC_OscConfig+0x338>)
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	4b97      	ldr	r3, [pc, #604]	@ (8001a54 <HAL_RCC_OscConfig+0x338>)
 80017f6:	4999      	ldr	r1, [pc, #612]	@ (8001a5c <HAL_RCC_OscConfig+0x340>)
 80017f8:	400a      	ands	r2, r1
 80017fa:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d014      	beq.n	800182e <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001804:	f7ff faa2 	bl	8000d4c <HAL_GetTick>
 8001808:	0003      	movs	r3, r0
 800180a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800180c:	e008      	b.n	8001820 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800180e:	f7ff fa9d 	bl	8000d4c <HAL_GetTick>
 8001812:	0002      	movs	r2, r0
 8001814:	69bb      	ldr	r3, [r7, #24]
 8001816:	1ad3      	subs	r3, r2, r3
 8001818:	2b64      	cmp	r3, #100	@ 0x64
 800181a:	d901      	bls.n	8001820 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 800181c:	2303      	movs	r3, #3
 800181e:	e2fd      	b.n	8001e1c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001820:	4b8c      	ldr	r3, [pc, #560]	@ (8001a54 <HAL_RCC_OscConfig+0x338>)
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	2380      	movs	r3, #128	@ 0x80
 8001826:	029b      	lsls	r3, r3, #10
 8001828:	4013      	ands	r3, r2
 800182a:	d0f0      	beq.n	800180e <HAL_RCC_OscConfig+0xf2>
 800182c:	e015      	b.n	800185a <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800182e:	f7ff fa8d 	bl	8000d4c <HAL_GetTick>
 8001832:	0003      	movs	r3, r0
 8001834:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001836:	e008      	b.n	800184a <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001838:	f7ff fa88 	bl	8000d4c <HAL_GetTick>
 800183c:	0002      	movs	r2, r0
 800183e:	69bb      	ldr	r3, [r7, #24]
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	2b64      	cmp	r3, #100	@ 0x64
 8001844:	d901      	bls.n	800184a <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001846:	2303      	movs	r3, #3
 8001848:	e2e8      	b.n	8001e1c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800184a:	4b82      	ldr	r3, [pc, #520]	@ (8001a54 <HAL_RCC_OscConfig+0x338>)
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	2380      	movs	r3, #128	@ 0x80
 8001850:	029b      	lsls	r3, r3, #10
 8001852:	4013      	ands	r3, r2
 8001854:	d1f0      	bne.n	8001838 <HAL_RCC_OscConfig+0x11c>
 8001856:	e000      	b.n	800185a <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001858:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	2202      	movs	r2, #2
 8001860:	4013      	ands	r3, r2
 8001862:	d100      	bne.n	8001866 <HAL_RCC_OscConfig+0x14a>
 8001864:	e06c      	b.n	8001940 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001866:	4b7b      	ldr	r3, [pc, #492]	@ (8001a54 <HAL_RCC_OscConfig+0x338>)
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	220c      	movs	r2, #12
 800186c:	4013      	ands	r3, r2
 800186e:	d00e      	beq.n	800188e <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001870:	4b78      	ldr	r3, [pc, #480]	@ (8001a54 <HAL_RCC_OscConfig+0x338>)
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	220c      	movs	r2, #12
 8001876:	4013      	ands	r3, r2
 8001878:	2b08      	cmp	r3, #8
 800187a:	d11f      	bne.n	80018bc <HAL_RCC_OscConfig+0x1a0>
 800187c:	4b75      	ldr	r3, [pc, #468]	@ (8001a54 <HAL_RCC_OscConfig+0x338>)
 800187e:	685a      	ldr	r2, [r3, #4]
 8001880:	23c0      	movs	r3, #192	@ 0xc0
 8001882:	025b      	lsls	r3, r3, #9
 8001884:	401a      	ands	r2, r3
 8001886:	2380      	movs	r3, #128	@ 0x80
 8001888:	021b      	lsls	r3, r3, #8
 800188a:	429a      	cmp	r2, r3
 800188c:	d116      	bne.n	80018bc <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800188e:	4b71      	ldr	r3, [pc, #452]	@ (8001a54 <HAL_RCC_OscConfig+0x338>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	2202      	movs	r2, #2
 8001894:	4013      	ands	r3, r2
 8001896:	d005      	beq.n	80018a4 <HAL_RCC_OscConfig+0x188>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	2b01      	cmp	r3, #1
 800189e:	d001      	beq.n	80018a4 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	e2bb      	b.n	8001e1c <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018a4:	4b6b      	ldr	r3, [pc, #428]	@ (8001a54 <HAL_RCC_OscConfig+0x338>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	22f8      	movs	r2, #248	@ 0xf8
 80018aa:	4393      	bics	r3, r2
 80018ac:	0019      	movs	r1, r3
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	691b      	ldr	r3, [r3, #16]
 80018b2:	00da      	lsls	r2, r3, #3
 80018b4:	4b67      	ldr	r3, [pc, #412]	@ (8001a54 <HAL_RCC_OscConfig+0x338>)
 80018b6:	430a      	orrs	r2, r1
 80018b8:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018ba:	e041      	b.n	8001940 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d024      	beq.n	800190e <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018c4:	4b63      	ldr	r3, [pc, #396]	@ (8001a54 <HAL_RCC_OscConfig+0x338>)
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	4b62      	ldr	r3, [pc, #392]	@ (8001a54 <HAL_RCC_OscConfig+0x338>)
 80018ca:	2101      	movs	r1, #1
 80018cc:	430a      	orrs	r2, r1
 80018ce:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d0:	f7ff fa3c 	bl	8000d4c <HAL_GetTick>
 80018d4:	0003      	movs	r3, r0
 80018d6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018d8:	e008      	b.n	80018ec <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018da:	f7ff fa37 	bl	8000d4c <HAL_GetTick>
 80018de:	0002      	movs	r2, r0
 80018e0:	69bb      	ldr	r3, [r7, #24]
 80018e2:	1ad3      	subs	r3, r2, r3
 80018e4:	2b02      	cmp	r3, #2
 80018e6:	d901      	bls.n	80018ec <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80018e8:	2303      	movs	r3, #3
 80018ea:	e297      	b.n	8001e1c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018ec:	4b59      	ldr	r3, [pc, #356]	@ (8001a54 <HAL_RCC_OscConfig+0x338>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	2202      	movs	r2, #2
 80018f2:	4013      	ands	r3, r2
 80018f4:	d0f1      	beq.n	80018da <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018f6:	4b57      	ldr	r3, [pc, #348]	@ (8001a54 <HAL_RCC_OscConfig+0x338>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	22f8      	movs	r2, #248	@ 0xf8
 80018fc:	4393      	bics	r3, r2
 80018fe:	0019      	movs	r1, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	691b      	ldr	r3, [r3, #16]
 8001904:	00da      	lsls	r2, r3, #3
 8001906:	4b53      	ldr	r3, [pc, #332]	@ (8001a54 <HAL_RCC_OscConfig+0x338>)
 8001908:	430a      	orrs	r2, r1
 800190a:	601a      	str	r2, [r3, #0]
 800190c:	e018      	b.n	8001940 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800190e:	4b51      	ldr	r3, [pc, #324]	@ (8001a54 <HAL_RCC_OscConfig+0x338>)
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	4b50      	ldr	r3, [pc, #320]	@ (8001a54 <HAL_RCC_OscConfig+0x338>)
 8001914:	2101      	movs	r1, #1
 8001916:	438a      	bics	r2, r1
 8001918:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800191a:	f7ff fa17 	bl	8000d4c <HAL_GetTick>
 800191e:	0003      	movs	r3, r0
 8001920:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001922:	e008      	b.n	8001936 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001924:	f7ff fa12 	bl	8000d4c <HAL_GetTick>
 8001928:	0002      	movs	r2, r0
 800192a:	69bb      	ldr	r3, [r7, #24]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	2b02      	cmp	r3, #2
 8001930:	d901      	bls.n	8001936 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8001932:	2303      	movs	r3, #3
 8001934:	e272      	b.n	8001e1c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001936:	4b47      	ldr	r3, [pc, #284]	@ (8001a54 <HAL_RCC_OscConfig+0x338>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	2202      	movs	r2, #2
 800193c:	4013      	ands	r3, r2
 800193e:	d1f1      	bne.n	8001924 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	2208      	movs	r2, #8
 8001946:	4013      	ands	r3, r2
 8001948:	d036      	beq.n	80019b8 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	69db      	ldr	r3, [r3, #28]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d019      	beq.n	8001986 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001952:	4b40      	ldr	r3, [pc, #256]	@ (8001a54 <HAL_RCC_OscConfig+0x338>)
 8001954:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001956:	4b3f      	ldr	r3, [pc, #252]	@ (8001a54 <HAL_RCC_OscConfig+0x338>)
 8001958:	2101      	movs	r1, #1
 800195a:	430a      	orrs	r2, r1
 800195c:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800195e:	f7ff f9f5 	bl	8000d4c <HAL_GetTick>
 8001962:	0003      	movs	r3, r0
 8001964:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001966:	e008      	b.n	800197a <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001968:	f7ff f9f0 	bl	8000d4c <HAL_GetTick>
 800196c:	0002      	movs	r2, r0
 800196e:	69bb      	ldr	r3, [r7, #24]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	2b02      	cmp	r3, #2
 8001974:	d901      	bls.n	800197a <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001976:	2303      	movs	r3, #3
 8001978:	e250      	b.n	8001e1c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800197a:	4b36      	ldr	r3, [pc, #216]	@ (8001a54 <HAL_RCC_OscConfig+0x338>)
 800197c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800197e:	2202      	movs	r2, #2
 8001980:	4013      	ands	r3, r2
 8001982:	d0f1      	beq.n	8001968 <HAL_RCC_OscConfig+0x24c>
 8001984:	e018      	b.n	80019b8 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001986:	4b33      	ldr	r3, [pc, #204]	@ (8001a54 <HAL_RCC_OscConfig+0x338>)
 8001988:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800198a:	4b32      	ldr	r3, [pc, #200]	@ (8001a54 <HAL_RCC_OscConfig+0x338>)
 800198c:	2101      	movs	r1, #1
 800198e:	438a      	bics	r2, r1
 8001990:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001992:	f7ff f9db 	bl	8000d4c <HAL_GetTick>
 8001996:	0003      	movs	r3, r0
 8001998:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800199a:	e008      	b.n	80019ae <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800199c:	f7ff f9d6 	bl	8000d4c <HAL_GetTick>
 80019a0:	0002      	movs	r2, r0
 80019a2:	69bb      	ldr	r3, [r7, #24]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d901      	bls.n	80019ae <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80019aa:	2303      	movs	r3, #3
 80019ac:	e236      	b.n	8001e1c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019ae:	4b29      	ldr	r3, [pc, #164]	@ (8001a54 <HAL_RCC_OscConfig+0x338>)
 80019b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019b2:	2202      	movs	r2, #2
 80019b4:	4013      	ands	r3, r2
 80019b6:	d1f1      	bne.n	800199c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	2204      	movs	r2, #4
 80019be:	4013      	ands	r3, r2
 80019c0:	d100      	bne.n	80019c4 <HAL_RCC_OscConfig+0x2a8>
 80019c2:	e0b5      	b.n	8001b30 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019c4:	201f      	movs	r0, #31
 80019c6:	183b      	adds	r3, r7, r0
 80019c8:	2200      	movs	r2, #0
 80019ca:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019cc:	4b21      	ldr	r3, [pc, #132]	@ (8001a54 <HAL_RCC_OscConfig+0x338>)
 80019ce:	69da      	ldr	r2, [r3, #28]
 80019d0:	2380      	movs	r3, #128	@ 0x80
 80019d2:	055b      	lsls	r3, r3, #21
 80019d4:	4013      	ands	r3, r2
 80019d6:	d110      	bne.n	80019fa <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019d8:	4b1e      	ldr	r3, [pc, #120]	@ (8001a54 <HAL_RCC_OscConfig+0x338>)
 80019da:	69da      	ldr	r2, [r3, #28]
 80019dc:	4b1d      	ldr	r3, [pc, #116]	@ (8001a54 <HAL_RCC_OscConfig+0x338>)
 80019de:	2180      	movs	r1, #128	@ 0x80
 80019e0:	0549      	lsls	r1, r1, #21
 80019e2:	430a      	orrs	r2, r1
 80019e4:	61da      	str	r2, [r3, #28]
 80019e6:	4b1b      	ldr	r3, [pc, #108]	@ (8001a54 <HAL_RCC_OscConfig+0x338>)
 80019e8:	69da      	ldr	r2, [r3, #28]
 80019ea:	2380      	movs	r3, #128	@ 0x80
 80019ec:	055b      	lsls	r3, r3, #21
 80019ee:	4013      	ands	r3, r2
 80019f0:	60fb      	str	r3, [r7, #12]
 80019f2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80019f4:	183b      	adds	r3, r7, r0
 80019f6:	2201      	movs	r2, #1
 80019f8:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019fa:	4b19      	ldr	r3, [pc, #100]	@ (8001a60 <HAL_RCC_OscConfig+0x344>)
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	2380      	movs	r3, #128	@ 0x80
 8001a00:	005b      	lsls	r3, r3, #1
 8001a02:	4013      	ands	r3, r2
 8001a04:	d11a      	bne.n	8001a3c <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a06:	4b16      	ldr	r3, [pc, #88]	@ (8001a60 <HAL_RCC_OscConfig+0x344>)
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	4b15      	ldr	r3, [pc, #84]	@ (8001a60 <HAL_RCC_OscConfig+0x344>)
 8001a0c:	2180      	movs	r1, #128	@ 0x80
 8001a0e:	0049      	lsls	r1, r1, #1
 8001a10:	430a      	orrs	r2, r1
 8001a12:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a14:	f7ff f99a 	bl	8000d4c <HAL_GetTick>
 8001a18:	0003      	movs	r3, r0
 8001a1a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a1c:	e008      	b.n	8001a30 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a1e:	f7ff f995 	bl	8000d4c <HAL_GetTick>
 8001a22:	0002      	movs	r2, r0
 8001a24:	69bb      	ldr	r3, [r7, #24]
 8001a26:	1ad3      	subs	r3, r2, r3
 8001a28:	2b64      	cmp	r3, #100	@ 0x64
 8001a2a:	d901      	bls.n	8001a30 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8001a2c:	2303      	movs	r3, #3
 8001a2e:	e1f5      	b.n	8001e1c <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a30:	4b0b      	ldr	r3, [pc, #44]	@ (8001a60 <HAL_RCC_OscConfig+0x344>)
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	2380      	movs	r3, #128	@ 0x80
 8001a36:	005b      	lsls	r3, r3, #1
 8001a38:	4013      	ands	r3, r2
 8001a3a:	d0f0      	beq.n	8001a1e <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d10f      	bne.n	8001a64 <HAL_RCC_OscConfig+0x348>
 8001a44:	4b03      	ldr	r3, [pc, #12]	@ (8001a54 <HAL_RCC_OscConfig+0x338>)
 8001a46:	6a1a      	ldr	r2, [r3, #32]
 8001a48:	4b02      	ldr	r3, [pc, #8]	@ (8001a54 <HAL_RCC_OscConfig+0x338>)
 8001a4a:	2101      	movs	r1, #1
 8001a4c:	430a      	orrs	r2, r1
 8001a4e:	621a      	str	r2, [r3, #32]
 8001a50:	e036      	b.n	8001ac0 <HAL_RCC_OscConfig+0x3a4>
 8001a52:	46c0      	nop			@ (mov r8, r8)
 8001a54:	40021000 	.word	0x40021000
 8001a58:	fffeffff 	.word	0xfffeffff
 8001a5c:	fffbffff 	.word	0xfffbffff
 8001a60:	40007000 	.word	0x40007000
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d10c      	bne.n	8001a86 <HAL_RCC_OscConfig+0x36a>
 8001a6c:	4bca      	ldr	r3, [pc, #808]	@ (8001d98 <HAL_RCC_OscConfig+0x67c>)
 8001a6e:	6a1a      	ldr	r2, [r3, #32]
 8001a70:	4bc9      	ldr	r3, [pc, #804]	@ (8001d98 <HAL_RCC_OscConfig+0x67c>)
 8001a72:	2101      	movs	r1, #1
 8001a74:	438a      	bics	r2, r1
 8001a76:	621a      	str	r2, [r3, #32]
 8001a78:	4bc7      	ldr	r3, [pc, #796]	@ (8001d98 <HAL_RCC_OscConfig+0x67c>)
 8001a7a:	6a1a      	ldr	r2, [r3, #32]
 8001a7c:	4bc6      	ldr	r3, [pc, #792]	@ (8001d98 <HAL_RCC_OscConfig+0x67c>)
 8001a7e:	2104      	movs	r1, #4
 8001a80:	438a      	bics	r2, r1
 8001a82:	621a      	str	r2, [r3, #32]
 8001a84:	e01c      	b.n	8001ac0 <HAL_RCC_OscConfig+0x3a4>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	2b05      	cmp	r3, #5
 8001a8c:	d10c      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x38c>
 8001a8e:	4bc2      	ldr	r3, [pc, #776]	@ (8001d98 <HAL_RCC_OscConfig+0x67c>)
 8001a90:	6a1a      	ldr	r2, [r3, #32]
 8001a92:	4bc1      	ldr	r3, [pc, #772]	@ (8001d98 <HAL_RCC_OscConfig+0x67c>)
 8001a94:	2104      	movs	r1, #4
 8001a96:	430a      	orrs	r2, r1
 8001a98:	621a      	str	r2, [r3, #32]
 8001a9a:	4bbf      	ldr	r3, [pc, #764]	@ (8001d98 <HAL_RCC_OscConfig+0x67c>)
 8001a9c:	6a1a      	ldr	r2, [r3, #32]
 8001a9e:	4bbe      	ldr	r3, [pc, #760]	@ (8001d98 <HAL_RCC_OscConfig+0x67c>)
 8001aa0:	2101      	movs	r1, #1
 8001aa2:	430a      	orrs	r2, r1
 8001aa4:	621a      	str	r2, [r3, #32]
 8001aa6:	e00b      	b.n	8001ac0 <HAL_RCC_OscConfig+0x3a4>
 8001aa8:	4bbb      	ldr	r3, [pc, #748]	@ (8001d98 <HAL_RCC_OscConfig+0x67c>)
 8001aaa:	6a1a      	ldr	r2, [r3, #32]
 8001aac:	4bba      	ldr	r3, [pc, #744]	@ (8001d98 <HAL_RCC_OscConfig+0x67c>)
 8001aae:	2101      	movs	r1, #1
 8001ab0:	438a      	bics	r2, r1
 8001ab2:	621a      	str	r2, [r3, #32]
 8001ab4:	4bb8      	ldr	r3, [pc, #736]	@ (8001d98 <HAL_RCC_OscConfig+0x67c>)
 8001ab6:	6a1a      	ldr	r2, [r3, #32]
 8001ab8:	4bb7      	ldr	r3, [pc, #732]	@ (8001d98 <HAL_RCC_OscConfig+0x67c>)
 8001aba:	2104      	movs	r1, #4
 8001abc:	438a      	bics	r2, r1
 8001abe:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d014      	beq.n	8001af2 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ac8:	f7ff f940 	bl	8000d4c <HAL_GetTick>
 8001acc:	0003      	movs	r3, r0
 8001ace:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ad0:	e009      	b.n	8001ae6 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ad2:	f7ff f93b 	bl	8000d4c <HAL_GetTick>
 8001ad6:	0002      	movs	r2, r0
 8001ad8:	69bb      	ldr	r3, [r7, #24]
 8001ada:	1ad3      	subs	r3, r2, r3
 8001adc:	4aaf      	ldr	r2, [pc, #700]	@ (8001d9c <HAL_RCC_OscConfig+0x680>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d901      	bls.n	8001ae6 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	e19a      	b.n	8001e1c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ae6:	4bac      	ldr	r3, [pc, #688]	@ (8001d98 <HAL_RCC_OscConfig+0x67c>)
 8001ae8:	6a1b      	ldr	r3, [r3, #32]
 8001aea:	2202      	movs	r2, #2
 8001aec:	4013      	ands	r3, r2
 8001aee:	d0f0      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x3b6>
 8001af0:	e013      	b.n	8001b1a <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001af2:	f7ff f92b 	bl	8000d4c <HAL_GetTick>
 8001af6:	0003      	movs	r3, r0
 8001af8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001afa:	e009      	b.n	8001b10 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001afc:	f7ff f926 	bl	8000d4c <HAL_GetTick>
 8001b00:	0002      	movs	r2, r0
 8001b02:	69bb      	ldr	r3, [r7, #24]
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	4aa5      	ldr	r2, [pc, #660]	@ (8001d9c <HAL_RCC_OscConfig+0x680>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d901      	bls.n	8001b10 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	e185      	b.n	8001e1c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b10:	4ba1      	ldr	r3, [pc, #644]	@ (8001d98 <HAL_RCC_OscConfig+0x67c>)
 8001b12:	6a1b      	ldr	r3, [r3, #32]
 8001b14:	2202      	movs	r2, #2
 8001b16:	4013      	ands	r3, r2
 8001b18:	d1f0      	bne.n	8001afc <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001b1a:	231f      	movs	r3, #31
 8001b1c:	18fb      	adds	r3, r7, r3
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d105      	bne.n	8001b30 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b24:	4b9c      	ldr	r3, [pc, #624]	@ (8001d98 <HAL_RCC_OscConfig+0x67c>)
 8001b26:	69da      	ldr	r2, [r3, #28]
 8001b28:	4b9b      	ldr	r3, [pc, #620]	@ (8001d98 <HAL_RCC_OscConfig+0x67c>)
 8001b2a:	499d      	ldr	r1, [pc, #628]	@ (8001da0 <HAL_RCC_OscConfig+0x684>)
 8001b2c:	400a      	ands	r2, r1
 8001b2e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	2210      	movs	r2, #16
 8001b36:	4013      	ands	r3, r2
 8001b38:	d063      	beq.n	8001c02 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	695b      	ldr	r3, [r3, #20]
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d12a      	bne.n	8001b98 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001b42:	4b95      	ldr	r3, [pc, #596]	@ (8001d98 <HAL_RCC_OscConfig+0x67c>)
 8001b44:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b46:	4b94      	ldr	r3, [pc, #592]	@ (8001d98 <HAL_RCC_OscConfig+0x67c>)
 8001b48:	2104      	movs	r1, #4
 8001b4a:	430a      	orrs	r2, r1
 8001b4c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001b4e:	4b92      	ldr	r3, [pc, #584]	@ (8001d98 <HAL_RCC_OscConfig+0x67c>)
 8001b50:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b52:	4b91      	ldr	r3, [pc, #580]	@ (8001d98 <HAL_RCC_OscConfig+0x67c>)
 8001b54:	2101      	movs	r1, #1
 8001b56:	430a      	orrs	r2, r1
 8001b58:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b5a:	f7ff f8f7 	bl	8000d4c <HAL_GetTick>
 8001b5e:	0003      	movs	r3, r0
 8001b60:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001b62:	e008      	b.n	8001b76 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001b64:	f7ff f8f2 	bl	8000d4c <HAL_GetTick>
 8001b68:	0002      	movs	r2, r0
 8001b6a:	69bb      	ldr	r3, [r7, #24]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d901      	bls.n	8001b76 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8001b72:	2303      	movs	r3, #3
 8001b74:	e152      	b.n	8001e1c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001b76:	4b88      	ldr	r3, [pc, #544]	@ (8001d98 <HAL_RCC_OscConfig+0x67c>)
 8001b78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b7a:	2202      	movs	r2, #2
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	d0f1      	beq.n	8001b64 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001b80:	4b85      	ldr	r3, [pc, #532]	@ (8001d98 <HAL_RCC_OscConfig+0x67c>)
 8001b82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b84:	22f8      	movs	r2, #248	@ 0xf8
 8001b86:	4393      	bics	r3, r2
 8001b88:	0019      	movs	r1, r3
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	699b      	ldr	r3, [r3, #24]
 8001b8e:	00da      	lsls	r2, r3, #3
 8001b90:	4b81      	ldr	r3, [pc, #516]	@ (8001d98 <HAL_RCC_OscConfig+0x67c>)
 8001b92:	430a      	orrs	r2, r1
 8001b94:	635a      	str	r2, [r3, #52]	@ 0x34
 8001b96:	e034      	b.n	8001c02 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	695b      	ldr	r3, [r3, #20]
 8001b9c:	3305      	adds	r3, #5
 8001b9e:	d111      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001ba0:	4b7d      	ldr	r3, [pc, #500]	@ (8001d98 <HAL_RCC_OscConfig+0x67c>)
 8001ba2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001ba4:	4b7c      	ldr	r3, [pc, #496]	@ (8001d98 <HAL_RCC_OscConfig+0x67c>)
 8001ba6:	2104      	movs	r1, #4
 8001ba8:	438a      	bics	r2, r1
 8001baa:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001bac:	4b7a      	ldr	r3, [pc, #488]	@ (8001d98 <HAL_RCC_OscConfig+0x67c>)
 8001bae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bb0:	22f8      	movs	r2, #248	@ 0xf8
 8001bb2:	4393      	bics	r3, r2
 8001bb4:	0019      	movs	r1, r3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	699b      	ldr	r3, [r3, #24]
 8001bba:	00da      	lsls	r2, r3, #3
 8001bbc:	4b76      	ldr	r3, [pc, #472]	@ (8001d98 <HAL_RCC_OscConfig+0x67c>)
 8001bbe:	430a      	orrs	r2, r1
 8001bc0:	635a      	str	r2, [r3, #52]	@ 0x34
 8001bc2:	e01e      	b.n	8001c02 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001bc4:	4b74      	ldr	r3, [pc, #464]	@ (8001d98 <HAL_RCC_OscConfig+0x67c>)
 8001bc6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001bc8:	4b73      	ldr	r3, [pc, #460]	@ (8001d98 <HAL_RCC_OscConfig+0x67c>)
 8001bca:	2104      	movs	r1, #4
 8001bcc:	430a      	orrs	r2, r1
 8001bce:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001bd0:	4b71      	ldr	r3, [pc, #452]	@ (8001d98 <HAL_RCC_OscConfig+0x67c>)
 8001bd2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001bd4:	4b70      	ldr	r3, [pc, #448]	@ (8001d98 <HAL_RCC_OscConfig+0x67c>)
 8001bd6:	2101      	movs	r1, #1
 8001bd8:	438a      	bics	r2, r1
 8001bda:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bdc:	f7ff f8b6 	bl	8000d4c <HAL_GetTick>
 8001be0:	0003      	movs	r3, r0
 8001be2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001be4:	e008      	b.n	8001bf8 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001be6:	f7ff f8b1 	bl	8000d4c <HAL_GetTick>
 8001bea:	0002      	movs	r2, r0
 8001bec:	69bb      	ldr	r3, [r7, #24]
 8001bee:	1ad3      	subs	r3, r2, r3
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	d901      	bls.n	8001bf8 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001bf4:	2303      	movs	r3, #3
 8001bf6:	e111      	b.n	8001e1c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001bf8:	4b67      	ldr	r3, [pc, #412]	@ (8001d98 <HAL_RCC_OscConfig+0x67c>)
 8001bfa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bfc:	2202      	movs	r2, #2
 8001bfe:	4013      	ands	r3, r2
 8001c00:	d1f1      	bne.n	8001be6 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	2220      	movs	r2, #32
 8001c08:	4013      	ands	r3, r2
 8001c0a:	d05c      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001c0c:	4b62      	ldr	r3, [pc, #392]	@ (8001d98 <HAL_RCC_OscConfig+0x67c>)
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	220c      	movs	r2, #12
 8001c12:	4013      	ands	r3, r2
 8001c14:	2b0c      	cmp	r3, #12
 8001c16:	d00e      	beq.n	8001c36 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001c18:	4b5f      	ldr	r3, [pc, #380]	@ (8001d98 <HAL_RCC_OscConfig+0x67c>)
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	220c      	movs	r2, #12
 8001c1e:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001c20:	2b08      	cmp	r3, #8
 8001c22:	d114      	bne.n	8001c4e <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001c24:	4b5c      	ldr	r3, [pc, #368]	@ (8001d98 <HAL_RCC_OscConfig+0x67c>)
 8001c26:	685a      	ldr	r2, [r3, #4]
 8001c28:	23c0      	movs	r3, #192	@ 0xc0
 8001c2a:	025b      	lsls	r3, r3, #9
 8001c2c:	401a      	ands	r2, r3
 8001c2e:	23c0      	movs	r3, #192	@ 0xc0
 8001c30:	025b      	lsls	r3, r3, #9
 8001c32:	429a      	cmp	r2, r3
 8001c34:	d10b      	bne.n	8001c4e <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001c36:	4b58      	ldr	r3, [pc, #352]	@ (8001d98 <HAL_RCC_OscConfig+0x67c>)
 8001c38:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001c3a:	2380      	movs	r3, #128	@ 0x80
 8001c3c:	029b      	lsls	r3, r3, #10
 8001c3e:	4013      	ands	r3, r2
 8001c40:	d040      	beq.n	8001cc4 <HAL_RCC_OscConfig+0x5a8>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6a1b      	ldr	r3, [r3, #32]
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d03c      	beq.n	8001cc4 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e0e6      	b.n	8001e1c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6a1b      	ldr	r3, [r3, #32]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d01b      	beq.n	8001c8e <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001c56:	4b50      	ldr	r3, [pc, #320]	@ (8001d98 <HAL_RCC_OscConfig+0x67c>)
 8001c58:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001c5a:	4b4f      	ldr	r3, [pc, #316]	@ (8001d98 <HAL_RCC_OscConfig+0x67c>)
 8001c5c:	2180      	movs	r1, #128	@ 0x80
 8001c5e:	0249      	lsls	r1, r1, #9
 8001c60:	430a      	orrs	r2, r1
 8001c62:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c64:	f7ff f872 	bl	8000d4c <HAL_GetTick>
 8001c68:	0003      	movs	r3, r0
 8001c6a:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001c6c:	e008      	b.n	8001c80 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c6e:	f7ff f86d 	bl	8000d4c <HAL_GetTick>
 8001c72:	0002      	movs	r2, r0
 8001c74:	69bb      	ldr	r3, [r7, #24]
 8001c76:	1ad3      	subs	r3, r2, r3
 8001c78:	2b02      	cmp	r3, #2
 8001c7a:	d901      	bls.n	8001c80 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001c7c:	2303      	movs	r3, #3
 8001c7e:	e0cd      	b.n	8001e1c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001c80:	4b45      	ldr	r3, [pc, #276]	@ (8001d98 <HAL_RCC_OscConfig+0x67c>)
 8001c82:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001c84:	2380      	movs	r3, #128	@ 0x80
 8001c86:	029b      	lsls	r3, r3, #10
 8001c88:	4013      	ands	r3, r2
 8001c8a:	d0f0      	beq.n	8001c6e <HAL_RCC_OscConfig+0x552>
 8001c8c:	e01b      	b.n	8001cc6 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001c8e:	4b42      	ldr	r3, [pc, #264]	@ (8001d98 <HAL_RCC_OscConfig+0x67c>)
 8001c90:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001c92:	4b41      	ldr	r3, [pc, #260]	@ (8001d98 <HAL_RCC_OscConfig+0x67c>)
 8001c94:	4943      	ldr	r1, [pc, #268]	@ (8001da4 <HAL_RCC_OscConfig+0x688>)
 8001c96:	400a      	ands	r2, r1
 8001c98:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c9a:	f7ff f857 	bl	8000d4c <HAL_GetTick>
 8001c9e:	0003      	movs	r3, r0
 8001ca0:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001ca2:	e008      	b.n	8001cb6 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ca4:	f7ff f852 	bl	8000d4c <HAL_GetTick>
 8001ca8:	0002      	movs	r2, r0
 8001caa:	69bb      	ldr	r3, [r7, #24]
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	2b02      	cmp	r3, #2
 8001cb0:	d901      	bls.n	8001cb6 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	e0b2      	b.n	8001e1c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001cb6:	4b38      	ldr	r3, [pc, #224]	@ (8001d98 <HAL_RCC_OscConfig+0x67c>)
 8001cb8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001cba:	2380      	movs	r3, #128	@ 0x80
 8001cbc:	029b      	lsls	r3, r3, #10
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	d1f0      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x588>
 8001cc2:	e000      	b.n	8001cc6 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001cc4:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d100      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x5b4>
 8001cce:	e0a4      	b.n	8001e1a <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cd0:	4b31      	ldr	r3, [pc, #196]	@ (8001d98 <HAL_RCC_OscConfig+0x67c>)
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	220c      	movs	r2, #12
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	2b08      	cmp	r3, #8
 8001cda:	d100      	bne.n	8001cde <HAL_RCC_OscConfig+0x5c2>
 8001cdc:	e078      	b.n	8001dd0 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d14c      	bne.n	8001d80 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ce6:	4b2c      	ldr	r3, [pc, #176]	@ (8001d98 <HAL_RCC_OscConfig+0x67c>)
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	4b2b      	ldr	r3, [pc, #172]	@ (8001d98 <HAL_RCC_OscConfig+0x67c>)
 8001cec:	492e      	ldr	r1, [pc, #184]	@ (8001da8 <HAL_RCC_OscConfig+0x68c>)
 8001cee:	400a      	ands	r2, r1
 8001cf0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cf2:	f7ff f82b 	bl	8000d4c <HAL_GetTick>
 8001cf6:	0003      	movs	r3, r0
 8001cf8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cfa:	e008      	b.n	8001d0e <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cfc:	f7ff f826 	bl	8000d4c <HAL_GetTick>
 8001d00:	0002      	movs	r2, r0
 8001d02:	69bb      	ldr	r3, [r7, #24]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d901      	bls.n	8001d0e <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e086      	b.n	8001e1c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d0e:	4b22      	ldr	r3, [pc, #136]	@ (8001d98 <HAL_RCC_OscConfig+0x67c>)
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	2380      	movs	r3, #128	@ 0x80
 8001d14:	049b      	lsls	r3, r3, #18
 8001d16:	4013      	ands	r3, r2
 8001d18:	d1f0      	bne.n	8001cfc <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d1a:	4b1f      	ldr	r3, [pc, #124]	@ (8001d98 <HAL_RCC_OscConfig+0x67c>)
 8001d1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d1e:	220f      	movs	r2, #15
 8001d20:	4393      	bics	r3, r2
 8001d22:	0019      	movs	r1, r3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001d28:	4b1b      	ldr	r3, [pc, #108]	@ (8001d98 <HAL_RCC_OscConfig+0x67c>)
 8001d2a:	430a      	orrs	r2, r1
 8001d2c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001d2e:	4b1a      	ldr	r3, [pc, #104]	@ (8001d98 <HAL_RCC_OscConfig+0x67c>)
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	4a1e      	ldr	r2, [pc, #120]	@ (8001dac <HAL_RCC_OscConfig+0x690>)
 8001d34:	4013      	ands	r3, r2
 8001d36:	0019      	movs	r1, r3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d40:	431a      	orrs	r2, r3
 8001d42:	4b15      	ldr	r3, [pc, #84]	@ (8001d98 <HAL_RCC_OscConfig+0x67c>)
 8001d44:	430a      	orrs	r2, r1
 8001d46:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d48:	4b13      	ldr	r3, [pc, #76]	@ (8001d98 <HAL_RCC_OscConfig+0x67c>)
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	4b12      	ldr	r3, [pc, #72]	@ (8001d98 <HAL_RCC_OscConfig+0x67c>)
 8001d4e:	2180      	movs	r1, #128	@ 0x80
 8001d50:	0449      	lsls	r1, r1, #17
 8001d52:	430a      	orrs	r2, r1
 8001d54:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d56:	f7fe fff9 	bl	8000d4c <HAL_GetTick>
 8001d5a:	0003      	movs	r3, r0
 8001d5c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d5e:	e008      	b.n	8001d72 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d60:	f7fe fff4 	bl	8000d4c <HAL_GetTick>
 8001d64:	0002      	movs	r2, r0
 8001d66:	69bb      	ldr	r3, [r7, #24]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d901      	bls.n	8001d72 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	e054      	b.n	8001e1c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d72:	4b09      	ldr	r3, [pc, #36]	@ (8001d98 <HAL_RCC_OscConfig+0x67c>)
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	2380      	movs	r3, #128	@ 0x80
 8001d78:	049b      	lsls	r3, r3, #18
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	d0f0      	beq.n	8001d60 <HAL_RCC_OscConfig+0x644>
 8001d7e:	e04c      	b.n	8001e1a <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d80:	4b05      	ldr	r3, [pc, #20]	@ (8001d98 <HAL_RCC_OscConfig+0x67c>)
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	4b04      	ldr	r3, [pc, #16]	@ (8001d98 <HAL_RCC_OscConfig+0x67c>)
 8001d86:	4908      	ldr	r1, [pc, #32]	@ (8001da8 <HAL_RCC_OscConfig+0x68c>)
 8001d88:	400a      	ands	r2, r1
 8001d8a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d8c:	f7fe ffde 	bl	8000d4c <HAL_GetTick>
 8001d90:	0003      	movs	r3, r0
 8001d92:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d94:	e015      	b.n	8001dc2 <HAL_RCC_OscConfig+0x6a6>
 8001d96:	46c0      	nop			@ (mov r8, r8)
 8001d98:	40021000 	.word	0x40021000
 8001d9c:	00001388 	.word	0x00001388
 8001da0:	efffffff 	.word	0xefffffff
 8001da4:	fffeffff 	.word	0xfffeffff
 8001da8:	feffffff 	.word	0xfeffffff
 8001dac:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001db0:	f7fe ffcc 	bl	8000d4c <HAL_GetTick>
 8001db4:	0002      	movs	r2, r0
 8001db6:	69bb      	ldr	r3, [r7, #24]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d901      	bls.n	8001dc2 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e02c      	b.n	8001e1c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dc2:	4b18      	ldr	r3, [pc, #96]	@ (8001e24 <HAL_RCC_OscConfig+0x708>)
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	2380      	movs	r3, #128	@ 0x80
 8001dc8:	049b      	lsls	r3, r3, #18
 8001dca:	4013      	ands	r3, r2
 8001dcc:	d1f0      	bne.n	8001db0 <HAL_RCC_OscConfig+0x694>
 8001dce:	e024      	b.n	8001e1a <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d101      	bne.n	8001ddc <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e01f      	b.n	8001e1c <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001ddc:	4b11      	ldr	r3, [pc, #68]	@ (8001e24 <HAL_RCC_OscConfig+0x708>)
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001de2:	4b10      	ldr	r3, [pc, #64]	@ (8001e24 <HAL_RCC_OscConfig+0x708>)
 8001de4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001de6:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001de8:	697a      	ldr	r2, [r7, #20]
 8001dea:	23c0      	movs	r3, #192	@ 0xc0
 8001dec:	025b      	lsls	r3, r3, #9
 8001dee:	401a      	ands	r2, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d10e      	bne.n	8001e16 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	220f      	movs	r2, #15
 8001dfc:	401a      	ands	r2, r3
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e02:	429a      	cmp	r2, r3
 8001e04:	d107      	bne.n	8001e16 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001e06:	697a      	ldr	r2, [r7, #20]
 8001e08:	23f0      	movs	r3, #240	@ 0xf0
 8001e0a:	039b      	lsls	r3, r3, #14
 8001e0c:	401a      	ands	r2, r3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d001      	beq.n	8001e1a <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e000      	b.n	8001e1c <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8001e1a:	2300      	movs	r3, #0
}
 8001e1c:	0018      	movs	r0, r3
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	b008      	add	sp, #32
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	40021000 	.word	0x40021000

08001e28 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b084      	sub	sp, #16
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d101      	bne.n	8001e3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e0bf      	b.n	8001fbc <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e3c:	4b61      	ldr	r3, [pc, #388]	@ (8001fc4 <HAL_RCC_ClockConfig+0x19c>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2201      	movs	r2, #1
 8001e42:	4013      	ands	r3, r2
 8001e44:	683a      	ldr	r2, [r7, #0]
 8001e46:	429a      	cmp	r2, r3
 8001e48:	d911      	bls.n	8001e6e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e4a:	4b5e      	ldr	r3, [pc, #376]	@ (8001fc4 <HAL_RCC_ClockConfig+0x19c>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	2201      	movs	r2, #1
 8001e50:	4393      	bics	r3, r2
 8001e52:	0019      	movs	r1, r3
 8001e54:	4b5b      	ldr	r3, [pc, #364]	@ (8001fc4 <HAL_RCC_ClockConfig+0x19c>)
 8001e56:	683a      	ldr	r2, [r7, #0]
 8001e58:	430a      	orrs	r2, r1
 8001e5a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e5c:	4b59      	ldr	r3, [pc, #356]	@ (8001fc4 <HAL_RCC_ClockConfig+0x19c>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	2201      	movs	r2, #1
 8001e62:	4013      	ands	r3, r2
 8001e64:	683a      	ldr	r2, [r7, #0]
 8001e66:	429a      	cmp	r2, r3
 8001e68:	d001      	beq.n	8001e6e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e0a6      	b.n	8001fbc <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	2202      	movs	r2, #2
 8001e74:	4013      	ands	r3, r2
 8001e76:	d015      	beq.n	8001ea4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	2204      	movs	r2, #4
 8001e7e:	4013      	ands	r3, r2
 8001e80:	d006      	beq.n	8001e90 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001e82:	4b51      	ldr	r3, [pc, #324]	@ (8001fc8 <HAL_RCC_ClockConfig+0x1a0>)
 8001e84:	685a      	ldr	r2, [r3, #4]
 8001e86:	4b50      	ldr	r3, [pc, #320]	@ (8001fc8 <HAL_RCC_ClockConfig+0x1a0>)
 8001e88:	21e0      	movs	r1, #224	@ 0xe0
 8001e8a:	00c9      	lsls	r1, r1, #3
 8001e8c:	430a      	orrs	r2, r1
 8001e8e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e90:	4b4d      	ldr	r3, [pc, #308]	@ (8001fc8 <HAL_RCC_ClockConfig+0x1a0>)
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	22f0      	movs	r2, #240	@ 0xf0
 8001e96:	4393      	bics	r3, r2
 8001e98:	0019      	movs	r1, r3
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	689a      	ldr	r2, [r3, #8]
 8001e9e:	4b4a      	ldr	r3, [pc, #296]	@ (8001fc8 <HAL_RCC_ClockConfig+0x1a0>)
 8001ea0:	430a      	orrs	r2, r1
 8001ea2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	4013      	ands	r3, r2
 8001eac:	d04c      	beq.n	8001f48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d107      	bne.n	8001ec6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eb6:	4b44      	ldr	r3, [pc, #272]	@ (8001fc8 <HAL_RCC_ClockConfig+0x1a0>)
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	2380      	movs	r3, #128	@ 0x80
 8001ebc:	029b      	lsls	r3, r3, #10
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	d120      	bne.n	8001f04 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e07a      	b.n	8001fbc <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d107      	bne.n	8001ede <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ece:	4b3e      	ldr	r3, [pc, #248]	@ (8001fc8 <HAL_RCC_ClockConfig+0x1a0>)
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	2380      	movs	r3, #128	@ 0x80
 8001ed4:	049b      	lsls	r3, r3, #18
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	d114      	bne.n	8001f04 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e06e      	b.n	8001fbc <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	2b03      	cmp	r3, #3
 8001ee4:	d107      	bne.n	8001ef6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001ee6:	4b38      	ldr	r3, [pc, #224]	@ (8001fc8 <HAL_RCC_ClockConfig+0x1a0>)
 8001ee8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001eea:	2380      	movs	r3, #128	@ 0x80
 8001eec:	029b      	lsls	r3, r3, #10
 8001eee:	4013      	ands	r3, r2
 8001ef0:	d108      	bne.n	8001f04 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e062      	b.n	8001fbc <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ef6:	4b34      	ldr	r3, [pc, #208]	@ (8001fc8 <HAL_RCC_ClockConfig+0x1a0>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	2202      	movs	r2, #2
 8001efc:	4013      	ands	r3, r2
 8001efe:	d101      	bne.n	8001f04 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e05b      	b.n	8001fbc <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f04:	4b30      	ldr	r3, [pc, #192]	@ (8001fc8 <HAL_RCC_ClockConfig+0x1a0>)
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	2203      	movs	r2, #3
 8001f0a:	4393      	bics	r3, r2
 8001f0c:	0019      	movs	r1, r3
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	685a      	ldr	r2, [r3, #4]
 8001f12:	4b2d      	ldr	r3, [pc, #180]	@ (8001fc8 <HAL_RCC_ClockConfig+0x1a0>)
 8001f14:	430a      	orrs	r2, r1
 8001f16:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f18:	f7fe ff18 	bl	8000d4c <HAL_GetTick>
 8001f1c:	0003      	movs	r3, r0
 8001f1e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f20:	e009      	b.n	8001f36 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f22:	f7fe ff13 	bl	8000d4c <HAL_GetTick>
 8001f26:	0002      	movs	r2, r0
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	4a27      	ldr	r2, [pc, #156]	@ (8001fcc <HAL_RCC_ClockConfig+0x1a4>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d901      	bls.n	8001f36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e042      	b.n	8001fbc <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f36:	4b24      	ldr	r3, [pc, #144]	@ (8001fc8 <HAL_RCC_ClockConfig+0x1a0>)
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	220c      	movs	r2, #12
 8001f3c:	401a      	ands	r2, r3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d1ec      	bne.n	8001f22 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f48:	4b1e      	ldr	r3, [pc, #120]	@ (8001fc4 <HAL_RCC_ClockConfig+0x19c>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	4013      	ands	r3, r2
 8001f50:	683a      	ldr	r2, [r7, #0]
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d211      	bcs.n	8001f7a <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f56:	4b1b      	ldr	r3, [pc, #108]	@ (8001fc4 <HAL_RCC_ClockConfig+0x19c>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	4393      	bics	r3, r2
 8001f5e:	0019      	movs	r1, r3
 8001f60:	4b18      	ldr	r3, [pc, #96]	@ (8001fc4 <HAL_RCC_ClockConfig+0x19c>)
 8001f62:	683a      	ldr	r2, [r7, #0]
 8001f64:	430a      	orrs	r2, r1
 8001f66:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f68:	4b16      	ldr	r3, [pc, #88]	@ (8001fc4 <HAL_RCC_ClockConfig+0x19c>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	4013      	ands	r3, r2
 8001f70:	683a      	ldr	r2, [r7, #0]
 8001f72:	429a      	cmp	r2, r3
 8001f74:	d001      	beq.n	8001f7a <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e020      	b.n	8001fbc <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	2204      	movs	r2, #4
 8001f80:	4013      	ands	r3, r2
 8001f82:	d009      	beq.n	8001f98 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001f84:	4b10      	ldr	r3, [pc, #64]	@ (8001fc8 <HAL_RCC_ClockConfig+0x1a0>)
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	4a11      	ldr	r2, [pc, #68]	@ (8001fd0 <HAL_RCC_ClockConfig+0x1a8>)
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	0019      	movs	r1, r3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	68da      	ldr	r2, [r3, #12]
 8001f92:	4b0d      	ldr	r3, [pc, #52]	@ (8001fc8 <HAL_RCC_ClockConfig+0x1a0>)
 8001f94:	430a      	orrs	r2, r1
 8001f96:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001f98:	f000 f820 	bl	8001fdc <HAL_RCC_GetSysClockFreq>
 8001f9c:	0001      	movs	r1, r0
 8001f9e:	4b0a      	ldr	r3, [pc, #40]	@ (8001fc8 <HAL_RCC_ClockConfig+0x1a0>)
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	091b      	lsrs	r3, r3, #4
 8001fa4:	220f      	movs	r2, #15
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	4a0a      	ldr	r2, [pc, #40]	@ (8001fd4 <HAL_RCC_ClockConfig+0x1ac>)
 8001faa:	5cd3      	ldrb	r3, [r2, r3]
 8001fac:	000a      	movs	r2, r1
 8001fae:	40da      	lsrs	r2, r3
 8001fb0:	4b09      	ldr	r3, [pc, #36]	@ (8001fd8 <HAL_RCC_ClockConfig+0x1b0>)
 8001fb2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001fb4:	2000      	movs	r0, #0
 8001fb6:	f7fe fe83 	bl	8000cc0 <HAL_InitTick>
  
  return HAL_OK;
 8001fba:	2300      	movs	r3, #0
}
 8001fbc:	0018      	movs	r0, r3
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	b004      	add	sp, #16
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	40022000 	.word	0x40022000
 8001fc8:	40021000 	.word	0x40021000
 8001fcc:	00001388 	.word	0x00001388
 8001fd0:	fffff8ff 	.word	0xfffff8ff
 8001fd4:	08004708 	.word	0x08004708
 8001fd8:	20000000 	.word	0x20000000

08001fdc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b086      	sub	sp, #24
 8001fe0:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	60fb      	str	r3, [r7, #12]
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	60bb      	str	r3, [r7, #8]
 8001fea:	2300      	movs	r3, #0
 8001fec:	617b      	str	r3, [r7, #20]
 8001fee:	2300      	movs	r3, #0
 8001ff0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001ff6:	4b2d      	ldr	r3, [pc, #180]	@ (80020ac <HAL_RCC_GetSysClockFreq+0xd0>)
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	220c      	movs	r2, #12
 8002000:	4013      	ands	r3, r2
 8002002:	2b0c      	cmp	r3, #12
 8002004:	d046      	beq.n	8002094 <HAL_RCC_GetSysClockFreq+0xb8>
 8002006:	d848      	bhi.n	800209a <HAL_RCC_GetSysClockFreq+0xbe>
 8002008:	2b04      	cmp	r3, #4
 800200a:	d002      	beq.n	8002012 <HAL_RCC_GetSysClockFreq+0x36>
 800200c:	2b08      	cmp	r3, #8
 800200e:	d003      	beq.n	8002018 <HAL_RCC_GetSysClockFreq+0x3c>
 8002010:	e043      	b.n	800209a <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002012:	4b27      	ldr	r3, [pc, #156]	@ (80020b0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002014:	613b      	str	r3, [r7, #16]
      break;
 8002016:	e043      	b.n	80020a0 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	0c9b      	lsrs	r3, r3, #18
 800201c:	220f      	movs	r2, #15
 800201e:	4013      	ands	r3, r2
 8002020:	4a24      	ldr	r2, [pc, #144]	@ (80020b4 <HAL_RCC_GetSysClockFreq+0xd8>)
 8002022:	5cd3      	ldrb	r3, [r2, r3]
 8002024:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002026:	4b21      	ldr	r3, [pc, #132]	@ (80020ac <HAL_RCC_GetSysClockFreq+0xd0>)
 8002028:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800202a:	220f      	movs	r2, #15
 800202c:	4013      	ands	r3, r2
 800202e:	4a22      	ldr	r2, [pc, #136]	@ (80020b8 <HAL_RCC_GetSysClockFreq+0xdc>)
 8002030:	5cd3      	ldrb	r3, [r2, r3]
 8002032:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002034:	68fa      	ldr	r2, [r7, #12]
 8002036:	23c0      	movs	r3, #192	@ 0xc0
 8002038:	025b      	lsls	r3, r3, #9
 800203a:	401a      	ands	r2, r3
 800203c:	2380      	movs	r3, #128	@ 0x80
 800203e:	025b      	lsls	r3, r3, #9
 8002040:	429a      	cmp	r2, r3
 8002042:	d109      	bne.n	8002058 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002044:	68b9      	ldr	r1, [r7, #8]
 8002046:	481a      	ldr	r0, [pc, #104]	@ (80020b0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002048:	f7fe f85e 	bl	8000108 <__udivsi3>
 800204c:	0003      	movs	r3, r0
 800204e:	001a      	movs	r2, r3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	4353      	muls	r3, r2
 8002054:	617b      	str	r3, [r7, #20]
 8002056:	e01a      	b.n	800208e <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002058:	68fa      	ldr	r2, [r7, #12]
 800205a:	23c0      	movs	r3, #192	@ 0xc0
 800205c:	025b      	lsls	r3, r3, #9
 800205e:	401a      	ands	r2, r3
 8002060:	23c0      	movs	r3, #192	@ 0xc0
 8002062:	025b      	lsls	r3, r3, #9
 8002064:	429a      	cmp	r2, r3
 8002066:	d109      	bne.n	800207c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002068:	68b9      	ldr	r1, [r7, #8]
 800206a:	4814      	ldr	r0, [pc, #80]	@ (80020bc <HAL_RCC_GetSysClockFreq+0xe0>)
 800206c:	f7fe f84c 	bl	8000108 <__udivsi3>
 8002070:	0003      	movs	r3, r0
 8002072:	001a      	movs	r2, r3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	4353      	muls	r3, r2
 8002078:	617b      	str	r3, [r7, #20]
 800207a:	e008      	b.n	800208e <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800207c:	68b9      	ldr	r1, [r7, #8]
 800207e:	480c      	ldr	r0, [pc, #48]	@ (80020b0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002080:	f7fe f842 	bl	8000108 <__udivsi3>
 8002084:	0003      	movs	r3, r0
 8002086:	001a      	movs	r2, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	4353      	muls	r3, r2
 800208c:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	613b      	str	r3, [r7, #16]
      break;
 8002092:	e005      	b.n	80020a0 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8002094:	4b09      	ldr	r3, [pc, #36]	@ (80020bc <HAL_RCC_GetSysClockFreq+0xe0>)
 8002096:	613b      	str	r3, [r7, #16]
      break;
 8002098:	e002      	b.n	80020a0 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800209a:	4b05      	ldr	r3, [pc, #20]	@ (80020b0 <HAL_RCC_GetSysClockFreq+0xd4>)
 800209c:	613b      	str	r3, [r7, #16]
      break;
 800209e:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80020a0:	693b      	ldr	r3, [r7, #16]
}
 80020a2:	0018      	movs	r0, r3
 80020a4:	46bd      	mov	sp, r7
 80020a6:	b006      	add	sp, #24
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	46c0      	nop			@ (mov r8, r8)
 80020ac:	40021000 	.word	0x40021000
 80020b0:	007a1200 	.word	0x007a1200
 80020b4:	08004720 	.word	0x08004720
 80020b8:	08004730 	.word	0x08004730
 80020bc:	02dc6c00 	.word	0x02dc6c00

080020c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020c4:	4b02      	ldr	r3, [pc, #8]	@ (80020d0 <HAL_RCC_GetHCLKFreq+0x10>)
 80020c6:	681b      	ldr	r3, [r3, #0]
}
 80020c8:	0018      	movs	r0, r3
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	46c0      	nop			@ (mov r8, r8)
 80020d0:	20000000 	.word	0x20000000

080020d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80020d8:	f7ff fff2 	bl	80020c0 <HAL_RCC_GetHCLKFreq>
 80020dc:	0001      	movs	r1, r0
 80020de:	4b06      	ldr	r3, [pc, #24]	@ (80020f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	0a1b      	lsrs	r3, r3, #8
 80020e4:	2207      	movs	r2, #7
 80020e6:	4013      	ands	r3, r2
 80020e8:	4a04      	ldr	r2, [pc, #16]	@ (80020fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80020ea:	5cd3      	ldrb	r3, [r2, r3]
 80020ec:	40d9      	lsrs	r1, r3
 80020ee:	000b      	movs	r3, r1
}    
 80020f0:	0018      	movs	r0, r3
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	46c0      	nop			@ (mov r8, r8)
 80020f8:	40021000 	.word	0x40021000
 80020fc:	08004718 	.word	0x08004718

08002100 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b086      	sub	sp, #24
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002108:	2300      	movs	r3, #0
 800210a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 800210c:	2300      	movs	r3, #0
 800210e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	2380      	movs	r3, #128	@ 0x80
 8002116:	025b      	lsls	r3, r3, #9
 8002118:	4013      	ands	r3, r2
 800211a:	d100      	bne.n	800211e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 800211c:	e08e      	b.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800211e:	2017      	movs	r0, #23
 8002120:	183b      	adds	r3, r7, r0
 8002122:	2200      	movs	r2, #0
 8002124:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002126:	4b6e      	ldr	r3, [pc, #440]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002128:	69da      	ldr	r2, [r3, #28]
 800212a:	2380      	movs	r3, #128	@ 0x80
 800212c:	055b      	lsls	r3, r3, #21
 800212e:	4013      	ands	r3, r2
 8002130:	d110      	bne.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002132:	4b6b      	ldr	r3, [pc, #428]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002134:	69da      	ldr	r2, [r3, #28]
 8002136:	4b6a      	ldr	r3, [pc, #424]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002138:	2180      	movs	r1, #128	@ 0x80
 800213a:	0549      	lsls	r1, r1, #21
 800213c:	430a      	orrs	r2, r1
 800213e:	61da      	str	r2, [r3, #28]
 8002140:	4b67      	ldr	r3, [pc, #412]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002142:	69da      	ldr	r2, [r3, #28]
 8002144:	2380      	movs	r3, #128	@ 0x80
 8002146:	055b      	lsls	r3, r3, #21
 8002148:	4013      	ands	r3, r2
 800214a:	60bb      	str	r3, [r7, #8]
 800214c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800214e:	183b      	adds	r3, r7, r0
 8002150:	2201      	movs	r2, #1
 8002152:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002154:	4b63      	ldr	r3, [pc, #396]	@ (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	2380      	movs	r3, #128	@ 0x80
 800215a:	005b      	lsls	r3, r3, #1
 800215c:	4013      	ands	r3, r2
 800215e:	d11a      	bne.n	8002196 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002160:	4b60      	ldr	r3, [pc, #384]	@ (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	4b5f      	ldr	r3, [pc, #380]	@ (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002166:	2180      	movs	r1, #128	@ 0x80
 8002168:	0049      	lsls	r1, r1, #1
 800216a:	430a      	orrs	r2, r1
 800216c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800216e:	f7fe fded 	bl	8000d4c <HAL_GetTick>
 8002172:	0003      	movs	r3, r0
 8002174:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002176:	e008      	b.n	800218a <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002178:	f7fe fde8 	bl	8000d4c <HAL_GetTick>
 800217c:	0002      	movs	r2, r0
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	2b64      	cmp	r3, #100	@ 0x64
 8002184:	d901      	bls.n	800218a <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	e0a6      	b.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800218a:	4b56      	ldr	r3, [pc, #344]	@ (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	2380      	movs	r3, #128	@ 0x80
 8002190:	005b      	lsls	r3, r3, #1
 8002192:	4013      	ands	r3, r2
 8002194:	d0f0      	beq.n	8002178 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002196:	4b52      	ldr	r3, [pc, #328]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002198:	6a1a      	ldr	r2, [r3, #32]
 800219a:	23c0      	movs	r3, #192	@ 0xc0
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	4013      	ands	r3, r2
 80021a0:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d034      	beq.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x112>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	685a      	ldr	r2, [r3, #4]
 80021ac:	23c0      	movs	r3, #192	@ 0xc0
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	4013      	ands	r3, r2
 80021b2:	68fa      	ldr	r2, [r7, #12]
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d02c      	beq.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80021b8:	4b49      	ldr	r3, [pc, #292]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80021ba:	6a1b      	ldr	r3, [r3, #32]
 80021bc:	4a4a      	ldr	r2, [pc, #296]	@ (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80021be:	4013      	ands	r3, r2
 80021c0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80021c2:	4b47      	ldr	r3, [pc, #284]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80021c4:	6a1a      	ldr	r2, [r3, #32]
 80021c6:	4b46      	ldr	r3, [pc, #280]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80021c8:	2180      	movs	r1, #128	@ 0x80
 80021ca:	0249      	lsls	r1, r1, #9
 80021cc:	430a      	orrs	r2, r1
 80021ce:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80021d0:	4b43      	ldr	r3, [pc, #268]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80021d2:	6a1a      	ldr	r2, [r3, #32]
 80021d4:	4b42      	ldr	r3, [pc, #264]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80021d6:	4945      	ldr	r1, [pc, #276]	@ (80022ec <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80021d8:	400a      	ands	r2, r1
 80021da:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80021dc:	4b40      	ldr	r3, [pc, #256]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80021de:	68fa      	ldr	r2, [r7, #12]
 80021e0:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	2201      	movs	r2, #1
 80021e6:	4013      	ands	r3, r2
 80021e8:	d013      	beq.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ea:	f7fe fdaf 	bl	8000d4c <HAL_GetTick>
 80021ee:	0003      	movs	r3, r0
 80021f0:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021f2:	e009      	b.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021f4:	f7fe fdaa 	bl	8000d4c <HAL_GetTick>
 80021f8:	0002      	movs	r2, r0
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	4a3c      	ldr	r2, [pc, #240]	@ (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d901      	bls.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002204:	2303      	movs	r3, #3
 8002206:	e067      	b.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002208:	4b35      	ldr	r3, [pc, #212]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800220a:	6a1b      	ldr	r3, [r3, #32]
 800220c:	2202      	movs	r2, #2
 800220e:	4013      	ands	r3, r2
 8002210:	d0f0      	beq.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002212:	4b33      	ldr	r3, [pc, #204]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002214:	6a1b      	ldr	r3, [r3, #32]
 8002216:	4a34      	ldr	r2, [pc, #208]	@ (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002218:	4013      	ands	r3, r2
 800221a:	0019      	movs	r1, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	685a      	ldr	r2, [r3, #4]
 8002220:	4b2f      	ldr	r3, [pc, #188]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002222:	430a      	orrs	r2, r1
 8002224:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002226:	2317      	movs	r3, #23
 8002228:	18fb      	adds	r3, r7, r3
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	2b01      	cmp	r3, #1
 800222e:	d105      	bne.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002230:	4b2b      	ldr	r3, [pc, #172]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002232:	69da      	ldr	r2, [r3, #28]
 8002234:	4b2a      	ldr	r3, [pc, #168]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002236:	492f      	ldr	r1, [pc, #188]	@ (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8002238:	400a      	ands	r2, r1
 800223a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	2201      	movs	r2, #1
 8002242:	4013      	ands	r3, r2
 8002244:	d009      	beq.n	800225a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002246:	4b26      	ldr	r3, [pc, #152]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800224a:	2203      	movs	r2, #3
 800224c:	4393      	bics	r3, r2
 800224e:	0019      	movs	r1, r3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	689a      	ldr	r2, [r3, #8]
 8002254:	4b22      	ldr	r3, [pc, #136]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002256:	430a      	orrs	r2, r1
 8002258:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	2202      	movs	r2, #2
 8002260:	4013      	ands	r3, r2
 8002262:	d009      	beq.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002264:	4b1e      	ldr	r3, [pc, #120]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002266:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002268:	4a23      	ldr	r2, [pc, #140]	@ (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800226a:	4013      	ands	r3, r2
 800226c:	0019      	movs	r1, r3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	68da      	ldr	r2, [r3, #12]
 8002272:	4b1b      	ldr	r3, [pc, #108]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002274:	430a      	orrs	r2, r1
 8002276:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	2220      	movs	r2, #32
 800227e:	4013      	ands	r3, r2
 8002280:	d009      	beq.n	8002296 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002282:	4b17      	ldr	r3, [pc, #92]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002286:	2210      	movs	r2, #16
 8002288:	4393      	bics	r3, r2
 800228a:	0019      	movs	r1, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	691a      	ldr	r2, [r3, #16]
 8002290:	4b13      	ldr	r3, [pc, #76]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002292:	430a      	orrs	r2, r1
 8002294:	631a      	str	r2, [r3, #48]	@ 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	2380      	movs	r3, #128	@ 0x80
 800229c:	029b      	lsls	r3, r3, #10
 800229e:	4013      	ands	r3, r2
 80022a0:	d009      	beq.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80022a2:	4b0f      	ldr	r3, [pc, #60]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80022a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022a6:	2280      	movs	r2, #128	@ 0x80
 80022a8:	4393      	bics	r3, r2
 80022aa:	0019      	movs	r1, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	699a      	ldr	r2, [r3, #24]
 80022b0:	4b0b      	ldr	r3, [pc, #44]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80022b2:	430a      	orrs	r2, r1
 80022b4:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	2380      	movs	r3, #128	@ 0x80
 80022bc:	00db      	lsls	r3, r3, #3
 80022be:	4013      	ands	r3, r2
 80022c0:	d009      	beq.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80022c2:	4b07      	ldr	r3, [pc, #28]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80022c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022c6:	2240      	movs	r2, #64	@ 0x40
 80022c8:	4393      	bics	r3, r2
 80022ca:	0019      	movs	r1, r3
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	695a      	ldr	r2, [r3, #20]
 80022d0:	4b03      	ldr	r3, [pc, #12]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80022d2:	430a      	orrs	r2, r1
 80022d4:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80022d6:	2300      	movs	r3, #0
}
 80022d8:	0018      	movs	r0, r3
 80022da:	46bd      	mov	sp, r7
 80022dc:	b006      	add	sp, #24
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	40021000 	.word	0x40021000
 80022e4:	40007000 	.word	0x40007000
 80022e8:	fffffcff 	.word	0xfffffcff
 80022ec:	fffeffff 	.word	0xfffeffff
 80022f0:	00001388 	.word	0x00001388
 80022f4:	efffffff 	.word	0xefffffff
 80022f8:	fffcffff 	.word	0xfffcffff

080022fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d101      	bne.n	800230e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e042      	b.n	8002394 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	223d      	movs	r2, #61	@ 0x3d
 8002312:	5c9b      	ldrb	r3, [r3, r2]
 8002314:	b2db      	uxtb	r3, r3
 8002316:	2b00      	cmp	r3, #0
 8002318:	d107      	bne.n	800232a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	223c      	movs	r2, #60	@ 0x3c
 800231e:	2100      	movs	r1, #0
 8002320:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	0018      	movs	r0, r3
 8002326:	f7fe f9ef 	bl	8000708 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	223d      	movs	r2, #61	@ 0x3d
 800232e:	2102      	movs	r1, #2
 8002330:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	3304      	adds	r3, #4
 800233a:	0019      	movs	r1, r3
 800233c:	0010      	movs	r0, r2
 800233e:	f000 fb35 	bl	80029ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2246      	movs	r2, #70	@ 0x46
 8002346:	2101      	movs	r1, #1
 8002348:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	223e      	movs	r2, #62	@ 0x3e
 800234e:	2101      	movs	r1, #1
 8002350:	5499      	strb	r1, [r3, r2]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	223f      	movs	r2, #63	@ 0x3f
 8002356:	2101      	movs	r1, #1
 8002358:	5499      	strb	r1, [r3, r2]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2240      	movs	r2, #64	@ 0x40
 800235e:	2101      	movs	r1, #1
 8002360:	5499      	strb	r1, [r3, r2]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2241      	movs	r2, #65	@ 0x41
 8002366:	2101      	movs	r1, #1
 8002368:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2242      	movs	r2, #66	@ 0x42
 800236e:	2101      	movs	r1, #1
 8002370:	5499      	strb	r1, [r3, r2]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2243      	movs	r2, #67	@ 0x43
 8002376:	2101      	movs	r1, #1
 8002378:	5499      	strb	r1, [r3, r2]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2244      	movs	r2, #68	@ 0x44
 800237e:	2101      	movs	r1, #1
 8002380:	5499      	strb	r1, [r3, r2]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2245      	movs	r2, #69	@ 0x45
 8002386:	2101      	movs	r1, #1
 8002388:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	223d      	movs	r2, #61	@ 0x3d
 800238e:	2101      	movs	r1, #1
 8002390:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002392:	2300      	movs	r3, #0
}
 8002394:	0018      	movs	r0, r3
 8002396:	46bd      	mov	sp, r7
 8002398:	b002      	add	sp, #8
 800239a:	bd80      	pop	{r7, pc}

0800239c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d101      	bne.n	80023ae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e042      	b.n	8002434 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	223d      	movs	r2, #61	@ 0x3d
 80023b2:	5c9b      	ldrb	r3, [r3, r2]
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d107      	bne.n	80023ca <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	223c      	movs	r2, #60	@ 0x3c
 80023be:	2100      	movs	r1, #0
 80023c0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	0018      	movs	r0, r3
 80023c6:	f000 f839 	bl	800243c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	223d      	movs	r2, #61	@ 0x3d
 80023ce:	2102      	movs	r1, #2
 80023d0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	3304      	adds	r3, #4
 80023da:	0019      	movs	r1, r3
 80023dc:	0010      	movs	r0, r2
 80023de:	f000 fae5 	bl	80029ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2246      	movs	r2, #70	@ 0x46
 80023e6:	2101      	movs	r1, #1
 80023e8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	223e      	movs	r2, #62	@ 0x3e
 80023ee:	2101      	movs	r1, #1
 80023f0:	5499      	strb	r1, [r3, r2]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	223f      	movs	r2, #63	@ 0x3f
 80023f6:	2101      	movs	r1, #1
 80023f8:	5499      	strb	r1, [r3, r2]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2240      	movs	r2, #64	@ 0x40
 80023fe:	2101      	movs	r1, #1
 8002400:	5499      	strb	r1, [r3, r2]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2241      	movs	r2, #65	@ 0x41
 8002406:	2101      	movs	r1, #1
 8002408:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2242      	movs	r2, #66	@ 0x42
 800240e:	2101      	movs	r1, #1
 8002410:	5499      	strb	r1, [r3, r2]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2243      	movs	r2, #67	@ 0x43
 8002416:	2101      	movs	r1, #1
 8002418:	5499      	strb	r1, [r3, r2]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2244      	movs	r2, #68	@ 0x44
 800241e:	2101      	movs	r1, #1
 8002420:	5499      	strb	r1, [r3, r2]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2245      	movs	r2, #69	@ 0x45
 8002426:	2101      	movs	r1, #1
 8002428:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	223d      	movs	r2, #61	@ 0x3d
 800242e:	2101      	movs	r1, #1
 8002430:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002432:	2300      	movs	r3, #0
}
 8002434:	0018      	movs	r0, r3
 8002436:	46bd      	mov	sp, r7
 8002438:	b002      	add	sp, #8
 800243a:	bd80      	pop	{r7, pc}

0800243c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002444:	46c0      	nop			@ (mov r8, r8)
 8002446:	46bd      	mov	sp, r7
 8002448:	b002      	add	sp, #8
 800244a:	bd80      	pop	{r7, pc}

0800244c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b084      	sub	sp, #16
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	691b      	ldr	r3, [r3, #16]
 8002462:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	2202      	movs	r2, #2
 8002468:	4013      	ands	r3, r2
 800246a:	d021      	beq.n	80024b0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2202      	movs	r2, #2
 8002470:	4013      	ands	r3, r2
 8002472:	d01d      	beq.n	80024b0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	2203      	movs	r2, #3
 800247a:	4252      	negs	r2, r2
 800247c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2201      	movs	r2, #1
 8002482:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	699b      	ldr	r3, [r3, #24]
 800248a:	2203      	movs	r2, #3
 800248c:	4013      	ands	r3, r2
 800248e:	d004      	beq.n	800249a <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	0018      	movs	r0, r3
 8002494:	f000 fa72 	bl	800297c <HAL_TIM_IC_CaptureCallback>
 8002498:	e007      	b.n	80024aa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	0018      	movs	r0, r3
 800249e:	f000 fa65 	bl	800296c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	0018      	movs	r0, r3
 80024a6:	f000 fa71 	bl	800298c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2200      	movs	r2, #0
 80024ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	2204      	movs	r2, #4
 80024b4:	4013      	ands	r3, r2
 80024b6:	d022      	beq.n	80024fe <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2204      	movs	r2, #4
 80024bc:	4013      	ands	r3, r2
 80024be:	d01e      	beq.n	80024fe <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	2205      	movs	r2, #5
 80024c6:	4252      	negs	r2, r2
 80024c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2202      	movs	r2, #2
 80024ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	699a      	ldr	r2, [r3, #24]
 80024d6:	23c0      	movs	r3, #192	@ 0xc0
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	4013      	ands	r3, r2
 80024dc:	d004      	beq.n	80024e8 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	0018      	movs	r0, r3
 80024e2:	f000 fa4b 	bl	800297c <HAL_TIM_IC_CaptureCallback>
 80024e6:	e007      	b.n	80024f8 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	0018      	movs	r0, r3
 80024ec:	f000 fa3e 	bl	800296c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	0018      	movs	r0, r3
 80024f4:	f000 fa4a 	bl	800298c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2200      	movs	r2, #0
 80024fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	2208      	movs	r2, #8
 8002502:	4013      	ands	r3, r2
 8002504:	d021      	beq.n	800254a <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2208      	movs	r2, #8
 800250a:	4013      	ands	r3, r2
 800250c:	d01d      	beq.n	800254a <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	2209      	movs	r2, #9
 8002514:	4252      	negs	r2, r2
 8002516:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2204      	movs	r2, #4
 800251c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	69db      	ldr	r3, [r3, #28]
 8002524:	2203      	movs	r2, #3
 8002526:	4013      	ands	r3, r2
 8002528:	d004      	beq.n	8002534 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	0018      	movs	r0, r3
 800252e:	f000 fa25 	bl	800297c <HAL_TIM_IC_CaptureCallback>
 8002532:	e007      	b.n	8002544 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	0018      	movs	r0, r3
 8002538:	f000 fa18 	bl	800296c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	0018      	movs	r0, r3
 8002540:	f000 fa24 	bl	800298c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2200      	movs	r2, #0
 8002548:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	2210      	movs	r2, #16
 800254e:	4013      	ands	r3, r2
 8002550:	d022      	beq.n	8002598 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2210      	movs	r2, #16
 8002556:	4013      	ands	r3, r2
 8002558:	d01e      	beq.n	8002598 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	2211      	movs	r2, #17
 8002560:	4252      	negs	r2, r2
 8002562:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2208      	movs	r2, #8
 8002568:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	69da      	ldr	r2, [r3, #28]
 8002570:	23c0      	movs	r3, #192	@ 0xc0
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	4013      	ands	r3, r2
 8002576:	d004      	beq.n	8002582 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	0018      	movs	r0, r3
 800257c:	f000 f9fe 	bl	800297c <HAL_TIM_IC_CaptureCallback>
 8002580:	e007      	b.n	8002592 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	0018      	movs	r0, r3
 8002586:	f000 f9f1 	bl	800296c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	0018      	movs	r0, r3
 800258e:	f000 f9fd 	bl	800298c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2200      	movs	r2, #0
 8002596:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	2201      	movs	r2, #1
 800259c:	4013      	ands	r3, r2
 800259e:	d00c      	beq.n	80025ba <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	2201      	movs	r2, #1
 80025a4:	4013      	ands	r3, r2
 80025a6:	d008      	beq.n	80025ba <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2202      	movs	r2, #2
 80025ae:	4252      	negs	r2, r2
 80025b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	0018      	movs	r0, r3
 80025b6:	f000 f9d1 	bl	800295c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	2280      	movs	r2, #128	@ 0x80
 80025be:	4013      	ands	r3, r2
 80025c0:	d00c      	beq.n	80025dc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2280      	movs	r2, #128	@ 0x80
 80025c6:	4013      	ands	r3, r2
 80025c8:	d008      	beq.n	80025dc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	2281      	movs	r2, #129	@ 0x81
 80025d0:	4252      	negs	r2, r2
 80025d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	0018      	movs	r0, r3
 80025d8:	f000 fd72 	bl	80030c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	2240      	movs	r2, #64	@ 0x40
 80025e0:	4013      	ands	r3, r2
 80025e2:	d00c      	beq.n	80025fe <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2240      	movs	r2, #64	@ 0x40
 80025e8:	4013      	ands	r3, r2
 80025ea:	d008      	beq.n	80025fe <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2241      	movs	r2, #65	@ 0x41
 80025f2:	4252      	negs	r2, r2
 80025f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	0018      	movs	r0, r3
 80025fa:	f000 f9cf 	bl	800299c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	2220      	movs	r2, #32
 8002602:	4013      	ands	r3, r2
 8002604:	d00c      	beq.n	8002620 <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2220      	movs	r2, #32
 800260a:	4013      	ands	r3, r2
 800260c:	d008      	beq.n	8002620 <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	2221      	movs	r2, #33	@ 0x21
 8002614:	4252      	negs	r2, r2
 8002616:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	0018      	movs	r0, r3
 800261c:	f000 fd48 	bl	80030b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002620:	46c0      	nop			@ (mov r8, r8)
 8002622:	46bd      	mov	sp, r7
 8002624:	b004      	add	sp, #16
 8002626:	bd80      	pop	{r7, pc}

08002628 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b086      	sub	sp, #24
 800262c:	af00      	add	r7, sp, #0
 800262e:	60f8      	str	r0, [r7, #12]
 8002630:	60b9      	str	r1, [r7, #8]
 8002632:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002634:	2317      	movs	r3, #23
 8002636:	18fb      	adds	r3, r7, r3
 8002638:	2200      	movs	r2, #0
 800263a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	223c      	movs	r2, #60	@ 0x3c
 8002640:	5c9b      	ldrb	r3, [r3, r2]
 8002642:	2b01      	cmp	r3, #1
 8002644:	d101      	bne.n	800264a <HAL_TIM_PWM_ConfigChannel+0x22>
 8002646:	2302      	movs	r3, #2
 8002648:	e0ad      	b.n	80027a6 <HAL_TIM_PWM_ConfigChannel+0x17e>
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	223c      	movs	r2, #60	@ 0x3c
 800264e:	2101      	movs	r1, #1
 8002650:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2b0c      	cmp	r3, #12
 8002656:	d100      	bne.n	800265a <HAL_TIM_PWM_ConfigChannel+0x32>
 8002658:	e076      	b.n	8002748 <HAL_TIM_PWM_ConfigChannel+0x120>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2b0c      	cmp	r3, #12
 800265e:	d900      	bls.n	8002662 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8002660:	e095      	b.n	800278e <HAL_TIM_PWM_ConfigChannel+0x166>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2b08      	cmp	r3, #8
 8002666:	d04e      	beq.n	8002706 <HAL_TIM_PWM_ConfigChannel+0xde>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2b08      	cmp	r3, #8
 800266c:	d900      	bls.n	8002670 <HAL_TIM_PWM_ConfigChannel+0x48>
 800266e:	e08e      	b.n	800278e <HAL_TIM_PWM_ConfigChannel+0x166>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d003      	beq.n	800267e <HAL_TIM_PWM_ConfigChannel+0x56>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2b04      	cmp	r3, #4
 800267a:	d021      	beq.n	80026c0 <HAL_TIM_PWM_ConfigChannel+0x98>
 800267c:	e087      	b.n	800278e <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	68ba      	ldr	r2, [r7, #8]
 8002684:	0011      	movs	r1, r2
 8002686:	0018      	movs	r0, r3
 8002688:	f000 fa1e 	bl	8002ac8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	699a      	ldr	r2, [r3, #24]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	2108      	movs	r1, #8
 8002698:	430a      	orrs	r2, r1
 800269a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	699a      	ldr	r2, [r3, #24]
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	2104      	movs	r1, #4
 80026a8:	438a      	bics	r2, r1
 80026aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	6999      	ldr	r1, [r3, #24]
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	691a      	ldr	r2, [r3, #16]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	430a      	orrs	r2, r1
 80026bc:	619a      	str	r2, [r3, #24]
      break;
 80026be:	e06b      	b.n	8002798 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	68ba      	ldr	r2, [r7, #8]
 80026c6:	0011      	movs	r1, r2
 80026c8:	0018      	movs	r0, r3
 80026ca:	f000 fa85 	bl	8002bd8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	699a      	ldr	r2, [r3, #24]
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2180      	movs	r1, #128	@ 0x80
 80026da:	0109      	lsls	r1, r1, #4
 80026dc:	430a      	orrs	r2, r1
 80026de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	699a      	ldr	r2, [r3, #24]
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4931      	ldr	r1, [pc, #196]	@ (80027b0 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80026ec:	400a      	ands	r2, r1
 80026ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	6999      	ldr	r1, [r3, #24]
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	691b      	ldr	r3, [r3, #16]
 80026fa:	021a      	lsls	r2, r3, #8
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	430a      	orrs	r2, r1
 8002702:	619a      	str	r2, [r3, #24]
      break;
 8002704:	e048      	b.n	8002798 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	68ba      	ldr	r2, [r7, #8]
 800270c:	0011      	movs	r1, r2
 800270e:	0018      	movs	r0, r3
 8002710:	f000 fae6 	bl	8002ce0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	69da      	ldr	r2, [r3, #28]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	2108      	movs	r1, #8
 8002720:	430a      	orrs	r2, r1
 8002722:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	69da      	ldr	r2, [r3, #28]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	2104      	movs	r1, #4
 8002730:	438a      	bics	r2, r1
 8002732:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	69d9      	ldr	r1, [r3, #28]
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	691a      	ldr	r2, [r3, #16]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	430a      	orrs	r2, r1
 8002744:	61da      	str	r2, [r3, #28]
      break;
 8002746:	e027      	b.n	8002798 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	68ba      	ldr	r2, [r7, #8]
 800274e:	0011      	movs	r1, r2
 8002750:	0018      	movs	r0, r3
 8002752:	f000 fb4b 	bl	8002dec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	69da      	ldr	r2, [r3, #28]
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	2180      	movs	r1, #128	@ 0x80
 8002762:	0109      	lsls	r1, r1, #4
 8002764:	430a      	orrs	r2, r1
 8002766:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	69da      	ldr	r2, [r3, #28]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	490f      	ldr	r1, [pc, #60]	@ (80027b0 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002774:	400a      	ands	r2, r1
 8002776:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	69d9      	ldr	r1, [r3, #28]
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	691b      	ldr	r3, [r3, #16]
 8002782:	021a      	lsls	r2, r3, #8
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	430a      	orrs	r2, r1
 800278a:	61da      	str	r2, [r3, #28]
      break;
 800278c:	e004      	b.n	8002798 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 800278e:	2317      	movs	r3, #23
 8002790:	18fb      	adds	r3, r7, r3
 8002792:	2201      	movs	r2, #1
 8002794:	701a      	strb	r2, [r3, #0]
      break;
 8002796:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	223c      	movs	r2, #60	@ 0x3c
 800279c:	2100      	movs	r1, #0
 800279e:	5499      	strb	r1, [r3, r2]

  return status;
 80027a0:	2317      	movs	r3, #23
 80027a2:	18fb      	adds	r3, r7, r3
 80027a4:	781b      	ldrb	r3, [r3, #0]
}
 80027a6:	0018      	movs	r0, r3
 80027a8:	46bd      	mov	sp, r7
 80027aa:	b006      	add	sp, #24
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	46c0      	nop			@ (mov r8, r8)
 80027b0:	fffffbff 	.word	0xfffffbff

080027b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b084      	sub	sp, #16
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027be:	230f      	movs	r3, #15
 80027c0:	18fb      	adds	r3, r7, r3
 80027c2:	2200      	movs	r2, #0
 80027c4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	223c      	movs	r2, #60	@ 0x3c
 80027ca:	5c9b      	ldrb	r3, [r3, r2]
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d101      	bne.n	80027d4 <HAL_TIM_ConfigClockSource+0x20>
 80027d0:	2302      	movs	r3, #2
 80027d2:	e0bc      	b.n	800294e <HAL_TIM_ConfigClockSource+0x19a>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	223c      	movs	r2, #60	@ 0x3c
 80027d8:	2101      	movs	r1, #1
 80027da:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	223d      	movs	r2, #61	@ 0x3d
 80027e0:	2102      	movs	r1, #2
 80027e2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	2277      	movs	r2, #119	@ 0x77
 80027f0:	4393      	bics	r3, r2
 80027f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	4a58      	ldr	r2, [pc, #352]	@ (8002958 <HAL_TIM_ConfigClockSource+0x1a4>)
 80027f8:	4013      	ands	r3, r2
 80027fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	68ba      	ldr	r2, [r7, #8]
 8002802:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	2280      	movs	r2, #128	@ 0x80
 800280a:	0192      	lsls	r2, r2, #6
 800280c:	4293      	cmp	r3, r2
 800280e:	d040      	beq.n	8002892 <HAL_TIM_ConfigClockSource+0xde>
 8002810:	2280      	movs	r2, #128	@ 0x80
 8002812:	0192      	lsls	r2, r2, #6
 8002814:	4293      	cmp	r3, r2
 8002816:	d900      	bls.n	800281a <HAL_TIM_ConfigClockSource+0x66>
 8002818:	e088      	b.n	800292c <HAL_TIM_ConfigClockSource+0x178>
 800281a:	2280      	movs	r2, #128	@ 0x80
 800281c:	0152      	lsls	r2, r2, #5
 800281e:	4293      	cmp	r3, r2
 8002820:	d100      	bne.n	8002824 <HAL_TIM_ConfigClockSource+0x70>
 8002822:	e088      	b.n	8002936 <HAL_TIM_ConfigClockSource+0x182>
 8002824:	2280      	movs	r2, #128	@ 0x80
 8002826:	0152      	lsls	r2, r2, #5
 8002828:	4293      	cmp	r3, r2
 800282a:	d900      	bls.n	800282e <HAL_TIM_ConfigClockSource+0x7a>
 800282c:	e07e      	b.n	800292c <HAL_TIM_ConfigClockSource+0x178>
 800282e:	2b70      	cmp	r3, #112	@ 0x70
 8002830:	d018      	beq.n	8002864 <HAL_TIM_ConfigClockSource+0xb0>
 8002832:	d900      	bls.n	8002836 <HAL_TIM_ConfigClockSource+0x82>
 8002834:	e07a      	b.n	800292c <HAL_TIM_ConfigClockSource+0x178>
 8002836:	2b60      	cmp	r3, #96	@ 0x60
 8002838:	d04f      	beq.n	80028da <HAL_TIM_ConfigClockSource+0x126>
 800283a:	d900      	bls.n	800283e <HAL_TIM_ConfigClockSource+0x8a>
 800283c:	e076      	b.n	800292c <HAL_TIM_ConfigClockSource+0x178>
 800283e:	2b50      	cmp	r3, #80	@ 0x50
 8002840:	d03b      	beq.n	80028ba <HAL_TIM_ConfigClockSource+0x106>
 8002842:	d900      	bls.n	8002846 <HAL_TIM_ConfigClockSource+0x92>
 8002844:	e072      	b.n	800292c <HAL_TIM_ConfigClockSource+0x178>
 8002846:	2b40      	cmp	r3, #64	@ 0x40
 8002848:	d057      	beq.n	80028fa <HAL_TIM_ConfigClockSource+0x146>
 800284a:	d900      	bls.n	800284e <HAL_TIM_ConfigClockSource+0x9a>
 800284c:	e06e      	b.n	800292c <HAL_TIM_ConfigClockSource+0x178>
 800284e:	2b30      	cmp	r3, #48	@ 0x30
 8002850:	d063      	beq.n	800291a <HAL_TIM_ConfigClockSource+0x166>
 8002852:	d86b      	bhi.n	800292c <HAL_TIM_ConfigClockSource+0x178>
 8002854:	2b20      	cmp	r3, #32
 8002856:	d060      	beq.n	800291a <HAL_TIM_ConfigClockSource+0x166>
 8002858:	d868      	bhi.n	800292c <HAL_TIM_ConfigClockSource+0x178>
 800285a:	2b00      	cmp	r3, #0
 800285c:	d05d      	beq.n	800291a <HAL_TIM_ConfigClockSource+0x166>
 800285e:	2b10      	cmp	r3, #16
 8002860:	d05b      	beq.n	800291a <HAL_TIM_ConfigClockSource+0x166>
 8002862:	e063      	b.n	800292c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002874:	f000 fb9e 	bl	8002fb4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	2277      	movs	r2, #119	@ 0x77
 8002884:	4313      	orrs	r3, r2
 8002886:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	68ba      	ldr	r2, [r7, #8]
 800288e:	609a      	str	r2, [r3, #8]
      break;
 8002890:	e052      	b.n	8002938 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80028a2:	f000 fb87 	bl	8002fb4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	689a      	ldr	r2, [r3, #8]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	2180      	movs	r1, #128	@ 0x80
 80028b2:	01c9      	lsls	r1, r1, #7
 80028b4:	430a      	orrs	r2, r1
 80028b6:	609a      	str	r2, [r3, #8]
      break;
 80028b8:	e03e      	b.n	8002938 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028c6:	001a      	movs	r2, r3
 80028c8:	f000 fafa 	bl	8002ec0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2150      	movs	r1, #80	@ 0x50
 80028d2:	0018      	movs	r0, r3
 80028d4:	f000 fb54 	bl	8002f80 <TIM_ITRx_SetConfig>
      break;
 80028d8:	e02e      	b.n	8002938 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80028e6:	001a      	movs	r2, r3
 80028e8:	f000 fb18 	bl	8002f1c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	2160      	movs	r1, #96	@ 0x60
 80028f2:	0018      	movs	r0, r3
 80028f4:	f000 fb44 	bl	8002f80 <TIM_ITRx_SetConfig>
      break;
 80028f8:	e01e      	b.n	8002938 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002906:	001a      	movs	r2, r3
 8002908:	f000 fada 	bl	8002ec0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	2140      	movs	r1, #64	@ 0x40
 8002912:	0018      	movs	r0, r3
 8002914:	f000 fb34 	bl	8002f80 <TIM_ITRx_SetConfig>
      break;
 8002918:	e00e      	b.n	8002938 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	0019      	movs	r1, r3
 8002924:	0010      	movs	r0, r2
 8002926:	f000 fb2b 	bl	8002f80 <TIM_ITRx_SetConfig>
      break;
 800292a:	e005      	b.n	8002938 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800292c:	230f      	movs	r3, #15
 800292e:	18fb      	adds	r3, r7, r3
 8002930:	2201      	movs	r2, #1
 8002932:	701a      	strb	r2, [r3, #0]
      break;
 8002934:	e000      	b.n	8002938 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002936:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	223d      	movs	r2, #61	@ 0x3d
 800293c:	2101      	movs	r1, #1
 800293e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	223c      	movs	r2, #60	@ 0x3c
 8002944:	2100      	movs	r1, #0
 8002946:	5499      	strb	r1, [r3, r2]

  return status;
 8002948:	230f      	movs	r3, #15
 800294a:	18fb      	adds	r3, r7, r3
 800294c:	781b      	ldrb	r3, [r3, #0]
}
 800294e:	0018      	movs	r0, r3
 8002950:	46bd      	mov	sp, r7
 8002952:	b004      	add	sp, #16
 8002954:	bd80      	pop	{r7, pc}
 8002956:	46c0      	nop			@ (mov r8, r8)
 8002958:	ffff00ff 	.word	0xffff00ff

0800295c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b082      	sub	sp, #8
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002964:	46c0      	nop			@ (mov r8, r8)
 8002966:	46bd      	mov	sp, r7
 8002968:	b002      	add	sp, #8
 800296a:	bd80      	pop	{r7, pc}

0800296c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b082      	sub	sp, #8
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002974:	46c0      	nop			@ (mov r8, r8)
 8002976:	46bd      	mov	sp, r7
 8002978:	b002      	add	sp, #8
 800297a:	bd80      	pop	{r7, pc}

0800297c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b082      	sub	sp, #8
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002984:	46c0      	nop			@ (mov r8, r8)
 8002986:	46bd      	mov	sp, r7
 8002988:	b002      	add	sp, #8
 800298a:	bd80      	pop	{r7, pc}

0800298c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b082      	sub	sp, #8
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002994:	46c0      	nop			@ (mov r8, r8)
 8002996:	46bd      	mov	sp, r7
 8002998:	b002      	add	sp, #8
 800299a:	bd80      	pop	{r7, pc}

0800299c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b082      	sub	sp, #8
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80029a4:	46c0      	nop			@ (mov r8, r8)
 80029a6:	46bd      	mov	sp, r7
 80029a8:	b002      	add	sp, #8
 80029aa:	bd80      	pop	{r7, pc}

080029ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b084      	sub	sp, #16
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	4a3b      	ldr	r2, [pc, #236]	@ (8002aac <TIM_Base_SetConfig+0x100>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d008      	beq.n	80029d6 <TIM_Base_SetConfig+0x2a>
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	2380      	movs	r3, #128	@ 0x80
 80029c8:	05db      	lsls	r3, r3, #23
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d003      	beq.n	80029d6 <TIM_Base_SetConfig+0x2a>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4a37      	ldr	r2, [pc, #220]	@ (8002ab0 <TIM_Base_SetConfig+0x104>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d108      	bne.n	80029e8 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2270      	movs	r2, #112	@ 0x70
 80029da:	4393      	bics	r3, r2
 80029dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	68fa      	ldr	r2, [r7, #12]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	4a30      	ldr	r2, [pc, #192]	@ (8002aac <TIM_Base_SetConfig+0x100>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d018      	beq.n	8002a22 <TIM_Base_SetConfig+0x76>
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	2380      	movs	r3, #128	@ 0x80
 80029f4:	05db      	lsls	r3, r3, #23
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d013      	beq.n	8002a22 <TIM_Base_SetConfig+0x76>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4a2c      	ldr	r2, [pc, #176]	@ (8002ab0 <TIM_Base_SetConfig+0x104>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d00f      	beq.n	8002a22 <TIM_Base_SetConfig+0x76>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4a2b      	ldr	r2, [pc, #172]	@ (8002ab4 <TIM_Base_SetConfig+0x108>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d00b      	beq.n	8002a22 <TIM_Base_SetConfig+0x76>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4a2a      	ldr	r2, [pc, #168]	@ (8002ab8 <TIM_Base_SetConfig+0x10c>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d007      	beq.n	8002a22 <TIM_Base_SetConfig+0x76>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4a29      	ldr	r2, [pc, #164]	@ (8002abc <TIM_Base_SetConfig+0x110>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d003      	beq.n	8002a22 <TIM_Base_SetConfig+0x76>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4a28      	ldr	r2, [pc, #160]	@ (8002ac0 <TIM_Base_SetConfig+0x114>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d108      	bne.n	8002a34 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	4a27      	ldr	r2, [pc, #156]	@ (8002ac4 <TIM_Base_SetConfig+0x118>)
 8002a26:	4013      	ands	r3, r2
 8002a28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	68db      	ldr	r3, [r3, #12]
 8002a2e:	68fa      	ldr	r2, [r7, #12]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2280      	movs	r2, #128	@ 0x80
 8002a38:	4393      	bics	r3, r2
 8002a3a:	001a      	movs	r2, r3
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	695b      	ldr	r3, [r3, #20]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	68fa      	ldr	r2, [r7, #12]
 8002a48:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	689a      	ldr	r2, [r3, #8]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	4a13      	ldr	r2, [pc, #76]	@ (8002aac <TIM_Base_SetConfig+0x100>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d00b      	beq.n	8002a7a <TIM_Base_SetConfig+0xce>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	4a14      	ldr	r2, [pc, #80]	@ (8002ab8 <TIM_Base_SetConfig+0x10c>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d007      	beq.n	8002a7a <TIM_Base_SetConfig+0xce>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	4a13      	ldr	r2, [pc, #76]	@ (8002abc <TIM_Base_SetConfig+0x110>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d003      	beq.n	8002a7a <TIM_Base_SetConfig+0xce>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	4a12      	ldr	r2, [pc, #72]	@ (8002ac0 <TIM_Base_SetConfig+0x114>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d103      	bne.n	8002a82 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	691a      	ldr	r2, [r3, #16]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2201      	movs	r2, #1
 8002a86:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	691b      	ldr	r3, [r3, #16]
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	4013      	ands	r3, r2
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d106      	bne.n	8002aa2 <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	691b      	ldr	r3, [r3, #16]
 8002a98:	2201      	movs	r2, #1
 8002a9a:	4393      	bics	r3, r2
 8002a9c:	001a      	movs	r2, r3
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	611a      	str	r2, [r3, #16]
  }
}
 8002aa2:	46c0      	nop			@ (mov r8, r8)
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	b004      	add	sp, #16
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	46c0      	nop			@ (mov r8, r8)
 8002aac:	40012c00 	.word	0x40012c00
 8002ab0:	40000400 	.word	0x40000400
 8002ab4:	40002000 	.word	0x40002000
 8002ab8:	40014000 	.word	0x40014000
 8002abc:	40014400 	.word	0x40014400
 8002ac0:	40014800 	.word	0x40014800
 8002ac4:	fffffcff 	.word	0xfffffcff

08002ac8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b086      	sub	sp, #24
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6a1b      	ldr	r3, [r3, #32]
 8002ad6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6a1b      	ldr	r3, [r3, #32]
 8002adc:	2201      	movs	r2, #1
 8002ade:	4393      	bics	r3, r2
 8002ae0:	001a      	movs	r2, r3
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	699b      	ldr	r3, [r3, #24]
 8002af0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2270      	movs	r2, #112	@ 0x70
 8002af6:	4393      	bics	r3, r2
 8002af8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2203      	movs	r2, #3
 8002afe:	4393      	bics	r3, r2
 8002b00:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	68fa      	ldr	r2, [r7, #12]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	2202      	movs	r2, #2
 8002b10:	4393      	bics	r3, r2
 8002b12:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	697a      	ldr	r2, [r7, #20]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4a27      	ldr	r2, [pc, #156]	@ (8002bc0 <TIM_OC1_SetConfig+0xf8>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d00b      	beq.n	8002b3e <TIM_OC1_SetConfig+0x76>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4a26      	ldr	r2, [pc, #152]	@ (8002bc4 <TIM_OC1_SetConfig+0xfc>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d007      	beq.n	8002b3e <TIM_OC1_SetConfig+0x76>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4a25      	ldr	r2, [pc, #148]	@ (8002bc8 <TIM_OC1_SetConfig+0x100>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d003      	beq.n	8002b3e <TIM_OC1_SetConfig+0x76>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4a24      	ldr	r2, [pc, #144]	@ (8002bcc <TIM_OC1_SetConfig+0x104>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d10c      	bne.n	8002b58 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	2208      	movs	r2, #8
 8002b42:	4393      	bics	r3, r2
 8002b44:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	68db      	ldr	r3, [r3, #12]
 8002b4a:	697a      	ldr	r2, [r7, #20]
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	2204      	movs	r2, #4
 8002b54:	4393      	bics	r3, r2
 8002b56:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	4a19      	ldr	r2, [pc, #100]	@ (8002bc0 <TIM_OC1_SetConfig+0xf8>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d00b      	beq.n	8002b78 <TIM_OC1_SetConfig+0xb0>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	4a18      	ldr	r2, [pc, #96]	@ (8002bc4 <TIM_OC1_SetConfig+0xfc>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d007      	beq.n	8002b78 <TIM_OC1_SetConfig+0xb0>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	4a17      	ldr	r2, [pc, #92]	@ (8002bc8 <TIM_OC1_SetConfig+0x100>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d003      	beq.n	8002b78 <TIM_OC1_SetConfig+0xb0>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	4a16      	ldr	r2, [pc, #88]	@ (8002bcc <TIM_OC1_SetConfig+0x104>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d111      	bne.n	8002b9c <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	4a15      	ldr	r2, [pc, #84]	@ (8002bd0 <TIM_OC1_SetConfig+0x108>)
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	4a14      	ldr	r2, [pc, #80]	@ (8002bd4 <TIM_OC1_SetConfig+0x10c>)
 8002b84:	4013      	ands	r3, r2
 8002b86:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	695b      	ldr	r3, [r3, #20]
 8002b8c:	693a      	ldr	r2, [r7, #16]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	699b      	ldr	r3, [r3, #24]
 8002b96:	693a      	ldr	r2, [r7, #16]
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	693a      	ldr	r2, [r7, #16]
 8002ba0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	68fa      	ldr	r2, [r7, #12]
 8002ba6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	685a      	ldr	r2, [r3, #4]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	697a      	ldr	r2, [r7, #20]
 8002bb4:	621a      	str	r2, [r3, #32]
}
 8002bb6:	46c0      	nop			@ (mov r8, r8)
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	b006      	add	sp, #24
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	46c0      	nop			@ (mov r8, r8)
 8002bc0:	40012c00 	.word	0x40012c00
 8002bc4:	40014000 	.word	0x40014000
 8002bc8:	40014400 	.word	0x40014400
 8002bcc:	40014800 	.word	0x40014800
 8002bd0:	fffffeff 	.word	0xfffffeff
 8002bd4:	fffffdff 	.word	0xfffffdff

08002bd8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b086      	sub	sp, #24
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6a1b      	ldr	r3, [r3, #32]
 8002be6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6a1b      	ldr	r3, [r3, #32]
 8002bec:	2210      	movs	r2, #16
 8002bee:	4393      	bics	r3, r2
 8002bf0:	001a      	movs	r2, r3
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	699b      	ldr	r3, [r3, #24]
 8002c00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	4a2e      	ldr	r2, [pc, #184]	@ (8002cc0 <TIM_OC2_SetConfig+0xe8>)
 8002c06:	4013      	ands	r3, r2
 8002c08:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	4a2d      	ldr	r2, [pc, #180]	@ (8002cc4 <TIM_OC2_SetConfig+0xec>)
 8002c0e:	4013      	ands	r3, r2
 8002c10:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	021b      	lsls	r3, r3, #8
 8002c18:	68fa      	ldr	r2, [r7, #12]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	2220      	movs	r2, #32
 8002c22:	4393      	bics	r3, r2
 8002c24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	011b      	lsls	r3, r3, #4
 8002c2c:	697a      	ldr	r2, [r7, #20]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4a24      	ldr	r2, [pc, #144]	@ (8002cc8 <TIM_OC2_SetConfig+0xf0>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d10d      	bne.n	8002c56 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	2280      	movs	r2, #128	@ 0x80
 8002c3e:	4393      	bics	r3, r2
 8002c40:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	68db      	ldr	r3, [r3, #12]
 8002c46:	011b      	lsls	r3, r3, #4
 8002c48:	697a      	ldr	r2, [r7, #20]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	2240      	movs	r2, #64	@ 0x40
 8002c52:	4393      	bics	r3, r2
 8002c54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4a1b      	ldr	r2, [pc, #108]	@ (8002cc8 <TIM_OC2_SetConfig+0xf0>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d00b      	beq.n	8002c76 <TIM_OC2_SetConfig+0x9e>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4a1a      	ldr	r2, [pc, #104]	@ (8002ccc <TIM_OC2_SetConfig+0xf4>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d007      	beq.n	8002c76 <TIM_OC2_SetConfig+0x9e>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a19      	ldr	r2, [pc, #100]	@ (8002cd0 <TIM_OC2_SetConfig+0xf8>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d003      	beq.n	8002c76 <TIM_OC2_SetConfig+0x9e>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4a18      	ldr	r2, [pc, #96]	@ (8002cd4 <TIM_OC2_SetConfig+0xfc>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d113      	bne.n	8002c9e <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	4a17      	ldr	r2, [pc, #92]	@ (8002cd8 <TIM_OC2_SetConfig+0x100>)
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	4a16      	ldr	r2, [pc, #88]	@ (8002cdc <TIM_OC2_SetConfig+0x104>)
 8002c82:	4013      	ands	r3, r2
 8002c84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	695b      	ldr	r3, [r3, #20]
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	693a      	ldr	r2, [r7, #16]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	699b      	ldr	r3, [r3, #24]
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	693a      	ldr	r2, [r7, #16]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	693a      	ldr	r2, [r7, #16]
 8002ca2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	68fa      	ldr	r2, [r7, #12]
 8002ca8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	685a      	ldr	r2, [r3, #4]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	697a      	ldr	r2, [r7, #20]
 8002cb6:	621a      	str	r2, [r3, #32]
}
 8002cb8:	46c0      	nop			@ (mov r8, r8)
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	b006      	add	sp, #24
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	ffff8fff 	.word	0xffff8fff
 8002cc4:	fffffcff 	.word	0xfffffcff
 8002cc8:	40012c00 	.word	0x40012c00
 8002ccc:	40014000 	.word	0x40014000
 8002cd0:	40014400 	.word	0x40014400
 8002cd4:	40014800 	.word	0x40014800
 8002cd8:	fffffbff 	.word	0xfffffbff
 8002cdc:	fffff7ff 	.word	0xfffff7ff

08002ce0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b086      	sub	sp, #24
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6a1b      	ldr	r3, [r3, #32]
 8002cee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6a1b      	ldr	r3, [r3, #32]
 8002cf4:	4a33      	ldr	r2, [pc, #204]	@ (8002dc4 <TIM_OC3_SetConfig+0xe4>)
 8002cf6:	401a      	ands	r2, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	69db      	ldr	r3, [r3, #28]
 8002d06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2270      	movs	r2, #112	@ 0x70
 8002d0c:	4393      	bics	r3, r2
 8002d0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2203      	movs	r2, #3
 8002d14:	4393      	bics	r3, r2
 8002d16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	68fa      	ldr	r2, [r7, #12]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	4a28      	ldr	r2, [pc, #160]	@ (8002dc8 <TIM_OC3_SetConfig+0xe8>)
 8002d26:	4013      	ands	r3, r2
 8002d28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	021b      	lsls	r3, r3, #8
 8002d30:	697a      	ldr	r2, [r7, #20]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4a24      	ldr	r2, [pc, #144]	@ (8002dcc <TIM_OC3_SetConfig+0xec>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d10d      	bne.n	8002d5a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	4a23      	ldr	r2, [pc, #140]	@ (8002dd0 <TIM_OC3_SetConfig+0xf0>)
 8002d42:	4013      	ands	r3, r2
 8002d44:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	68db      	ldr	r3, [r3, #12]
 8002d4a:	021b      	lsls	r3, r3, #8
 8002d4c:	697a      	ldr	r2, [r7, #20]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	4a1f      	ldr	r2, [pc, #124]	@ (8002dd4 <TIM_OC3_SetConfig+0xf4>)
 8002d56:	4013      	ands	r3, r2
 8002d58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4a1b      	ldr	r2, [pc, #108]	@ (8002dcc <TIM_OC3_SetConfig+0xec>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d00b      	beq.n	8002d7a <TIM_OC3_SetConfig+0x9a>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4a1c      	ldr	r2, [pc, #112]	@ (8002dd8 <TIM_OC3_SetConfig+0xf8>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d007      	beq.n	8002d7a <TIM_OC3_SetConfig+0x9a>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4a1b      	ldr	r2, [pc, #108]	@ (8002ddc <TIM_OC3_SetConfig+0xfc>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d003      	beq.n	8002d7a <TIM_OC3_SetConfig+0x9a>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4a1a      	ldr	r2, [pc, #104]	@ (8002de0 <TIM_OC3_SetConfig+0x100>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d113      	bne.n	8002da2 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	4a19      	ldr	r2, [pc, #100]	@ (8002de4 <TIM_OC3_SetConfig+0x104>)
 8002d7e:	4013      	ands	r3, r2
 8002d80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	4a18      	ldr	r2, [pc, #96]	@ (8002de8 <TIM_OC3_SetConfig+0x108>)
 8002d86:	4013      	ands	r3, r2
 8002d88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	695b      	ldr	r3, [r3, #20]
 8002d8e:	011b      	lsls	r3, r3, #4
 8002d90:	693a      	ldr	r2, [r7, #16]
 8002d92:	4313      	orrs	r3, r2
 8002d94:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	699b      	ldr	r3, [r3, #24]
 8002d9a:	011b      	lsls	r3, r3, #4
 8002d9c:	693a      	ldr	r2, [r7, #16]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	693a      	ldr	r2, [r7, #16]
 8002da6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	68fa      	ldr	r2, [r7, #12]
 8002dac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	685a      	ldr	r2, [r3, #4]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	697a      	ldr	r2, [r7, #20]
 8002dba:	621a      	str	r2, [r3, #32]
}
 8002dbc:	46c0      	nop			@ (mov r8, r8)
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	b006      	add	sp, #24
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	fffffeff 	.word	0xfffffeff
 8002dc8:	fffffdff 	.word	0xfffffdff
 8002dcc:	40012c00 	.word	0x40012c00
 8002dd0:	fffff7ff 	.word	0xfffff7ff
 8002dd4:	fffffbff 	.word	0xfffffbff
 8002dd8:	40014000 	.word	0x40014000
 8002ddc:	40014400 	.word	0x40014400
 8002de0:	40014800 	.word	0x40014800
 8002de4:	ffffefff 	.word	0xffffefff
 8002de8:	ffffdfff 	.word	0xffffdfff

08002dec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b086      	sub	sp, #24
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
 8002df4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6a1b      	ldr	r3, [r3, #32]
 8002dfa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6a1b      	ldr	r3, [r3, #32]
 8002e00:	4a26      	ldr	r2, [pc, #152]	@ (8002e9c <TIM_OC4_SetConfig+0xb0>)
 8002e02:	401a      	ands	r2, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	69db      	ldr	r3, [r3, #28]
 8002e12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	4a22      	ldr	r2, [pc, #136]	@ (8002ea0 <TIM_OC4_SetConfig+0xb4>)
 8002e18:	4013      	ands	r3, r2
 8002e1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	4a21      	ldr	r2, [pc, #132]	@ (8002ea4 <TIM_OC4_SetConfig+0xb8>)
 8002e20:	4013      	ands	r3, r2
 8002e22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	021b      	lsls	r3, r3, #8
 8002e2a:	68fa      	ldr	r2, [r7, #12]
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	4a1d      	ldr	r2, [pc, #116]	@ (8002ea8 <TIM_OC4_SetConfig+0xbc>)
 8002e34:	4013      	ands	r3, r2
 8002e36:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	031b      	lsls	r3, r3, #12
 8002e3e:	693a      	ldr	r2, [r7, #16]
 8002e40:	4313      	orrs	r3, r2
 8002e42:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	4a19      	ldr	r2, [pc, #100]	@ (8002eac <TIM_OC4_SetConfig+0xc0>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d00b      	beq.n	8002e64 <TIM_OC4_SetConfig+0x78>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	4a18      	ldr	r2, [pc, #96]	@ (8002eb0 <TIM_OC4_SetConfig+0xc4>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d007      	beq.n	8002e64 <TIM_OC4_SetConfig+0x78>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	4a17      	ldr	r2, [pc, #92]	@ (8002eb4 <TIM_OC4_SetConfig+0xc8>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d003      	beq.n	8002e64 <TIM_OC4_SetConfig+0x78>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	4a16      	ldr	r2, [pc, #88]	@ (8002eb8 <TIM_OC4_SetConfig+0xcc>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d109      	bne.n	8002e78 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	4a15      	ldr	r2, [pc, #84]	@ (8002ebc <TIM_OC4_SetConfig+0xd0>)
 8002e68:	4013      	ands	r3, r2
 8002e6a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	695b      	ldr	r3, [r3, #20]
 8002e70:	019b      	lsls	r3, r3, #6
 8002e72:	697a      	ldr	r2, [r7, #20]
 8002e74:	4313      	orrs	r3, r2
 8002e76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	697a      	ldr	r2, [r7, #20]
 8002e7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	68fa      	ldr	r2, [r7, #12]
 8002e82:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	685a      	ldr	r2, [r3, #4]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	693a      	ldr	r2, [r7, #16]
 8002e90:	621a      	str	r2, [r3, #32]
}
 8002e92:	46c0      	nop			@ (mov r8, r8)
 8002e94:	46bd      	mov	sp, r7
 8002e96:	b006      	add	sp, #24
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	46c0      	nop			@ (mov r8, r8)
 8002e9c:	ffffefff 	.word	0xffffefff
 8002ea0:	ffff8fff 	.word	0xffff8fff
 8002ea4:	fffffcff 	.word	0xfffffcff
 8002ea8:	ffffdfff 	.word	0xffffdfff
 8002eac:	40012c00 	.word	0x40012c00
 8002eb0:	40014000 	.word	0x40014000
 8002eb4:	40014400 	.word	0x40014400
 8002eb8:	40014800 	.word	0x40014800
 8002ebc:	ffffbfff 	.word	0xffffbfff

08002ec0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b086      	sub	sp, #24
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	60f8      	str	r0, [r7, #12]
 8002ec8:	60b9      	str	r1, [r7, #8]
 8002eca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	6a1b      	ldr	r3, [r3, #32]
 8002ed0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	6a1b      	ldr	r3, [r3, #32]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	4393      	bics	r3, r2
 8002eda:	001a      	movs	r2, r3
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	699b      	ldr	r3, [r3, #24]
 8002ee4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	22f0      	movs	r2, #240	@ 0xf0
 8002eea:	4393      	bics	r3, r2
 8002eec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	011b      	lsls	r3, r3, #4
 8002ef2:	693a      	ldr	r2, [r7, #16]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	220a      	movs	r2, #10
 8002efc:	4393      	bics	r3, r2
 8002efe:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002f00:	697a      	ldr	r2, [r7, #20]
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	693a      	ldr	r2, [r7, #16]
 8002f0c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	697a      	ldr	r2, [r7, #20]
 8002f12:	621a      	str	r2, [r3, #32]
}
 8002f14:	46c0      	nop			@ (mov r8, r8)
 8002f16:	46bd      	mov	sp, r7
 8002f18:	b006      	add	sp, #24
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b086      	sub	sp, #24
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	60f8      	str	r0, [r7, #12]
 8002f24:	60b9      	str	r1, [r7, #8]
 8002f26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6a1b      	ldr	r3, [r3, #32]
 8002f2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	6a1b      	ldr	r3, [r3, #32]
 8002f32:	2210      	movs	r2, #16
 8002f34:	4393      	bics	r3, r2
 8002f36:	001a      	movs	r2, r3
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	699b      	ldr	r3, [r3, #24]
 8002f40:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	4a0d      	ldr	r2, [pc, #52]	@ (8002f7c <TIM_TI2_ConfigInputStage+0x60>)
 8002f46:	4013      	ands	r3, r2
 8002f48:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	031b      	lsls	r3, r3, #12
 8002f4e:	693a      	ldr	r2, [r7, #16]
 8002f50:	4313      	orrs	r3, r2
 8002f52:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	22a0      	movs	r2, #160	@ 0xa0
 8002f58:	4393      	bics	r3, r2
 8002f5a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	011b      	lsls	r3, r3, #4
 8002f60:	697a      	ldr	r2, [r7, #20]
 8002f62:	4313      	orrs	r3, r2
 8002f64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	693a      	ldr	r2, [r7, #16]
 8002f6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	697a      	ldr	r2, [r7, #20]
 8002f70:	621a      	str	r2, [r3, #32]
}
 8002f72:	46c0      	nop			@ (mov r8, r8)
 8002f74:	46bd      	mov	sp, r7
 8002f76:	b006      	add	sp, #24
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	46c0      	nop			@ (mov r8, r8)
 8002f7c:	ffff0fff 	.word	0xffff0fff

08002f80 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b084      	sub	sp, #16
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
 8002f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2270      	movs	r2, #112	@ 0x70
 8002f94:	4393      	bics	r3, r2
 8002f96:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f98:	683a      	ldr	r2, [r7, #0]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	2207      	movs	r2, #7
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	68fa      	ldr	r2, [r7, #12]
 8002fa8:	609a      	str	r2, [r3, #8]
}
 8002faa:	46c0      	nop			@ (mov r8, r8)
 8002fac:	46bd      	mov	sp, r7
 8002fae:	b004      	add	sp, #16
 8002fb0:	bd80      	pop	{r7, pc}
	...

08002fb4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b086      	sub	sp, #24
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	60f8      	str	r0, [r7, #12]
 8002fbc:	60b9      	str	r1, [r7, #8]
 8002fbe:	607a      	str	r2, [r7, #4]
 8002fc0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	4a09      	ldr	r2, [pc, #36]	@ (8002ff0 <TIM_ETR_SetConfig+0x3c>)
 8002fcc:	4013      	ands	r3, r2
 8002fce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	021a      	lsls	r2, r3, #8
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	431a      	orrs	r2, r3
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	697a      	ldr	r2, [r7, #20]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	697a      	ldr	r2, [r7, #20]
 8002fe6:	609a      	str	r2, [r3, #8]
}
 8002fe8:	46c0      	nop			@ (mov r8, r8)
 8002fea:	46bd      	mov	sp, r7
 8002fec:	b006      	add	sp, #24
 8002fee:	bd80      	pop	{r7, pc}
 8002ff0:	ffff00ff 	.word	0xffff00ff

08002ff4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b084      	sub	sp, #16
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	223c      	movs	r2, #60	@ 0x3c
 8003002:	5c9b      	ldrb	r3, [r3, r2]
 8003004:	2b01      	cmp	r3, #1
 8003006:	d101      	bne.n	800300c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003008:	2302      	movs	r3, #2
 800300a:	e047      	b.n	800309c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	223c      	movs	r2, #60	@ 0x3c
 8003010:	2101      	movs	r1, #1
 8003012:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	223d      	movs	r2, #61	@ 0x3d
 8003018:	2102      	movs	r1, #2
 800301a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2270      	movs	r2, #112	@ 0x70
 8003030:	4393      	bics	r3, r2
 8003032:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	68fa      	ldr	r2, [r7, #12]
 800303a:	4313      	orrs	r3, r2
 800303c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	68fa      	ldr	r2, [r7, #12]
 8003044:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a16      	ldr	r2, [pc, #88]	@ (80030a4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d00f      	beq.n	8003070 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	2380      	movs	r3, #128	@ 0x80
 8003056:	05db      	lsls	r3, r3, #23
 8003058:	429a      	cmp	r2, r3
 800305a:	d009      	beq.n	8003070 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a11      	ldr	r2, [pc, #68]	@ (80030a8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d004      	beq.n	8003070 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a10      	ldr	r2, [pc, #64]	@ (80030ac <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d10c      	bne.n	800308a <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	2280      	movs	r2, #128	@ 0x80
 8003074:	4393      	bics	r3, r2
 8003076:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	68ba      	ldr	r2, [r7, #8]
 800307e:	4313      	orrs	r3, r2
 8003080:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	68ba      	ldr	r2, [r7, #8]
 8003088:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	223d      	movs	r2, #61	@ 0x3d
 800308e:	2101      	movs	r1, #1
 8003090:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	223c      	movs	r2, #60	@ 0x3c
 8003096:	2100      	movs	r1, #0
 8003098:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800309a:	2300      	movs	r3, #0
}
 800309c:	0018      	movs	r0, r3
 800309e:	46bd      	mov	sp, r7
 80030a0:	b004      	add	sp, #16
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	40012c00 	.word	0x40012c00
 80030a8:	40000400 	.word	0x40000400
 80030ac:	40014000 	.word	0x40014000

080030b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b082      	sub	sp, #8
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80030b8:	46c0      	nop			@ (mov r8, r8)
 80030ba:	46bd      	mov	sp, r7
 80030bc:	b002      	add	sp, #8
 80030be:	bd80      	pop	{r7, pc}

080030c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b082      	sub	sp, #8
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80030c8:	46c0      	nop			@ (mov r8, r8)
 80030ca:	46bd      	mov	sp, r7
 80030cc:	b002      	add	sp, #8
 80030ce:	bd80      	pop	{r7, pc}

080030d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b082      	sub	sp, #8
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d101      	bne.n	80030e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e044      	b.n	800316c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d107      	bne.n	80030fa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2278      	movs	r2, #120	@ 0x78
 80030ee:	2100      	movs	r1, #0
 80030f0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	0018      	movs	r0, r3
 80030f6:	f7fd fc17 	bl	8000928 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2224      	movs	r2, #36	@ 0x24
 80030fe:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	2101      	movs	r1, #1
 800310c:	438a      	bics	r2, r1
 800310e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003114:	2b00      	cmp	r3, #0
 8003116:	d003      	beq.n	8003120 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	0018      	movs	r0, r3
 800311c:	f000 fe20 	bl	8003d60 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	0018      	movs	r0, r3
 8003124:	f000 fc94 	bl	8003a50 <UART_SetConfig>
 8003128:	0003      	movs	r3, r0
 800312a:	2b01      	cmp	r3, #1
 800312c:	d101      	bne.n	8003132 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e01c      	b.n	800316c <HAL_UART_Init+0x9c>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	685a      	ldr	r2, [r3, #4]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	490d      	ldr	r1, [pc, #52]	@ (8003174 <HAL_UART_Init+0xa4>)
 800313e:	400a      	ands	r2, r1
 8003140:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	689a      	ldr	r2, [r3, #8]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	212a      	movs	r1, #42	@ 0x2a
 800314e:	438a      	bics	r2, r1
 8003150:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	2101      	movs	r1, #1
 800315e:	430a      	orrs	r2, r1
 8003160:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	0018      	movs	r0, r3
 8003166:	f000 feaf 	bl	8003ec8 <UART_CheckIdleState>
 800316a:	0003      	movs	r3, r0
}
 800316c:	0018      	movs	r0, r3
 800316e:	46bd      	mov	sp, r7
 8003170:	b002      	add	sp, #8
 8003172:	bd80      	pop	{r7, pc}
 8003174:	ffffb7ff 	.word	0xffffb7ff

08003178 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b088      	sub	sp, #32
 800317c:	af00      	add	r7, sp, #0
 800317e:	60f8      	str	r0, [r7, #12]
 8003180:	60b9      	str	r1, [r7, #8]
 8003182:	1dbb      	adds	r3, r7, #6
 8003184:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800318a:	2b20      	cmp	r3, #32
 800318c:	d000      	beq.n	8003190 <HAL_UART_Transmit_DMA+0x18>
 800318e:	e077      	b.n	8003280 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d003      	beq.n	800319e <HAL_UART_Transmit_DMA+0x26>
 8003196:	1dbb      	adds	r3, r7, #6
 8003198:	881b      	ldrh	r3, [r3, #0]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d101      	bne.n	80031a2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e06f      	b.n	8003282 <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	689a      	ldr	r2, [r3, #8]
 80031a6:	2380      	movs	r3, #128	@ 0x80
 80031a8:	015b      	lsls	r3, r3, #5
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d109      	bne.n	80031c2 <HAL_UART_Transmit_DMA+0x4a>
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	691b      	ldr	r3, [r3, #16]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d105      	bne.n	80031c2 <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	2201      	movs	r2, #1
 80031ba:	4013      	ands	r3, r2
 80031bc:	d001      	beq.n	80031c2 <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e05f      	b.n	8003282 <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    huart->pTxBuffPtr  = pData;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	68ba      	ldr	r2, [r7, #8]
 80031c6:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	1dba      	adds	r2, r7, #6
 80031cc:	2150      	movs	r1, #80	@ 0x50
 80031ce:	8812      	ldrh	r2, [r2, #0]
 80031d0:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	1dba      	adds	r2, r7, #6
 80031d6:	2152      	movs	r1, #82	@ 0x52
 80031d8:	8812      	ldrh	r2, [r2, #0]
 80031da:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2284      	movs	r2, #132	@ 0x84
 80031e0:	2100      	movs	r1, #0
 80031e2:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2221      	movs	r2, #33	@ 0x21
 80031e8:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d027      	beq.n	8003242 <HAL_UART_Transmit_DMA+0xca>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031f6:	4a25      	ldr	r2, [pc, #148]	@ (800328c <HAL_UART_Transmit_DMA+0x114>)
 80031f8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031fe:	4a24      	ldr	r2, [pc, #144]	@ (8003290 <HAL_UART_Transmit_DMA+0x118>)
 8003200:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003206:	4a23      	ldr	r2, [pc, #140]	@ (8003294 <HAL_UART_Transmit_DMA+0x11c>)
 8003208:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800320e:	2200      	movs	r2, #0
 8003210:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800321a:	0019      	movs	r1, r3
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	3328      	adds	r3, #40	@ 0x28
 8003222:	001a      	movs	r2, r3
 8003224:	1dbb      	adds	r3, r7, #6
 8003226:	881b      	ldrh	r3, [r3, #0]
 8003228:	f7fd fee4 	bl	8000ff4 <HAL_DMA_Start_IT>
 800322c:	1e03      	subs	r3, r0, #0
 800322e:	d008      	beq.n	8003242 <HAL_UART_Transmit_DMA+0xca>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2284      	movs	r2, #132	@ 0x84
 8003234:	2110      	movs	r1, #16
 8003236:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2220      	movs	r2, #32
 800323c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e01f      	b.n	8003282 <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	2240      	movs	r2, #64	@ 0x40
 8003248:	621a      	str	r2, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800324a:	f3ef 8310 	mrs	r3, PRIMASK
 800324e:	613b      	str	r3, [r7, #16]
  return(result);
 8003250:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003252:	61fb      	str	r3, [r7, #28]
 8003254:	2301      	movs	r3, #1
 8003256:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	f383 8810 	msr	PRIMASK, r3
}
 800325e:	46c0      	nop			@ (mov r8, r8)
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	689a      	ldr	r2, [r3, #8]
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	2180      	movs	r1, #128	@ 0x80
 800326c:	430a      	orrs	r2, r1
 800326e:	609a      	str	r2, [r3, #8]
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003274:	69bb      	ldr	r3, [r7, #24]
 8003276:	f383 8810 	msr	PRIMASK, r3
}
 800327a:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 800327c:	2300      	movs	r3, #0
 800327e:	e000      	b.n	8003282 <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003280:	2302      	movs	r3, #2
  }
}
 8003282:	0018      	movs	r0, r3
 8003284:	46bd      	mov	sp, r7
 8003286:	b008      	add	sp, #32
 8003288:	bd80      	pop	{r7, pc}
 800328a:	46c0      	nop			@ (mov r8, r8)
 800328c:	08004349 	.word	0x08004349
 8003290:	080043dd 	.word	0x080043dd
 8003294:	0800456b 	.word	0x0800456b

08003298 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b088      	sub	sp, #32
 800329c:	af00      	add	r7, sp, #0
 800329e:	60f8      	str	r0, [r7, #12]
 80032a0:	60b9      	str	r1, [r7, #8]
 80032a2:	1dbb      	adds	r3, r7, #6
 80032a4:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2280      	movs	r2, #128	@ 0x80
 80032aa:	589b      	ldr	r3, [r3, r2]
 80032ac:	2b20      	cmp	r3, #32
 80032ae:	d145      	bne.n	800333c <HAL_UART_Receive_DMA+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d003      	beq.n	80032be <HAL_UART_Receive_DMA+0x26>
 80032b6:	1dbb      	adds	r3, r7, #6
 80032b8:	881b      	ldrh	r3, [r3, #0]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d101      	bne.n	80032c2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e03d      	b.n	800333e <HAL_UART_Receive_DMA+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	689a      	ldr	r2, [r3, #8]
 80032c6:	2380      	movs	r3, #128	@ 0x80
 80032c8:	015b      	lsls	r3, r3, #5
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d109      	bne.n	80032e2 <HAL_UART_Receive_DMA+0x4a>
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	691b      	ldr	r3, [r3, #16]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d105      	bne.n	80032e2 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	2201      	movs	r2, #1
 80032da:	4013      	ands	r3, r2
 80032dc:	d001      	beq.n	80032e2 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e02d      	b.n	800333e <HAL_UART_Receive_DMA+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2200      	movs	r2, #0
 80032e6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	685a      	ldr	r2, [r3, #4]
 80032ee:	2380      	movs	r3, #128	@ 0x80
 80032f0:	041b      	lsls	r3, r3, #16
 80032f2:	4013      	ands	r3, r2
 80032f4:	d019      	beq.n	800332a <HAL_UART_Receive_DMA+0x92>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032f6:	f3ef 8310 	mrs	r3, PRIMASK
 80032fa:	613b      	str	r3, [r7, #16]
  return(result);
 80032fc:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80032fe:	61fb      	str	r3, [r7, #28]
 8003300:	2301      	movs	r3, #1
 8003302:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	f383 8810 	msr	PRIMASK, r3
}
 800330a:	46c0      	nop			@ (mov r8, r8)
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	2180      	movs	r1, #128	@ 0x80
 8003318:	04c9      	lsls	r1, r1, #19
 800331a:	430a      	orrs	r2, r1
 800331c:	601a      	str	r2, [r3, #0]
 800331e:	69fb      	ldr	r3, [r7, #28]
 8003320:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003322:	69bb      	ldr	r3, [r7, #24]
 8003324:	f383 8810 	msr	PRIMASK, r3
}
 8003328:	46c0      	nop			@ (mov r8, r8)
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800332a:	1dbb      	adds	r3, r7, #6
 800332c:	881a      	ldrh	r2, [r3, #0]
 800332e:	68b9      	ldr	r1, [r7, #8]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	0018      	movs	r0, r3
 8003334:	f000 fee0 	bl	80040f8 <UART_Start_Receive_DMA>
 8003338:	0003      	movs	r3, r0
 800333a:	e000      	b.n	800333e <HAL_UART_Receive_DMA+0xa6>
  }
  else
  {
    return HAL_BUSY;
 800333c:	2302      	movs	r3, #2
  }
}
 800333e:	0018      	movs	r0, r3
 8003340:	46bd      	mov	sp, r7
 8003342:	b008      	add	sp, #32
 8003344:	bd80      	pop	{r7, pc}

08003346 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8003346:	b580      	push	{r7, lr}
 8003348:	b08c      	sub	sp, #48	@ 0x30
 800334a:	af00      	add	r7, sp, #0
 800334c:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003352:	62fb      	str	r3, [r7, #44]	@ 0x2c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2280      	movs	r2, #128	@ 0x80
 8003358:	589b      	ldr	r3, [r3, r2]
 800335a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	2280      	movs	r2, #128	@ 0x80
 8003364:	4013      	ands	r3, r2
 8003366:	2b80      	cmp	r3, #128	@ 0x80
 8003368:	d138      	bne.n	80033dc <HAL_UART_DMAStop+0x96>
 800336a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800336c:	2b21      	cmp	r3, #33	@ 0x21
 800336e:	d135      	bne.n	80033dc <HAL_UART_DMAStop+0x96>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003370:	f3ef 8310 	mrs	r3, PRIMASK
 8003374:	617b      	str	r3, [r7, #20]
  return(result);
 8003376:	697b      	ldr	r3, [r7, #20]
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003378:	627b      	str	r3, [r7, #36]	@ 0x24
 800337a:	2301      	movs	r3, #1
 800337c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800337e:	69bb      	ldr	r3, [r7, #24]
 8003380:	f383 8810 	msr	PRIMASK, r3
}
 8003384:	46c0      	nop			@ (mov r8, r8)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	689a      	ldr	r2, [r3, #8]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	2180      	movs	r1, #128	@ 0x80
 8003392:	438a      	bics	r2, r1
 8003394:	609a      	str	r2, [r3, #8]
 8003396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003398:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	f383 8810 	msr	PRIMASK, r3
}
 80033a0:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d014      	beq.n	80033d4 <HAL_UART_DMAStop+0x8e>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033ae:	0018      	movs	r0, r3
 80033b0:	f7fd fe86 	bl	80010c0 <HAL_DMA_Abort>
 80033b4:	1e03      	subs	r3, r0, #0
 80033b6:	d00d      	beq.n	80033d4 <HAL_UART_DMAStop+0x8e>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033bc:	0018      	movs	r0, r3
 80033be:	f7fd ff9e 	bl	80012fe <HAL_DMA_GetError>
 80033c2:	0003      	movs	r3, r0
 80033c4:	2b20      	cmp	r3, #32
 80033c6:	d105      	bne.n	80033d4 <HAL_UART_DMAStop+0x8e>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2284      	movs	r2, #132	@ 0x84
 80033cc:	2110      	movs	r1, #16
 80033ce:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 80033d0:	2303      	movs	r3, #3
 80033d2:	e044      	b.n	800345e <HAL_UART_DMAStop+0x118>
        }
      }
    }

    UART_EndTxTransfer(huart);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	0018      	movs	r0, r3
 80033d8:	f000 ff2e 	bl	8004238 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	2240      	movs	r2, #64	@ 0x40
 80033e4:	4013      	ands	r3, r2
 80033e6:	2b40      	cmp	r3, #64	@ 0x40
 80033e8:	d138      	bne.n	800345c <HAL_UART_DMAStop+0x116>
 80033ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033ec:	2b22      	cmp	r3, #34	@ 0x22
 80033ee:	d135      	bne.n	800345c <HAL_UART_DMAStop+0x116>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033f0:	f3ef 8310 	mrs	r3, PRIMASK
 80033f4:	60bb      	str	r3, [r7, #8]
  return(result);
 80033f6:	68bb      	ldr	r3, [r7, #8]
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033f8:	623b      	str	r3, [r7, #32]
 80033fa:	2301      	movs	r3, #1
 80033fc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	f383 8810 	msr	PRIMASK, r3
}
 8003404:	46c0      	nop			@ (mov r8, r8)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	689a      	ldr	r2, [r3, #8]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	2140      	movs	r1, #64	@ 0x40
 8003412:	438a      	bics	r2, r1
 8003414:	609a      	str	r2, [r3, #8]
 8003416:	6a3b      	ldr	r3, [r7, #32]
 8003418:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	f383 8810 	msr	PRIMASK, r3
}
 8003420:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003426:	2b00      	cmp	r3, #0
 8003428:	d014      	beq.n	8003454 <HAL_UART_DMAStop+0x10e>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800342e:	0018      	movs	r0, r3
 8003430:	f7fd fe46 	bl	80010c0 <HAL_DMA_Abort>
 8003434:	1e03      	subs	r3, r0, #0
 8003436:	d00d      	beq.n	8003454 <HAL_UART_DMAStop+0x10e>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800343c:	0018      	movs	r0, r3
 800343e:	f7fd ff5e 	bl	80012fe <HAL_DMA_GetError>
 8003442:	0003      	movs	r3, r0
 8003444:	2b20      	cmp	r3, #32
 8003446:	d105      	bne.n	8003454 <HAL_UART_DMAStop+0x10e>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2284      	movs	r2, #132	@ 0x84
 800344c:	2110      	movs	r1, #16
 800344e:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003450:	2303      	movs	r3, #3
 8003452:	e004      	b.n	800345e <HAL_UART_DMAStop+0x118>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	0018      	movs	r0, r3
 8003458:	f000 ff12 	bl	8004280 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800345c:	2300      	movs	r3, #0
}
 800345e:	0018      	movs	r0, r3
 8003460:	46bd      	mov	sp, r7
 8003462:	b00c      	add	sp, #48	@ 0x30
 8003464:	bd80      	pop	{r7, pc}
	...

08003468 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003468:	b590      	push	{r4, r7, lr}
 800346a:	b0ab      	sub	sp, #172	@ 0xac
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	69db      	ldr	r3, [r3, #28]
 8003476:	22a4      	movs	r2, #164	@ 0xa4
 8003478:	18b9      	adds	r1, r7, r2
 800347a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	20a0      	movs	r0, #160	@ 0xa0
 8003484:	1839      	adds	r1, r7, r0
 8003486:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	219c      	movs	r1, #156	@ 0x9c
 8003490:	1879      	adds	r1, r7, r1
 8003492:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003494:	0011      	movs	r1, r2
 8003496:	18bb      	adds	r3, r7, r2
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a99      	ldr	r2, [pc, #612]	@ (8003700 <HAL_UART_IRQHandler+0x298>)
 800349c:	4013      	ands	r3, r2
 800349e:	2298      	movs	r2, #152	@ 0x98
 80034a0:	18bc      	adds	r4, r7, r2
 80034a2:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80034a4:	18bb      	adds	r3, r7, r2
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d114      	bne.n	80034d6 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80034ac:	187b      	adds	r3, r7, r1
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	2220      	movs	r2, #32
 80034b2:	4013      	ands	r3, r2
 80034b4:	d00f      	beq.n	80034d6 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80034b6:	183b      	adds	r3, r7, r0
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	2220      	movs	r2, #32
 80034bc:	4013      	ands	r3, r2
 80034be:	d00a      	beq.n	80034d6 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d100      	bne.n	80034ca <HAL_UART_IRQHandler+0x62>
 80034c8:	e29e      	b.n	8003a08 <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	0010      	movs	r0, r2
 80034d2:	4798      	blx	r3
      }
      return;
 80034d4:	e298      	b.n	8003a08 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80034d6:	2398      	movs	r3, #152	@ 0x98
 80034d8:	18fb      	adds	r3, r7, r3
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d100      	bne.n	80034e2 <HAL_UART_IRQHandler+0x7a>
 80034e0:	e114      	b.n	800370c <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80034e2:	239c      	movs	r3, #156	@ 0x9c
 80034e4:	18fb      	adds	r3, r7, r3
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	2201      	movs	r2, #1
 80034ea:	4013      	ands	r3, r2
 80034ec:	d106      	bne.n	80034fc <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80034ee:	23a0      	movs	r3, #160	@ 0xa0
 80034f0:	18fb      	adds	r3, r7, r3
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a83      	ldr	r2, [pc, #524]	@ (8003704 <HAL_UART_IRQHandler+0x29c>)
 80034f6:	4013      	ands	r3, r2
 80034f8:	d100      	bne.n	80034fc <HAL_UART_IRQHandler+0x94>
 80034fa:	e107      	b.n	800370c <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80034fc:	23a4      	movs	r3, #164	@ 0xa4
 80034fe:	18fb      	adds	r3, r7, r3
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	2201      	movs	r2, #1
 8003504:	4013      	ands	r3, r2
 8003506:	d012      	beq.n	800352e <HAL_UART_IRQHandler+0xc6>
 8003508:	23a0      	movs	r3, #160	@ 0xa0
 800350a:	18fb      	adds	r3, r7, r3
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	2380      	movs	r3, #128	@ 0x80
 8003510:	005b      	lsls	r3, r3, #1
 8003512:	4013      	ands	r3, r2
 8003514:	d00b      	beq.n	800352e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	2201      	movs	r2, #1
 800351c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2284      	movs	r2, #132	@ 0x84
 8003522:	589b      	ldr	r3, [r3, r2]
 8003524:	2201      	movs	r2, #1
 8003526:	431a      	orrs	r2, r3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2184      	movs	r1, #132	@ 0x84
 800352c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800352e:	23a4      	movs	r3, #164	@ 0xa4
 8003530:	18fb      	adds	r3, r7, r3
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	2202      	movs	r2, #2
 8003536:	4013      	ands	r3, r2
 8003538:	d011      	beq.n	800355e <HAL_UART_IRQHandler+0xf6>
 800353a:	239c      	movs	r3, #156	@ 0x9c
 800353c:	18fb      	adds	r3, r7, r3
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	2201      	movs	r2, #1
 8003542:	4013      	ands	r3, r2
 8003544:	d00b      	beq.n	800355e <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	2202      	movs	r2, #2
 800354c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2284      	movs	r2, #132	@ 0x84
 8003552:	589b      	ldr	r3, [r3, r2]
 8003554:	2204      	movs	r2, #4
 8003556:	431a      	orrs	r2, r3
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2184      	movs	r1, #132	@ 0x84
 800355c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800355e:	23a4      	movs	r3, #164	@ 0xa4
 8003560:	18fb      	adds	r3, r7, r3
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	2204      	movs	r2, #4
 8003566:	4013      	ands	r3, r2
 8003568:	d011      	beq.n	800358e <HAL_UART_IRQHandler+0x126>
 800356a:	239c      	movs	r3, #156	@ 0x9c
 800356c:	18fb      	adds	r3, r7, r3
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	2201      	movs	r2, #1
 8003572:	4013      	ands	r3, r2
 8003574:	d00b      	beq.n	800358e <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	2204      	movs	r2, #4
 800357c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2284      	movs	r2, #132	@ 0x84
 8003582:	589b      	ldr	r3, [r3, r2]
 8003584:	2202      	movs	r2, #2
 8003586:	431a      	orrs	r2, r3
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2184      	movs	r1, #132	@ 0x84
 800358c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800358e:	23a4      	movs	r3, #164	@ 0xa4
 8003590:	18fb      	adds	r3, r7, r3
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	2208      	movs	r2, #8
 8003596:	4013      	ands	r3, r2
 8003598:	d017      	beq.n	80035ca <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800359a:	23a0      	movs	r3, #160	@ 0xa0
 800359c:	18fb      	adds	r3, r7, r3
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	2220      	movs	r2, #32
 80035a2:	4013      	ands	r3, r2
 80035a4:	d105      	bne.n	80035b2 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80035a6:	239c      	movs	r3, #156	@ 0x9c
 80035a8:	18fb      	adds	r3, r7, r3
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	2201      	movs	r2, #1
 80035ae:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80035b0:	d00b      	beq.n	80035ca <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	2208      	movs	r2, #8
 80035b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2284      	movs	r2, #132	@ 0x84
 80035be:	589b      	ldr	r3, [r3, r2]
 80035c0:	2208      	movs	r2, #8
 80035c2:	431a      	orrs	r2, r3
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2184      	movs	r1, #132	@ 0x84
 80035c8:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80035ca:	23a4      	movs	r3, #164	@ 0xa4
 80035cc:	18fb      	adds	r3, r7, r3
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	2380      	movs	r3, #128	@ 0x80
 80035d2:	011b      	lsls	r3, r3, #4
 80035d4:	4013      	ands	r3, r2
 80035d6:	d013      	beq.n	8003600 <HAL_UART_IRQHandler+0x198>
 80035d8:	23a0      	movs	r3, #160	@ 0xa0
 80035da:	18fb      	adds	r3, r7, r3
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	2380      	movs	r3, #128	@ 0x80
 80035e0:	04db      	lsls	r3, r3, #19
 80035e2:	4013      	ands	r3, r2
 80035e4:	d00c      	beq.n	8003600 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	2280      	movs	r2, #128	@ 0x80
 80035ec:	0112      	lsls	r2, r2, #4
 80035ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2284      	movs	r2, #132	@ 0x84
 80035f4:	589b      	ldr	r3, [r3, r2]
 80035f6:	2220      	movs	r2, #32
 80035f8:	431a      	orrs	r2, r3
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2184      	movs	r1, #132	@ 0x84
 80035fe:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2284      	movs	r2, #132	@ 0x84
 8003604:	589b      	ldr	r3, [r3, r2]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d100      	bne.n	800360c <HAL_UART_IRQHandler+0x1a4>
 800360a:	e1ff      	b.n	8003a0c <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800360c:	23a4      	movs	r3, #164	@ 0xa4
 800360e:	18fb      	adds	r3, r7, r3
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	2220      	movs	r2, #32
 8003614:	4013      	ands	r3, r2
 8003616:	d00e      	beq.n	8003636 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003618:	23a0      	movs	r3, #160	@ 0xa0
 800361a:	18fb      	adds	r3, r7, r3
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	2220      	movs	r2, #32
 8003620:	4013      	ands	r3, r2
 8003622:	d008      	beq.n	8003636 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003628:	2b00      	cmp	r3, #0
 800362a:	d004      	beq.n	8003636 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	0010      	movs	r0, r2
 8003634:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2284      	movs	r2, #132	@ 0x84
 800363a:	589b      	ldr	r3, [r3, r2]
 800363c:	2194      	movs	r1, #148	@ 0x94
 800363e:	187a      	adds	r2, r7, r1
 8003640:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	2240      	movs	r2, #64	@ 0x40
 800364a:	4013      	ands	r3, r2
 800364c:	2b40      	cmp	r3, #64	@ 0x40
 800364e:	d004      	beq.n	800365a <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003650:	187b      	adds	r3, r7, r1
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	2228      	movs	r2, #40	@ 0x28
 8003656:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003658:	d047      	beq.n	80036ea <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	0018      	movs	r0, r3
 800365e:	f000 fe0f 	bl	8004280 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	2240      	movs	r2, #64	@ 0x40
 800366a:	4013      	ands	r3, r2
 800366c:	2b40      	cmp	r3, #64	@ 0x40
 800366e:	d137      	bne.n	80036e0 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003670:	f3ef 8310 	mrs	r3, PRIMASK
 8003674:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8003676:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003678:	2090      	movs	r0, #144	@ 0x90
 800367a:	183a      	adds	r2, r7, r0
 800367c:	6013      	str	r3, [r2, #0]
 800367e:	2301      	movs	r3, #1
 8003680:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003682:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003684:	f383 8810 	msr	PRIMASK, r3
}
 8003688:	46c0      	nop			@ (mov r8, r8)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	689a      	ldr	r2, [r3, #8]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	2140      	movs	r1, #64	@ 0x40
 8003696:	438a      	bics	r2, r1
 8003698:	609a      	str	r2, [r3, #8]
 800369a:	183b      	adds	r3, r7, r0
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036a0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80036a2:	f383 8810 	msr	PRIMASK, r3
}
 80036a6:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d012      	beq.n	80036d6 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036b4:	4a14      	ldr	r2, [pc, #80]	@ (8003708 <HAL_UART_IRQHandler+0x2a0>)
 80036b6:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036bc:	0018      	movs	r0, r3
 80036be:	f7fd fd37 	bl	8001130 <HAL_DMA_Abort_IT>
 80036c2:	1e03      	subs	r3, r0, #0
 80036c4:	d01a      	beq.n	80036fc <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036d0:	0018      	movs	r0, r3
 80036d2:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036d4:	e012      	b.n	80036fc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	0018      	movs	r0, r3
 80036da:	f000 f9a5 	bl	8003a28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036de:	e00d      	b.n	80036fc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	0018      	movs	r0, r3
 80036e4:	f000 f9a0 	bl	8003a28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036e8:	e008      	b.n	80036fc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	0018      	movs	r0, r3
 80036ee:	f000 f99b 	bl	8003a28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2284      	movs	r2, #132	@ 0x84
 80036f6:	2100      	movs	r1, #0
 80036f8:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80036fa:	e187      	b.n	8003a0c <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036fc:	46c0      	nop			@ (mov r8, r8)
    return;
 80036fe:	e185      	b.n	8003a0c <HAL_UART_IRQHandler+0x5a4>
 8003700:	0000080f 	.word	0x0000080f
 8003704:	04000120 	.word	0x04000120
 8003708:	080045ef 	.word	0x080045ef

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003710:	2b01      	cmp	r3, #1
 8003712:	d000      	beq.n	8003716 <HAL_UART_IRQHandler+0x2ae>
 8003714:	e139      	b.n	800398a <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003716:	23a4      	movs	r3, #164	@ 0xa4
 8003718:	18fb      	adds	r3, r7, r3
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	2210      	movs	r2, #16
 800371e:	4013      	ands	r3, r2
 8003720:	d100      	bne.n	8003724 <HAL_UART_IRQHandler+0x2bc>
 8003722:	e132      	b.n	800398a <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003724:	23a0      	movs	r3, #160	@ 0xa0
 8003726:	18fb      	adds	r3, r7, r3
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	2210      	movs	r2, #16
 800372c:	4013      	ands	r3, r2
 800372e:	d100      	bne.n	8003732 <HAL_UART_IRQHandler+0x2ca>
 8003730:	e12b      	b.n	800398a <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	2210      	movs	r2, #16
 8003738:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	2240      	movs	r2, #64	@ 0x40
 8003742:	4013      	ands	r3, r2
 8003744:	2b40      	cmp	r3, #64	@ 0x40
 8003746:	d000      	beq.n	800374a <HAL_UART_IRQHandler+0x2e2>
 8003748:	e09f      	b.n	800388a <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	685a      	ldr	r2, [r3, #4]
 8003752:	217e      	movs	r1, #126	@ 0x7e
 8003754:	187b      	adds	r3, r7, r1
 8003756:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003758:	187b      	adds	r3, r7, r1
 800375a:	881b      	ldrh	r3, [r3, #0]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d100      	bne.n	8003762 <HAL_UART_IRQHandler+0x2fa>
 8003760:	e156      	b.n	8003a10 <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2258      	movs	r2, #88	@ 0x58
 8003766:	5a9b      	ldrh	r3, [r3, r2]
 8003768:	187a      	adds	r2, r7, r1
 800376a:	8812      	ldrh	r2, [r2, #0]
 800376c:	429a      	cmp	r2, r3
 800376e:	d300      	bcc.n	8003772 <HAL_UART_IRQHandler+0x30a>
 8003770:	e14e      	b.n	8003a10 <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	187a      	adds	r2, r7, r1
 8003776:	215a      	movs	r1, #90	@ 0x5a
 8003778:	8812      	ldrh	r2, [r2, #0]
 800377a:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003780:	699b      	ldr	r3, [r3, #24]
 8003782:	2b20      	cmp	r3, #32
 8003784:	d06f      	beq.n	8003866 <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003786:	f3ef 8310 	mrs	r3, PRIMASK
 800378a:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800378c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800378e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003790:	2301      	movs	r3, #1
 8003792:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003794:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003796:	f383 8810 	msr	PRIMASK, r3
}
 800379a:	46c0      	nop			@ (mov r8, r8)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	499e      	ldr	r1, [pc, #632]	@ (8003a20 <HAL_UART_IRQHandler+0x5b8>)
 80037a8:	400a      	ands	r2, r1
 80037aa:	601a      	str	r2, [r3, #0]
 80037ac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80037ae:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037b2:	f383 8810 	msr	PRIMASK, r3
}
 80037b6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037b8:	f3ef 8310 	mrs	r3, PRIMASK
 80037bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 80037be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037c0:	677b      	str	r3, [r7, #116]	@ 0x74
 80037c2:	2301      	movs	r3, #1
 80037c4:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037c8:	f383 8810 	msr	PRIMASK, r3
}
 80037cc:	46c0      	nop			@ (mov r8, r8)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	689a      	ldr	r2, [r3, #8]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	2101      	movs	r1, #1
 80037da:	438a      	bics	r2, r1
 80037dc:	609a      	str	r2, [r3, #8]
 80037de:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80037e0:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80037e4:	f383 8810 	msr	PRIMASK, r3
}
 80037e8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037ea:	f3ef 8310 	mrs	r3, PRIMASK
 80037ee:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 80037f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037f2:	673b      	str	r3, [r7, #112]	@ 0x70
 80037f4:	2301      	movs	r3, #1
 80037f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80037fa:	f383 8810 	msr	PRIMASK, r3
}
 80037fe:	46c0      	nop			@ (mov r8, r8)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	689a      	ldr	r2, [r3, #8]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	2140      	movs	r1, #64	@ 0x40
 800380c:	438a      	bics	r2, r1
 800380e:	609a      	str	r2, [r3, #8]
 8003810:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003812:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003814:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003816:	f383 8810 	msr	PRIMASK, r3
}
 800381a:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2280      	movs	r2, #128	@ 0x80
 8003820:	2120      	movs	r1, #32
 8003822:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2200      	movs	r2, #0
 8003828:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800382a:	f3ef 8310 	mrs	r3, PRIMASK
 800382e:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8003830:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003832:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003834:	2301      	movs	r3, #1
 8003836:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003838:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800383a:	f383 8810 	msr	PRIMASK, r3
}
 800383e:	46c0      	nop			@ (mov r8, r8)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	2110      	movs	r1, #16
 800384c:	438a      	bics	r2, r1
 800384e:	601a      	str	r2, [r3, #0]
 8003850:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003852:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003854:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003856:	f383 8810 	msr	PRIMASK, r3
}
 800385a:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003860:	0018      	movs	r0, r3
 8003862:	f7fd fc2d 	bl	80010c0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2202      	movs	r2, #2
 800386a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2258      	movs	r2, #88	@ 0x58
 8003870:	5a9a      	ldrh	r2, [r3, r2]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	215a      	movs	r1, #90	@ 0x5a
 8003876:	5a5b      	ldrh	r3, [r3, r1]
 8003878:	b29b      	uxth	r3, r3
 800387a:	1ad3      	subs	r3, r2, r3
 800387c:	b29a      	uxth	r2, r3
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	0011      	movs	r1, r2
 8003882:	0018      	movs	r0, r3
 8003884:	f000 f8d8 	bl	8003a38 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003888:	e0c2      	b.n	8003a10 <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2258      	movs	r2, #88	@ 0x58
 800388e:	5a99      	ldrh	r1, [r3, r2]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	225a      	movs	r2, #90	@ 0x5a
 8003894:	5a9b      	ldrh	r3, [r3, r2]
 8003896:	b29a      	uxth	r2, r3
 8003898:	208e      	movs	r0, #142	@ 0x8e
 800389a:	183b      	adds	r3, r7, r0
 800389c:	1a8a      	subs	r2, r1, r2
 800389e:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	225a      	movs	r2, #90	@ 0x5a
 80038a4:	5a9b      	ldrh	r3, [r3, r2]
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d100      	bne.n	80038ae <HAL_UART_IRQHandler+0x446>
 80038ac:	e0b2      	b.n	8003a14 <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 80038ae:	183b      	adds	r3, r7, r0
 80038b0:	881b      	ldrh	r3, [r3, #0]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d100      	bne.n	80038b8 <HAL_UART_IRQHandler+0x450>
 80038b6:	e0ad      	b.n	8003a14 <HAL_UART_IRQHandler+0x5ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038b8:	f3ef 8310 	mrs	r3, PRIMASK
 80038bc:	60fb      	str	r3, [r7, #12]
  return(result);
 80038be:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038c0:	2488      	movs	r4, #136	@ 0x88
 80038c2:	193a      	adds	r2, r7, r4
 80038c4:	6013      	str	r3, [r2, #0]
 80038c6:	2301      	movs	r3, #1
 80038c8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	f383 8810 	msr	PRIMASK, r3
}
 80038d0:	46c0      	nop			@ (mov r8, r8)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4951      	ldr	r1, [pc, #324]	@ (8003a24 <HAL_UART_IRQHandler+0x5bc>)
 80038de:	400a      	ands	r2, r1
 80038e0:	601a      	str	r2, [r3, #0]
 80038e2:	193b      	adds	r3, r7, r4
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	f383 8810 	msr	PRIMASK, r3
}
 80038ee:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038f0:	f3ef 8310 	mrs	r3, PRIMASK
 80038f4:	61bb      	str	r3, [r7, #24]
  return(result);
 80038f6:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038f8:	2484      	movs	r4, #132	@ 0x84
 80038fa:	193a      	adds	r2, r7, r4
 80038fc:	6013      	str	r3, [r2, #0]
 80038fe:	2301      	movs	r3, #1
 8003900:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003902:	69fb      	ldr	r3, [r7, #28]
 8003904:	f383 8810 	msr	PRIMASK, r3
}
 8003908:	46c0      	nop			@ (mov r8, r8)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	689a      	ldr	r2, [r3, #8]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	2101      	movs	r1, #1
 8003916:	438a      	bics	r2, r1
 8003918:	609a      	str	r2, [r3, #8]
 800391a:	193b      	adds	r3, r7, r4
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003920:	6a3b      	ldr	r3, [r7, #32]
 8003922:	f383 8810 	msr	PRIMASK, r3
}
 8003926:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2280      	movs	r2, #128	@ 0x80
 800392c:	2120      	movs	r1, #32
 800392e:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2200      	movs	r2, #0
 8003934:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800393c:	f3ef 8310 	mrs	r3, PRIMASK
 8003940:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003944:	2480      	movs	r4, #128	@ 0x80
 8003946:	193a      	adds	r2, r7, r4
 8003948:	6013      	str	r3, [r2, #0]
 800394a:	2301      	movs	r3, #1
 800394c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800394e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003950:	f383 8810 	msr	PRIMASK, r3
}
 8003954:	46c0      	nop			@ (mov r8, r8)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	2110      	movs	r1, #16
 8003962:	438a      	bics	r2, r1
 8003964:	601a      	str	r2, [r3, #0]
 8003966:	193b      	adds	r3, r7, r4
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800396c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800396e:	f383 8810 	msr	PRIMASK, r3
}
 8003972:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2202      	movs	r2, #2
 8003978:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800397a:	183b      	adds	r3, r7, r0
 800397c:	881a      	ldrh	r2, [r3, #0]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	0011      	movs	r1, r2
 8003982:	0018      	movs	r0, r3
 8003984:	f000 f858 	bl	8003a38 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003988:	e044      	b.n	8003a14 <HAL_UART_IRQHandler+0x5ac>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800398a:	23a4      	movs	r3, #164	@ 0xa4
 800398c:	18fb      	adds	r3, r7, r3
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	2380      	movs	r3, #128	@ 0x80
 8003992:	035b      	lsls	r3, r3, #13
 8003994:	4013      	ands	r3, r2
 8003996:	d010      	beq.n	80039ba <HAL_UART_IRQHandler+0x552>
 8003998:	239c      	movs	r3, #156	@ 0x9c
 800399a:	18fb      	adds	r3, r7, r3
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	2380      	movs	r3, #128	@ 0x80
 80039a0:	03db      	lsls	r3, r3, #15
 80039a2:	4013      	ands	r3, r2
 80039a4:	d009      	beq.n	80039ba <HAL_UART_IRQHandler+0x552>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	2280      	movs	r2, #128	@ 0x80
 80039ac:	0352      	lsls	r2, r2, #13
 80039ae:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	0018      	movs	r0, r3
 80039b4:	f000 fe5d 	bl	8004672 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80039b8:	e02f      	b.n	8003a1a <HAL_UART_IRQHandler+0x5b2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80039ba:	23a4      	movs	r3, #164	@ 0xa4
 80039bc:	18fb      	adds	r3, r7, r3
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	2280      	movs	r2, #128	@ 0x80
 80039c2:	4013      	ands	r3, r2
 80039c4:	d00f      	beq.n	80039e6 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80039c6:	23a0      	movs	r3, #160	@ 0xa0
 80039c8:	18fb      	adds	r3, r7, r3
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	2280      	movs	r2, #128	@ 0x80
 80039ce:	4013      	ands	r3, r2
 80039d0:	d009      	beq.n	80039e6 <HAL_UART_IRQHandler+0x57e>
  {
    if (huart->TxISR != NULL)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d01e      	beq.n	8003a18 <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	0010      	movs	r0, r2
 80039e2:	4798      	blx	r3
    }
    return;
 80039e4:	e018      	b.n	8003a18 <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80039e6:	23a4      	movs	r3, #164	@ 0xa4
 80039e8:	18fb      	adds	r3, r7, r3
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	2240      	movs	r2, #64	@ 0x40
 80039ee:	4013      	ands	r3, r2
 80039f0:	d013      	beq.n	8003a1a <HAL_UART_IRQHandler+0x5b2>
 80039f2:	23a0      	movs	r3, #160	@ 0xa0
 80039f4:	18fb      	adds	r3, r7, r3
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	2240      	movs	r2, #64	@ 0x40
 80039fa:	4013      	ands	r3, r2
 80039fc:	d00d      	beq.n	8003a1a <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	0018      	movs	r0, r3
 8003a02:	f000 fe0b 	bl	800461c <UART_EndTransmit_IT>
    return;
 8003a06:	e008      	b.n	8003a1a <HAL_UART_IRQHandler+0x5b2>
      return;
 8003a08:	46c0      	nop			@ (mov r8, r8)
 8003a0a:	e006      	b.n	8003a1a <HAL_UART_IRQHandler+0x5b2>
    return;
 8003a0c:	46c0      	nop			@ (mov r8, r8)
 8003a0e:	e004      	b.n	8003a1a <HAL_UART_IRQHandler+0x5b2>
      return;
 8003a10:	46c0      	nop			@ (mov r8, r8)
 8003a12:	e002      	b.n	8003a1a <HAL_UART_IRQHandler+0x5b2>
      return;
 8003a14:	46c0      	nop			@ (mov r8, r8)
 8003a16:	e000      	b.n	8003a1a <HAL_UART_IRQHandler+0x5b2>
    return;
 8003a18:	46c0      	nop			@ (mov r8, r8)
  }

}
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	b02b      	add	sp, #172	@ 0xac
 8003a1e:	bd90      	pop	{r4, r7, pc}
 8003a20:	fffffeff 	.word	0xfffffeff
 8003a24:	fffffedf 	.word	0xfffffedf

08003a28 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b082      	sub	sp, #8
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003a30:	46c0      	nop			@ (mov r8, r8)
 8003a32:	46bd      	mov	sp, r7
 8003a34:	b002      	add	sp, #8
 8003a36:	bd80      	pop	{r7, pc}

08003a38 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b082      	sub	sp, #8
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	000a      	movs	r2, r1
 8003a42:	1cbb      	adds	r3, r7, #2
 8003a44:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003a46:	46c0      	nop			@ (mov r8, r8)
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	b002      	add	sp, #8
 8003a4c:	bd80      	pop	{r7, pc}
	...

08003a50 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b088      	sub	sp, #32
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003a58:	231e      	movs	r3, #30
 8003a5a:	18fb      	adds	r3, r7, r3
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	689a      	ldr	r2, [r3, #8]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	691b      	ldr	r3, [r3, #16]
 8003a68:	431a      	orrs	r2, r3
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	695b      	ldr	r3, [r3, #20]
 8003a6e:	431a      	orrs	r2, r3
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	69db      	ldr	r3, [r3, #28]
 8003a74:	4313      	orrs	r3, r2
 8003a76:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4aaf      	ldr	r2, [pc, #700]	@ (8003d3c <UART_SetConfig+0x2ec>)
 8003a80:	4013      	ands	r3, r2
 8003a82:	0019      	movs	r1, r3
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	697a      	ldr	r2, [r7, #20]
 8003a8a:	430a      	orrs	r2, r1
 8003a8c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	4aaa      	ldr	r2, [pc, #680]	@ (8003d40 <UART_SetConfig+0x2f0>)
 8003a96:	4013      	ands	r3, r2
 8003a98:	0019      	movs	r1, r3
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	68da      	ldr	r2, [r3, #12]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	430a      	orrs	r2, r1
 8003aa4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	699b      	ldr	r3, [r3, #24]
 8003aaa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6a1b      	ldr	r3, [r3, #32]
 8003ab0:	697a      	ldr	r2, [r7, #20]
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	4aa1      	ldr	r2, [pc, #644]	@ (8003d44 <UART_SetConfig+0x2f4>)
 8003abe:	4013      	ands	r3, r2
 8003ac0:	0019      	movs	r1, r3
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	697a      	ldr	r2, [r7, #20]
 8003ac8:	430a      	orrs	r2, r1
 8003aca:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a9d      	ldr	r2, [pc, #628]	@ (8003d48 <UART_SetConfig+0x2f8>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d127      	bne.n	8003b26 <UART_SetConfig+0xd6>
 8003ad6:	4b9d      	ldr	r3, [pc, #628]	@ (8003d4c <UART_SetConfig+0x2fc>)
 8003ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ada:	2203      	movs	r2, #3
 8003adc:	4013      	ands	r3, r2
 8003ade:	2b03      	cmp	r3, #3
 8003ae0:	d00d      	beq.n	8003afe <UART_SetConfig+0xae>
 8003ae2:	d81b      	bhi.n	8003b1c <UART_SetConfig+0xcc>
 8003ae4:	2b02      	cmp	r3, #2
 8003ae6:	d014      	beq.n	8003b12 <UART_SetConfig+0xc2>
 8003ae8:	d818      	bhi.n	8003b1c <UART_SetConfig+0xcc>
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d002      	beq.n	8003af4 <UART_SetConfig+0xa4>
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d00a      	beq.n	8003b08 <UART_SetConfig+0xb8>
 8003af2:	e013      	b.n	8003b1c <UART_SetConfig+0xcc>
 8003af4:	231f      	movs	r3, #31
 8003af6:	18fb      	adds	r3, r7, r3
 8003af8:	2200      	movs	r2, #0
 8003afa:	701a      	strb	r2, [r3, #0]
 8003afc:	e065      	b.n	8003bca <UART_SetConfig+0x17a>
 8003afe:	231f      	movs	r3, #31
 8003b00:	18fb      	adds	r3, r7, r3
 8003b02:	2202      	movs	r2, #2
 8003b04:	701a      	strb	r2, [r3, #0]
 8003b06:	e060      	b.n	8003bca <UART_SetConfig+0x17a>
 8003b08:	231f      	movs	r3, #31
 8003b0a:	18fb      	adds	r3, r7, r3
 8003b0c:	2204      	movs	r2, #4
 8003b0e:	701a      	strb	r2, [r3, #0]
 8003b10:	e05b      	b.n	8003bca <UART_SetConfig+0x17a>
 8003b12:	231f      	movs	r3, #31
 8003b14:	18fb      	adds	r3, r7, r3
 8003b16:	2208      	movs	r2, #8
 8003b18:	701a      	strb	r2, [r3, #0]
 8003b1a:	e056      	b.n	8003bca <UART_SetConfig+0x17a>
 8003b1c:	231f      	movs	r3, #31
 8003b1e:	18fb      	adds	r3, r7, r3
 8003b20:	2210      	movs	r2, #16
 8003b22:	701a      	strb	r2, [r3, #0]
 8003b24:	e051      	b.n	8003bca <UART_SetConfig+0x17a>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a89      	ldr	r2, [pc, #548]	@ (8003d50 <UART_SetConfig+0x300>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d134      	bne.n	8003b9a <UART_SetConfig+0x14a>
 8003b30:	4b86      	ldr	r3, [pc, #536]	@ (8003d4c <UART_SetConfig+0x2fc>)
 8003b32:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003b34:	23c0      	movs	r3, #192	@ 0xc0
 8003b36:	029b      	lsls	r3, r3, #10
 8003b38:	4013      	ands	r3, r2
 8003b3a:	22c0      	movs	r2, #192	@ 0xc0
 8003b3c:	0292      	lsls	r2, r2, #10
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d017      	beq.n	8003b72 <UART_SetConfig+0x122>
 8003b42:	22c0      	movs	r2, #192	@ 0xc0
 8003b44:	0292      	lsls	r2, r2, #10
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d822      	bhi.n	8003b90 <UART_SetConfig+0x140>
 8003b4a:	2280      	movs	r2, #128	@ 0x80
 8003b4c:	0292      	lsls	r2, r2, #10
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d019      	beq.n	8003b86 <UART_SetConfig+0x136>
 8003b52:	2280      	movs	r2, #128	@ 0x80
 8003b54:	0292      	lsls	r2, r2, #10
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d81a      	bhi.n	8003b90 <UART_SetConfig+0x140>
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d004      	beq.n	8003b68 <UART_SetConfig+0x118>
 8003b5e:	2280      	movs	r2, #128	@ 0x80
 8003b60:	0252      	lsls	r2, r2, #9
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d00a      	beq.n	8003b7c <UART_SetConfig+0x12c>
 8003b66:	e013      	b.n	8003b90 <UART_SetConfig+0x140>
 8003b68:	231f      	movs	r3, #31
 8003b6a:	18fb      	adds	r3, r7, r3
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	701a      	strb	r2, [r3, #0]
 8003b70:	e02b      	b.n	8003bca <UART_SetConfig+0x17a>
 8003b72:	231f      	movs	r3, #31
 8003b74:	18fb      	adds	r3, r7, r3
 8003b76:	2202      	movs	r2, #2
 8003b78:	701a      	strb	r2, [r3, #0]
 8003b7a:	e026      	b.n	8003bca <UART_SetConfig+0x17a>
 8003b7c:	231f      	movs	r3, #31
 8003b7e:	18fb      	adds	r3, r7, r3
 8003b80:	2204      	movs	r2, #4
 8003b82:	701a      	strb	r2, [r3, #0]
 8003b84:	e021      	b.n	8003bca <UART_SetConfig+0x17a>
 8003b86:	231f      	movs	r3, #31
 8003b88:	18fb      	adds	r3, r7, r3
 8003b8a:	2208      	movs	r2, #8
 8003b8c:	701a      	strb	r2, [r3, #0]
 8003b8e:	e01c      	b.n	8003bca <UART_SetConfig+0x17a>
 8003b90:	231f      	movs	r3, #31
 8003b92:	18fb      	adds	r3, r7, r3
 8003b94:	2210      	movs	r2, #16
 8003b96:	701a      	strb	r2, [r3, #0]
 8003b98:	e017      	b.n	8003bca <UART_SetConfig+0x17a>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a6d      	ldr	r2, [pc, #436]	@ (8003d54 <UART_SetConfig+0x304>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d104      	bne.n	8003bae <UART_SetConfig+0x15e>
 8003ba4:	231f      	movs	r3, #31
 8003ba6:	18fb      	adds	r3, r7, r3
 8003ba8:	2200      	movs	r2, #0
 8003baa:	701a      	strb	r2, [r3, #0]
 8003bac:	e00d      	b.n	8003bca <UART_SetConfig+0x17a>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a69      	ldr	r2, [pc, #420]	@ (8003d58 <UART_SetConfig+0x308>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d104      	bne.n	8003bc2 <UART_SetConfig+0x172>
 8003bb8:	231f      	movs	r3, #31
 8003bba:	18fb      	adds	r3, r7, r3
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	701a      	strb	r2, [r3, #0]
 8003bc0:	e003      	b.n	8003bca <UART_SetConfig+0x17a>
 8003bc2:	231f      	movs	r3, #31
 8003bc4:	18fb      	adds	r3, r7, r3
 8003bc6:	2210      	movs	r2, #16
 8003bc8:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	69da      	ldr	r2, [r3, #28]
 8003bce:	2380      	movs	r3, #128	@ 0x80
 8003bd0:	021b      	lsls	r3, r3, #8
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d15c      	bne.n	8003c90 <UART_SetConfig+0x240>
  {
    switch (clocksource)
 8003bd6:	231f      	movs	r3, #31
 8003bd8:	18fb      	adds	r3, r7, r3
 8003bda:	781b      	ldrb	r3, [r3, #0]
 8003bdc:	2b08      	cmp	r3, #8
 8003bde:	d015      	beq.n	8003c0c <UART_SetConfig+0x1bc>
 8003be0:	dc18      	bgt.n	8003c14 <UART_SetConfig+0x1c4>
 8003be2:	2b04      	cmp	r3, #4
 8003be4:	d00d      	beq.n	8003c02 <UART_SetConfig+0x1b2>
 8003be6:	dc15      	bgt.n	8003c14 <UART_SetConfig+0x1c4>
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d002      	beq.n	8003bf2 <UART_SetConfig+0x1a2>
 8003bec:	2b02      	cmp	r3, #2
 8003bee:	d005      	beq.n	8003bfc <UART_SetConfig+0x1ac>
 8003bf0:	e010      	b.n	8003c14 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bf2:	f7fe fa6f 	bl	80020d4 <HAL_RCC_GetPCLK1Freq>
 8003bf6:	0003      	movs	r3, r0
 8003bf8:	61bb      	str	r3, [r7, #24]
        break;
 8003bfa:	e012      	b.n	8003c22 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003bfc:	4b57      	ldr	r3, [pc, #348]	@ (8003d5c <UART_SetConfig+0x30c>)
 8003bfe:	61bb      	str	r3, [r7, #24]
        break;
 8003c00:	e00f      	b.n	8003c22 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c02:	f7fe f9eb 	bl	8001fdc <HAL_RCC_GetSysClockFreq>
 8003c06:	0003      	movs	r3, r0
 8003c08:	61bb      	str	r3, [r7, #24]
        break;
 8003c0a:	e00a      	b.n	8003c22 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c0c:	2380      	movs	r3, #128	@ 0x80
 8003c0e:	021b      	lsls	r3, r3, #8
 8003c10:	61bb      	str	r3, [r7, #24]
        break;
 8003c12:	e006      	b.n	8003c22 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8003c14:	2300      	movs	r3, #0
 8003c16:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003c18:	231e      	movs	r3, #30
 8003c1a:	18fb      	adds	r3, r7, r3
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	701a      	strb	r2, [r3, #0]
        break;
 8003c20:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003c22:	69bb      	ldr	r3, [r7, #24]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d100      	bne.n	8003c2a <UART_SetConfig+0x1da>
 8003c28:	e07a      	b.n	8003d20 <UART_SetConfig+0x2d0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003c2a:	69bb      	ldr	r3, [r7, #24]
 8003c2c:	005a      	lsls	r2, r3, #1
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	085b      	lsrs	r3, r3, #1
 8003c34:	18d2      	adds	r2, r2, r3
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	0019      	movs	r1, r3
 8003c3c:	0010      	movs	r0, r2
 8003c3e:	f7fc fa63 	bl	8000108 <__udivsi3>
 8003c42:	0003      	movs	r3, r0
 8003c44:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	2b0f      	cmp	r3, #15
 8003c4a:	d91c      	bls.n	8003c86 <UART_SetConfig+0x236>
 8003c4c:	693a      	ldr	r2, [r7, #16]
 8003c4e:	2380      	movs	r3, #128	@ 0x80
 8003c50:	025b      	lsls	r3, r3, #9
 8003c52:	429a      	cmp	r2, r3
 8003c54:	d217      	bcs.n	8003c86 <UART_SetConfig+0x236>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	b29a      	uxth	r2, r3
 8003c5a:	200e      	movs	r0, #14
 8003c5c:	183b      	adds	r3, r7, r0
 8003c5e:	210f      	movs	r1, #15
 8003c60:	438a      	bics	r2, r1
 8003c62:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	085b      	lsrs	r3, r3, #1
 8003c68:	b29b      	uxth	r3, r3
 8003c6a:	2207      	movs	r2, #7
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	b299      	uxth	r1, r3
 8003c70:	183b      	adds	r3, r7, r0
 8003c72:	183a      	adds	r2, r7, r0
 8003c74:	8812      	ldrh	r2, [r2, #0]
 8003c76:	430a      	orrs	r2, r1
 8003c78:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	183a      	adds	r2, r7, r0
 8003c80:	8812      	ldrh	r2, [r2, #0]
 8003c82:	60da      	str	r2, [r3, #12]
 8003c84:	e04c      	b.n	8003d20 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 8003c86:	231e      	movs	r3, #30
 8003c88:	18fb      	adds	r3, r7, r3
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	701a      	strb	r2, [r3, #0]
 8003c8e:	e047      	b.n	8003d20 <UART_SetConfig+0x2d0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003c90:	231f      	movs	r3, #31
 8003c92:	18fb      	adds	r3, r7, r3
 8003c94:	781b      	ldrb	r3, [r3, #0]
 8003c96:	2b08      	cmp	r3, #8
 8003c98:	d015      	beq.n	8003cc6 <UART_SetConfig+0x276>
 8003c9a:	dc18      	bgt.n	8003cce <UART_SetConfig+0x27e>
 8003c9c:	2b04      	cmp	r3, #4
 8003c9e:	d00d      	beq.n	8003cbc <UART_SetConfig+0x26c>
 8003ca0:	dc15      	bgt.n	8003cce <UART_SetConfig+0x27e>
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d002      	beq.n	8003cac <UART_SetConfig+0x25c>
 8003ca6:	2b02      	cmp	r3, #2
 8003ca8:	d005      	beq.n	8003cb6 <UART_SetConfig+0x266>
 8003caa:	e010      	b.n	8003cce <UART_SetConfig+0x27e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003cac:	f7fe fa12 	bl	80020d4 <HAL_RCC_GetPCLK1Freq>
 8003cb0:	0003      	movs	r3, r0
 8003cb2:	61bb      	str	r3, [r7, #24]
        break;
 8003cb4:	e012      	b.n	8003cdc <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003cb6:	4b29      	ldr	r3, [pc, #164]	@ (8003d5c <UART_SetConfig+0x30c>)
 8003cb8:	61bb      	str	r3, [r7, #24]
        break;
 8003cba:	e00f      	b.n	8003cdc <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003cbc:	f7fe f98e 	bl	8001fdc <HAL_RCC_GetSysClockFreq>
 8003cc0:	0003      	movs	r3, r0
 8003cc2:	61bb      	str	r3, [r7, #24]
        break;
 8003cc4:	e00a      	b.n	8003cdc <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003cc6:	2380      	movs	r3, #128	@ 0x80
 8003cc8:	021b      	lsls	r3, r3, #8
 8003cca:	61bb      	str	r3, [r7, #24]
        break;
 8003ccc:	e006      	b.n	8003cdc <UART_SetConfig+0x28c>
      default:
        pclk = 0U;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003cd2:	231e      	movs	r3, #30
 8003cd4:	18fb      	adds	r3, r7, r3
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	701a      	strb	r2, [r3, #0]
        break;
 8003cda:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8003cdc:	69bb      	ldr	r3, [r7, #24]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d01e      	beq.n	8003d20 <UART_SetConfig+0x2d0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	085a      	lsrs	r2, r3, #1
 8003ce8:	69bb      	ldr	r3, [r7, #24]
 8003cea:	18d2      	adds	r2, r2, r3
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	0019      	movs	r1, r3
 8003cf2:	0010      	movs	r0, r2
 8003cf4:	f7fc fa08 	bl	8000108 <__udivsi3>
 8003cf8:	0003      	movs	r3, r0
 8003cfa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	2b0f      	cmp	r3, #15
 8003d00:	d90a      	bls.n	8003d18 <UART_SetConfig+0x2c8>
 8003d02:	693a      	ldr	r2, [r7, #16]
 8003d04:	2380      	movs	r3, #128	@ 0x80
 8003d06:	025b      	lsls	r3, r3, #9
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d205      	bcs.n	8003d18 <UART_SetConfig+0x2c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	b29a      	uxth	r2, r3
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	60da      	str	r2, [r3, #12]
 8003d16:	e003      	b.n	8003d20 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 8003d18:	231e      	movs	r3, #30
 8003d1a:	18fb      	adds	r3, r7, r3
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2200      	movs	r2, #0
 8003d24:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003d2c:	231e      	movs	r3, #30
 8003d2e:	18fb      	adds	r3, r7, r3
 8003d30:	781b      	ldrb	r3, [r3, #0]
}
 8003d32:	0018      	movs	r0, r3
 8003d34:	46bd      	mov	sp, r7
 8003d36:	b008      	add	sp, #32
 8003d38:	bd80      	pop	{r7, pc}
 8003d3a:	46c0      	nop			@ (mov r8, r8)
 8003d3c:	efff69f3 	.word	0xefff69f3
 8003d40:	ffffcfff 	.word	0xffffcfff
 8003d44:	fffff4ff 	.word	0xfffff4ff
 8003d48:	40013800 	.word	0x40013800
 8003d4c:	40021000 	.word	0x40021000
 8003d50:	40004400 	.word	0x40004400
 8003d54:	40004800 	.word	0x40004800
 8003d58:	40004c00 	.word	0x40004c00
 8003d5c:	007a1200 	.word	0x007a1200

08003d60 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b082      	sub	sp, #8
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d6c:	2208      	movs	r2, #8
 8003d6e:	4013      	ands	r3, r2
 8003d70:	d00b      	beq.n	8003d8a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	4a4a      	ldr	r2, [pc, #296]	@ (8003ea4 <UART_AdvFeatureConfig+0x144>)
 8003d7a:	4013      	ands	r3, r2
 8003d7c:	0019      	movs	r1, r3
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	430a      	orrs	r2, r1
 8003d88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d8e:	2201      	movs	r2, #1
 8003d90:	4013      	ands	r3, r2
 8003d92:	d00b      	beq.n	8003dac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	4a43      	ldr	r2, [pc, #268]	@ (8003ea8 <UART_AdvFeatureConfig+0x148>)
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	0019      	movs	r1, r3
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	430a      	orrs	r2, r1
 8003daa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003db0:	2202      	movs	r2, #2
 8003db2:	4013      	ands	r3, r2
 8003db4:	d00b      	beq.n	8003dce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	4a3b      	ldr	r2, [pc, #236]	@ (8003eac <UART_AdvFeatureConfig+0x14c>)
 8003dbe:	4013      	ands	r3, r2
 8003dc0:	0019      	movs	r1, r3
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	430a      	orrs	r2, r1
 8003dcc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dd2:	2204      	movs	r2, #4
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	d00b      	beq.n	8003df0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	4a34      	ldr	r2, [pc, #208]	@ (8003eb0 <UART_AdvFeatureConfig+0x150>)
 8003de0:	4013      	ands	r3, r2
 8003de2:	0019      	movs	r1, r3
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	430a      	orrs	r2, r1
 8003dee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003df4:	2210      	movs	r2, #16
 8003df6:	4013      	ands	r3, r2
 8003df8:	d00b      	beq.n	8003e12 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	4a2c      	ldr	r2, [pc, #176]	@ (8003eb4 <UART_AdvFeatureConfig+0x154>)
 8003e02:	4013      	ands	r3, r2
 8003e04:	0019      	movs	r1, r3
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	430a      	orrs	r2, r1
 8003e10:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e16:	2220      	movs	r2, #32
 8003e18:	4013      	ands	r3, r2
 8003e1a:	d00b      	beq.n	8003e34 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	4a25      	ldr	r2, [pc, #148]	@ (8003eb8 <UART_AdvFeatureConfig+0x158>)
 8003e24:	4013      	ands	r3, r2
 8003e26:	0019      	movs	r1, r3
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	430a      	orrs	r2, r1
 8003e32:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e38:	2240      	movs	r2, #64	@ 0x40
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	d01d      	beq.n	8003e7a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	4a1d      	ldr	r2, [pc, #116]	@ (8003ebc <UART_AdvFeatureConfig+0x15c>)
 8003e46:	4013      	ands	r3, r2
 8003e48:	0019      	movs	r1, r3
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	430a      	orrs	r2, r1
 8003e54:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003e5a:	2380      	movs	r3, #128	@ 0x80
 8003e5c:	035b      	lsls	r3, r3, #13
 8003e5e:	429a      	cmp	r2, r3
 8003e60:	d10b      	bne.n	8003e7a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	4a15      	ldr	r2, [pc, #84]	@ (8003ec0 <UART_AdvFeatureConfig+0x160>)
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	0019      	movs	r1, r3
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	430a      	orrs	r2, r1
 8003e78:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e7e:	2280      	movs	r2, #128	@ 0x80
 8003e80:	4013      	ands	r3, r2
 8003e82:	d00b      	beq.n	8003e9c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	4a0e      	ldr	r2, [pc, #56]	@ (8003ec4 <UART_AdvFeatureConfig+0x164>)
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	0019      	movs	r1, r3
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	430a      	orrs	r2, r1
 8003e9a:	605a      	str	r2, [r3, #4]
  }
}
 8003e9c:	46c0      	nop			@ (mov r8, r8)
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	b002      	add	sp, #8
 8003ea2:	bd80      	pop	{r7, pc}
 8003ea4:	ffff7fff 	.word	0xffff7fff
 8003ea8:	fffdffff 	.word	0xfffdffff
 8003eac:	fffeffff 	.word	0xfffeffff
 8003eb0:	fffbffff 	.word	0xfffbffff
 8003eb4:	ffffefff 	.word	0xffffefff
 8003eb8:	ffffdfff 	.word	0xffffdfff
 8003ebc:	ffefffff 	.word	0xffefffff
 8003ec0:	ff9fffff 	.word	0xff9fffff
 8003ec4:	fff7ffff 	.word	0xfff7ffff

08003ec8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b092      	sub	sp, #72	@ 0x48
 8003ecc:	af02      	add	r7, sp, #8
 8003ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2284      	movs	r2, #132	@ 0x84
 8003ed4:	2100      	movs	r1, #0
 8003ed6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003ed8:	f7fc ff38 	bl	8000d4c <HAL_GetTick>
 8003edc:	0003      	movs	r3, r0
 8003ede:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	2208      	movs	r2, #8
 8003ee8:	4013      	ands	r3, r2
 8003eea:	2b08      	cmp	r3, #8
 8003eec:	d12c      	bne.n	8003f48 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003eee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ef0:	2280      	movs	r2, #128	@ 0x80
 8003ef2:	0391      	lsls	r1, r2, #14
 8003ef4:	6878      	ldr	r0, [r7, #4]
 8003ef6:	4a46      	ldr	r2, [pc, #280]	@ (8004010 <UART_CheckIdleState+0x148>)
 8003ef8:	9200      	str	r2, [sp, #0]
 8003efa:	2200      	movs	r2, #0
 8003efc:	f000 f88c 	bl	8004018 <UART_WaitOnFlagUntilTimeout>
 8003f00:	1e03      	subs	r3, r0, #0
 8003f02:	d021      	beq.n	8003f48 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f04:	f3ef 8310 	mrs	r3, PRIMASK
 8003f08:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003f0c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003f0e:	2301      	movs	r3, #1
 8003f10:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f14:	f383 8810 	msr	PRIMASK, r3
}
 8003f18:	46c0      	nop			@ (mov r8, r8)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	2180      	movs	r1, #128	@ 0x80
 8003f26:	438a      	bics	r2, r1
 8003f28:	601a      	str	r2, [r3, #0]
 8003f2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f30:	f383 8810 	msr	PRIMASK, r3
}
 8003f34:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2220      	movs	r2, #32
 8003f3a:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2278      	movs	r2, #120	@ 0x78
 8003f40:	2100      	movs	r1, #0
 8003f42:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f44:	2303      	movs	r3, #3
 8003f46:	e05f      	b.n	8004008 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	2204      	movs	r2, #4
 8003f50:	4013      	ands	r3, r2
 8003f52:	2b04      	cmp	r3, #4
 8003f54:	d146      	bne.n	8003fe4 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f58:	2280      	movs	r2, #128	@ 0x80
 8003f5a:	03d1      	lsls	r1, r2, #15
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	4a2c      	ldr	r2, [pc, #176]	@ (8004010 <UART_CheckIdleState+0x148>)
 8003f60:	9200      	str	r2, [sp, #0]
 8003f62:	2200      	movs	r2, #0
 8003f64:	f000 f858 	bl	8004018 <UART_WaitOnFlagUntilTimeout>
 8003f68:	1e03      	subs	r3, r0, #0
 8003f6a:	d03b      	beq.n	8003fe4 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f6c:	f3ef 8310 	mrs	r3, PRIMASK
 8003f70:	60fb      	str	r3, [r7, #12]
  return(result);
 8003f72:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f74:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f76:	2301      	movs	r3, #1
 8003f78:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	f383 8810 	msr	PRIMASK, r3
}
 8003f80:	46c0      	nop			@ (mov r8, r8)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4921      	ldr	r1, [pc, #132]	@ (8004014 <UART_CheckIdleState+0x14c>)
 8003f8e:	400a      	ands	r2, r1
 8003f90:	601a      	str	r2, [r3, #0]
 8003f92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f94:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	f383 8810 	msr	PRIMASK, r3
}
 8003f9c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f9e:	f3ef 8310 	mrs	r3, PRIMASK
 8003fa2:	61bb      	str	r3, [r7, #24]
  return(result);
 8003fa4:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fa6:	633b      	str	r3, [r7, #48]	@ 0x30
 8003fa8:	2301      	movs	r3, #1
 8003faa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fac:	69fb      	ldr	r3, [r7, #28]
 8003fae:	f383 8810 	msr	PRIMASK, r3
}
 8003fb2:	46c0      	nop			@ (mov r8, r8)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	689a      	ldr	r2, [r3, #8]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	2101      	movs	r1, #1
 8003fc0:	438a      	bics	r2, r1
 8003fc2:	609a      	str	r2, [r3, #8]
 8003fc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fc6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fc8:	6a3b      	ldr	r3, [r7, #32]
 8003fca:	f383 8810 	msr	PRIMASK, r3
}
 8003fce:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2280      	movs	r2, #128	@ 0x80
 8003fd4:	2120      	movs	r1, #32
 8003fd6:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2278      	movs	r2, #120	@ 0x78
 8003fdc:	2100      	movs	r1, #0
 8003fde:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003fe0:	2303      	movs	r3, #3
 8003fe2:	e011      	b.n	8004008 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2220      	movs	r2, #32
 8003fe8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2280      	movs	r2, #128	@ 0x80
 8003fee:	2120      	movs	r1, #32
 8003ff0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2278      	movs	r2, #120	@ 0x78
 8004002:	2100      	movs	r1, #0
 8004004:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004006:	2300      	movs	r3, #0
}
 8004008:	0018      	movs	r0, r3
 800400a:	46bd      	mov	sp, r7
 800400c:	b010      	add	sp, #64	@ 0x40
 800400e:	bd80      	pop	{r7, pc}
 8004010:	01ffffff 	.word	0x01ffffff
 8004014:	fffffedf 	.word	0xfffffedf

08004018 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b084      	sub	sp, #16
 800401c:	af00      	add	r7, sp, #0
 800401e:	60f8      	str	r0, [r7, #12]
 8004020:	60b9      	str	r1, [r7, #8]
 8004022:	603b      	str	r3, [r7, #0]
 8004024:	1dfb      	adds	r3, r7, #7
 8004026:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004028:	e051      	b.n	80040ce <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800402a:	69bb      	ldr	r3, [r7, #24]
 800402c:	3301      	adds	r3, #1
 800402e:	d04e      	beq.n	80040ce <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004030:	f7fc fe8c 	bl	8000d4c <HAL_GetTick>
 8004034:	0002      	movs	r2, r0
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	1ad3      	subs	r3, r2, r3
 800403a:	69ba      	ldr	r2, [r7, #24]
 800403c:	429a      	cmp	r2, r3
 800403e:	d302      	bcc.n	8004046 <UART_WaitOnFlagUntilTimeout+0x2e>
 8004040:	69bb      	ldr	r3, [r7, #24]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d101      	bne.n	800404a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004046:	2303      	movs	r3, #3
 8004048:	e051      	b.n	80040ee <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	2204      	movs	r2, #4
 8004052:	4013      	ands	r3, r2
 8004054:	d03b      	beq.n	80040ce <UART_WaitOnFlagUntilTimeout+0xb6>
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	2b80      	cmp	r3, #128	@ 0x80
 800405a:	d038      	beq.n	80040ce <UART_WaitOnFlagUntilTimeout+0xb6>
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	2b40      	cmp	r3, #64	@ 0x40
 8004060:	d035      	beq.n	80040ce <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	69db      	ldr	r3, [r3, #28]
 8004068:	2208      	movs	r2, #8
 800406a:	4013      	ands	r3, r2
 800406c:	2b08      	cmp	r3, #8
 800406e:	d111      	bne.n	8004094 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	2208      	movs	r2, #8
 8004076:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	0018      	movs	r0, r3
 800407c:	f000 f900 	bl	8004280 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2284      	movs	r2, #132	@ 0x84
 8004084:	2108      	movs	r1, #8
 8004086:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2278      	movs	r2, #120	@ 0x78
 800408c:	2100      	movs	r1, #0
 800408e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	e02c      	b.n	80040ee <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	69da      	ldr	r2, [r3, #28]
 800409a:	2380      	movs	r3, #128	@ 0x80
 800409c:	011b      	lsls	r3, r3, #4
 800409e:	401a      	ands	r2, r3
 80040a0:	2380      	movs	r3, #128	@ 0x80
 80040a2:	011b      	lsls	r3, r3, #4
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d112      	bne.n	80040ce <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	2280      	movs	r2, #128	@ 0x80
 80040ae:	0112      	lsls	r2, r2, #4
 80040b0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	0018      	movs	r0, r3
 80040b6:	f000 f8e3 	bl	8004280 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2284      	movs	r2, #132	@ 0x84
 80040be:	2120      	movs	r1, #32
 80040c0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2278      	movs	r2, #120	@ 0x78
 80040c6:	2100      	movs	r1, #0
 80040c8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80040ca:	2303      	movs	r3, #3
 80040cc:	e00f      	b.n	80040ee <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	69db      	ldr	r3, [r3, #28]
 80040d4:	68ba      	ldr	r2, [r7, #8]
 80040d6:	4013      	ands	r3, r2
 80040d8:	68ba      	ldr	r2, [r7, #8]
 80040da:	1ad3      	subs	r3, r2, r3
 80040dc:	425a      	negs	r2, r3
 80040de:	4153      	adcs	r3, r2
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	001a      	movs	r2, r3
 80040e4:	1dfb      	adds	r3, r7, #7
 80040e6:	781b      	ldrb	r3, [r3, #0]
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d09e      	beq.n	800402a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80040ec:	2300      	movs	r3, #0
}
 80040ee:	0018      	movs	r0, r3
 80040f0:	46bd      	mov	sp, r7
 80040f2:	b004      	add	sp, #16
 80040f4:	bd80      	pop	{r7, pc}
	...

080040f8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b090      	sub	sp, #64	@ 0x40
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	60f8      	str	r0, [r7, #12]
 8004100:	60b9      	str	r1, [r7, #8]
 8004102:	1dbb      	adds	r3, r7, #6
 8004104:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	68ba      	ldr	r2, [r7, #8]
 800410a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	1dba      	adds	r2, r7, #6
 8004110:	2158      	movs	r1, #88	@ 0x58
 8004112:	8812      	ldrh	r2, [r2, #0]
 8004114:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2284      	movs	r2, #132	@ 0x84
 800411a:	2100      	movs	r1, #0
 800411c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2280      	movs	r2, #128	@ 0x80
 8004122:	2122      	movs	r1, #34	@ 0x22
 8004124:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800412a:	2b00      	cmp	r3, #0
 800412c:	d028      	beq.n	8004180 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004132:	4a3e      	ldr	r2, [pc, #248]	@ (800422c <UART_Start_Receive_DMA+0x134>)
 8004134:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800413a:	4a3d      	ldr	r2, [pc, #244]	@ (8004230 <UART_Start_Receive_DMA+0x138>)
 800413c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004142:	4a3c      	ldr	r2, [pc, #240]	@ (8004234 <UART_Start_Receive_DMA+0x13c>)
 8004144:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800414a:	2200      	movs	r2, #0
 800414c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	3324      	adds	r3, #36	@ 0x24
 8004158:	0019      	movs	r1, r3
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800415e:	001a      	movs	r2, r3
 8004160:	1dbb      	adds	r3, r7, #6
 8004162:	881b      	ldrh	r3, [r3, #0]
 8004164:	f7fc ff46 	bl	8000ff4 <HAL_DMA_Start_IT>
 8004168:	1e03      	subs	r3, r0, #0
 800416a:	d009      	beq.n	8004180 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2284      	movs	r2, #132	@ 0x84
 8004170:	2110      	movs	r1, #16
 8004172:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2280      	movs	r2, #128	@ 0x80
 8004178:	2120      	movs	r1, #32
 800417a:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	e050      	b.n	8004222 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	691b      	ldr	r3, [r3, #16]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d019      	beq.n	80041bc <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004188:	f3ef 8310 	mrs	r3, PRIMASK
 800418c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 800418e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004190:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004192:	2301      	movs	r3, #1
 8004194:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004196:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004198:	f383 8810 	msr	PRIMASK, r3
}
 800419c:	46c0      	nop			@ (mov r8, r8)
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	2180      	movs	r1, #128	@ 0x80
 80041aa:	0049      	lsls	r1, r1, #1
 80041ac:	430a      	orrs	r2, r1
 80041ae:	601a      	str	r2, [r3, #0]
 80041b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041b2:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041b6:	f383 8810 	msr	PRIMASK, r3
}
 80041ba:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041bc:	f3ef 8310 	mrs	r3, PRIMASK
 80041c0:	613b      	str	r3, [r7, #16]
  return(result);
 80041c2:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041c4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80041c6:	2301      	movs	r3, #1
 80041c8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	f383 8810 	msr	PRIMASK, r3
}
 80041d0:	46c0      	nop			@ (mov r8, r8)
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	689a      	ldr	r2, [r3, #8]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	2101      	movs	r1, #1
 80041de:	430a      	orrs	r2, r1
 80041e0:	609a      	str	r2, [r3, #8]
 80041e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041e4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041e6:	69bb      	ldr	r3, [r7, #24]
 80041e8:	f383 8810 	msr	PRIMASK, r3
}
 80041ec:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041ee:	f3ef 8310 	mrs	r3, PRIMASK
 80041f2:	61fb      	str	r3, [r7, #28]
  return(result);
 80041f4:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80041f8:	2301      	movs	r3, #1
 80041fa:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041fc:	6a3b      	ldr	r3, [r7, #32]
 80041fe:	f383 8810 	msr	PRIMASK, r3
}
 8004202:	46c0      	nop			@ (mov r8, r8)
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	689a      	ldr	r2, [r3, #8]
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	2140      	movs	r1, #64	@ 0x40
 8004210:	430a      	orrs	r2, r1
 8004212:	609a      	str	r2, [r3, #8]
 8004214:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004216:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800421a:	f383 8810 	msr	PRIMASK, r3
}
 800421e:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 8004220:	2300      	movs	r3, #0
}
 8004222:	0018      	movs	r0, r3
 8004224:	46bd      	mov	sp, r7
 8004226:	b010      	add	sp, #64	@ 0x40
 8004228:	bd80      	pop	{r7, pc}
 800422a:	46c0      	nop			@ (mov r8, r8)
 800422c:	080043fd 	.word	0x080043fd
 8004230:	08004529 	.word	0x08004529
 8004234:	0800456b 	.word	0x0800456b

08004238 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b086      	sub	sp, #24
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004240:	f3ef 8310 	mrs	r3, PRIMASK
 8004244:	60bb      	str	r3, [r7, #8]
  return(result);
 8004246:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004248:	617b      	str	r3, [r7, #20]
 800424a:	2301      	movs	r3, #1
 800424c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	f383 8810 	msr	PRIMASK, r3
}
 8004254:	46c0      	nop			@ (mov r8, r8)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	21c0      	movs	r1, #192	@ 0xc0
 8004262:	438a      	bics	r2, r1
 8004264:	601a      	str	r2, [r3, #0]
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	f383 8810 	msr	PRIMASK, r3
}
 8004270:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2220      	movs	r2, #32
 8004276:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8004278:	46c0      	nop			@ (mov r8, r8)
 800427a:	46bd      	mov	sp, r7
 800427c:	b006      	add	sp, #24
 800427e:	bd80      	pop	{r7, pc}

08004280 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b08e      	sub	sp, #56	@ 0x38
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004288:	f3ef 8310 	mrs	r3, PRIMASK
 800428c:	617b      	str	r3, [r7, #20]
  return(result);
 800428e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004290:	637b      	str	r3, [r7, #52]	@ 0x34
 8004292:	2301      	movs	r3, #1
 8004294:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004296:	69bb      	ldr	r3, [r7, #24]
 8004298:	f383 8810 	msr	PRIMASK, r3
}
 800429c:	46c0      	nop			@ (mov r8, r8)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4926      	ldr	r1, [pc, #152]	@ (8004344 <UART_EndRxTransfer+0xc4>)
 80042aa:	400a      	ands	r2, r1
 80042ac:	601a      	str	r2, [r3, #0]
 80042ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042b0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042b2:	69fb      	ldr	r3, [r7, #28]
 80042b4:	f383 8810 	msr	PRIMASK, r3
}
 80042b8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042ba:	f3ef 8310 	mrs	r3, PRIMASK
 80042be:	623b      	str	r3, [r7, #32]
  return(result);
 80042c0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042c2:	633b      	str	r3, [r7, #48]	@ 0x30
 80042c4:	2301      	movs	r3, #1
 80042c6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042ca:	f383 8810 	msr	PRIMASK, r3
}
 80042ce:	46c0      	nop			@ (mov r8, r8)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	689a      	ldr	r2, [r3, #8]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	2101      	movs	r1, #1
 80042dc:	438a      	bics	r2, r1
 80042de:	609a      	str	r2, [r3, #8]
 80042e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042e6:	f383 8810 	msr	PRIMASK, r3
}
 80042ea:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d118      	bne.n	8004326 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042f4:	f3ef 8310 	mrs	r3, PRIMASK
 80042f8:	60bb      	str	r3, [r7, #8]
  return(result);
 80042fa:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80042fe:	2301      	movs	r3, #1
 8004300:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	f383 8810 	msr	PRIMASK, r3
}
 8004308:	46c0      	nop			@ (mov r8, r8)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	681a      	ldr	r2, [r3, #0]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	2110      	movs	r1, #16
 8004316:	438a      	bics	r2, r1
 8004318:	601a      	str	r2, [r3, #0]
 800431a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800431c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	f383 8810 	msr	PRIMASK, r3
}
 8004324:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2280      	movs	r2, #128	@ 0x80
 800432a:	2120      	movs	r1, #32
 800432c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2200      	movs	r2, #0
 8004332:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2200      	movs	r2, #0
 8004338:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800433a:	46c0      	nop			@ (mov r8, r8)
 800433c:	46bd      	mov	sp, r7
 800433e:	b00e      	add	sp, #56	@ 0x38
 8004340:	bd80      	pop	{r7, pc}
 8004342:	46c0      	nop			@ (mov r8, r8)
 8004344:	fffffedf 	.word	0xfffffedf

08004348 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b08c      	sub	sp, #48	@ 0x30
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004354:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	699b      	ldr	r3, [r3, #24]
 800435a:	2b20      	cmp	r3, #32
 800435c:	d035      	beq.n	80043ca <UART_DMATransmitCplt+0x82>
  {
    huart->TxXferCount = 0U;
 800435e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004360:	2252      	movs	r2, #82	@ 0x52
 8004362:	2100      	movs	r1, #0
 8004364:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004366:	f3ef 8310 	mrs	r3, PRIMASK
 800436a:	60fb      	str	r3, [r7, #12]
  return(result);
 800436c:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800436e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004370:	2301      	movs	r3, #1
 8004372:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	f383 8810 	msr	PRIMASK, r3
}
 800437a:	46c0      	nop			@ (mov r8, r8)
 800437c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	689a      	ldr	r2, [r3, #8]
 8004382:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	2180      	movs	r1, #128	@ 0x80
 8004388:	438a      	bics	r2, r1
 800438a:	609a      	str	r2, [r3, #8]
 800438c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800438e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	f383 8810 	msr	PRIMASK, r3
}
 8004396:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004398:	f3ef 8310 	mrs	r3, PRIMASK
 800439c:	61bb      	str	r3, [r7, #24]
  return(result);
 800439e:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80043a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80043a2:	2301      	movs	r3, #1
 80043a4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043a6:	69fb      	ldr	r3, [r7, #28]
 80043a8:	f383 8810 	msr	PRIMASK, r3
}
 80043ac:	46c0      	nop			@ (mov r8, r8)
 80043ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	2140      	movs	r1, #64	@ 0x40
 80043ba:	430a      	orrs	r2, r1
 80043bc:	601a      	str	r2, [r3, #0]
 80043be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043c0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043c2:	6a3b      	ldr	r3, [r7, #32]
 80043c4:	f383 8810 	msr	PRIMASK, r3
}
 80043c8:	e004      	b.n	80043d4 <UART_DMATransmitCplt+0x8c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
 80043ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043cc:	0018      	movs	r0, r3
 80043ce:	f7fc fa39 	bl	8000844 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80043d2:	46c0      	nop			@ (mov r8, r8)
 80043d4:	46c0      	nop			@ (mov r8, r8)
 80043d6:	46bd      	mov	sp, r7
 80043d8:	b00c      	add	sp, #48	@ 0x30
 80043da:	bd80      	pop	{r7, pc}

080043dc <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b084      	sub	sp, #16
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043e8:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	0018      	movs	r0, r3
 80043ee:	f7fc fa57 	bl	80008a0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80043f2:	46c0      	nop			@ (mov r8, r8)
 80043f4:	46bd      	mov	sp, r7
 80043f6:	b004      	add	sp, #16
 80043f8:	bd80      	pop	{r7, pc}
	...

080043fc <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b094      	sub	sp, #80	@ 0x50
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004408:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	699b      	ldr	r3, [r3, #24]
 800440e:	2b20      	cmp	r3, #32
 8004410:	d06f      	beq.n	80044f2 <UART_DMAReceiveCplt+0xf6>
  {
    huart->RxXferCount = 0U;
 8004412:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004414:	225a      	movs	r2, #90	@ 0x5a
 8004416:	2100      	movs	r1, #0
 8004418:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800441a:	f3ef 8310 	mrs	r3, PRIMASK
 800441e:	61bb      	str	r3, [r7, #24]
  return(result);
 8004420:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004422:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004424:	2301      	movs	r3, #1
 8004426:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004428:	69fb      	ldr	r3, [r7, #28]
 800442a:	f383 8810 	msr	PRIMASK, r3
}
 800442e:	46c0      	nop			@ (mov r8, r8)
 8004430:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	493a      	ldr	r1, [pc, #232]	@ (8004524 <UART_DMAReceiveCplt+0x128>)
 800443c:	400a      	ands	r2, r1
 800443e:	601a      	str	r2, [r3, #0]
 8004440:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004442:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004444:	6a3b      	ldr	r3, [r7, #32]
 8004446:	f383 8810 	msr	PRIMASK, r3
}
 800444a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800444c:	f3ef 8310 	mrs	r3, PRIMASK
 8004450:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004454:	647b      	str	r3, [r7, #68]	@ 0x44
 8004456:	2301      	movs	r3, #1
 8004458:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800445a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800445c:	f383 8810 	msr	PRIMASK, r3
}
 8004460:	46c0      	nop			@ (mov r8, r8)
 8004462:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	689a      	ldr	r2, [r3, #8]
 8004468:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	2101      	movs	r1, #1
 800446e:	438a      	bics	r2, r1
 8004470:	609a      	str	r2, [r3, #8]
 8004472:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004474:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004476:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004478:	f383 8810 	msr	PRIMASK, r3
}
 800447c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800447e:	f3ef 8310 	mrs	r3, PRIMASK
 8004482:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8004484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004486:	643b      	str	r3, [r7, #64]	@ 0x40
 8004488:	2301      	movs	r3, #1
 800448a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800448c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800448e:	f383 8810 	msr	PRIMASK, r3
}
 8004492:	46c0      	nop			@ (mov r8, r8)
 8004494:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	689a      	ldr	r2, [r3, #8]
 800449a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	2140      	movs	r1, #64	@ 0x40
 80044a0:	438a      	bics	r2, r1
 80044a2:	609a      	str	r2, [r3, #8]
 80044a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80044a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044aa:	f383 8810 	msr	PRIMASK, r3
}
 80044ae:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80044b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80044b2:	2280      	movs	r2, #128	@ 0x80
 80044b4:	2120      	movs	r1, #32
 80044b6:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80044ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d118      	bne.n	80044f2 <UART_DMAReceiveCplt+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044c0:	f3ef 8310 	mrs	r3, PRIMASK
 80044c4:	60fb      	str	r3, [r7, #12]
  return(result);
 80044c6:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80044ca:	2301      	movs	r3, #1
 80044cc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	f383 8810 	msr	PRIMASK, r3
}
 80044d4:	46c0      	nop			@ (mov r8, r8)
 80044d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	2110      	movs	r1, #16
 80044e2:	438a      	bics	r2, r1
 80044e4:	601a      	str	r2, [r3, #0]
 80044e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044e8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	f383 8810 	msr	PRIMASK, r3
}
 80044f0:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80044f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80044f4:	2200      	movs	r2, #0
 80044f6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80044fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d108      	bne.n	8004512 <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004500:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004502:	2258      	movs	r2, #88	@ 0x58
 8004504:	5a9a      	ldrh	r2, [r3, r2]
 8004506:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004508:	0011      	movs	r1, r2
 800450a:	0018      	movs	r0, r3
 800450c:	f7ff fa94 	bl	8003a38 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004510:	e003      	b.n	800451a <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8004512:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004514:	0018      	movs	r0, r3
 8004516:	f7fc f97b 	bl	8000810 <HAL_UART_RxCpltCallback>
}
 800451a:	46c0      	nop			@ (mov r8, r8)
 800451c:	46bd      	mov	sp, r7
 800451e:	b014      	add	sp, #80	@ 0x50
 8004520:	bd80      	pop	{r7, pc}
 8004522:	46c0      	nop			@ (mov r8, r8)
 8004524:	fffffeff 	.word	0xfffffeff

08004528 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b084      	sub	sp, #16
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004534:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2201      	movs	r2, #1
 800453a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004540:	2b01      	cmp	r3, #1
 8004542:	d10a      	bne.n	800455a <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2258      	movs	r2, #88	@ 0x58
 8004548:	5a9b      	ldrh	r3, [r3, r2]
 800454a:	085b      	lsrs	r3, r3, #1
 800454c:	b29a      	uxth	r2, r3
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	0011      	movs	r1, r2
 8004552:	0018      	movs	r0, r3
 8004554:	f7ff fa70 	bl	8003a38 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004558:	e003      	b.n	8004562 <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	0018      	movs	r0, r3
 800455e:	f7fc f98b 	bl	8000878 <HAL_UART_RxHalfCpltCallback>
}
 8004562:	46c0      	nop			@ (mov r8, r8)
 8004564:	46bd      	mov	sp, r7
 8004566:	b004      	add	sp, #16
 8004568:	bd80      	pop	{r7, pc}

0800456a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800456a:	b580      	push	{r7, lr}
 800456c:	b086      	sub	sp, #24
 800456e:	af00      	add	r7, sp, #0
 8004570:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004576:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800457c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	2280      	movs	r2, #128	@ 0x80
 8004582:	589b      	ldr	r3, [r3, r2]
 8004584:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	2280      	movs	r2, #128	@ 0x80
 800458e:	4013      	ands	r3, r2
 8004590:	2b80      	cmp	r3, #128	@ 0x80
 8004592:	d10a      	bne.n	80045aa <UART_DMAError+0x40>
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	2b21      	cmp	r3, #33	@ 0x21
 8004598:	d107      	bne.n	80045aa <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	2252      	movs	r2, #82	@ 0x52
 800459e:	2100      	movs	r1, #0
 80045a0:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	0018      	movs	r0, r3
 80045a6:	f7ff fe47 	bl	8004238 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	2240      	movs	r2, #64	@ 0x40
 80045b2:	4013      	ands	r3, r2
 80045b4:	2b40      	cmp	r3, #64	@ 0x40
 80045b6:	d10a      	bne.n	80045ce <UART_DMAError+0x64>
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2b22      	cmp	r3, #34	@ 0x22
 80045bc:	d107      	bne.n	80045ce <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	225a      	movs	r2, #90	@ 0x5a
 80045c2:	2100      	movs	r1, #0
 80045c4:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	0018      	movs	r0, r3
 80045ca:	f7ff fe59 	bl	8004280 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	2284      	movs	r2, #132	@ 0x84
 80045d2:	589b      	ldr	r3, [r3, r2]
 80045d4:	2210      	movs	r2, #16
 80045d6:	431a      	orrs	r2, r3
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	2184      	movs	r1, #132	@ 0x84
 80045dc:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	0018      	movs	r0, r3
 80045e2:	f7ff fa21 	bl	8003a28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80045e6:	46c0      	nop			@ (mov r8, r8)
 80045e8:	46bd      	mov	sp, r7
 80045ea:	b006      	add	sp, #24
 80045ec:	bd80      	pop	{r7, pc}

080045ee <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80045ee:	b580      	push	{r7, lr}
 80045f0:	b084      	sub	sp, #16
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045fa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	225a      	movs	r2, #90	@ 0x5a
 8004600:	2100      	movs	r1, #0
 8004602:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2252      	movs	r2, #82	@ 0x52
 8004608:	2100      	movs	r1, #0
 800460a:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	0018      	movs	r0, r3
 8004610:	f7ff fa0a 	bl	8003a28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004614:	46c0      	nop			@ (mov r8, r8)
 8004616:	46bd      	mov	sp, r7
 8004618:	b004      	add	sp, #16
 800461a:	bd80      	pop	{r7, pc}

0800461c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b086      	sub	sp, #24
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004624:	f3ef 8310 	mrs	r3, PRIMASK
 8004628:	60bb      	str	r3, [r7, #8]
  return(result);
 800462a:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800462c:	617b      	str	r3, [r7, #20]
 800462e:	2301      	movs	r3, #1
 8004630:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	f383 8810 	msr	PRIMASK, r3
}
 8004638:	46c0      	nop			@ (mov r8, r8)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	2140      	movs	r1, #64	@ 0x40
 8004646:	438a      	bics	r2, r1
 8004648:	601a      	str	r2, [r3, #0]
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	f383 8810 	msr	PRIMASK, r3
}
 8004654:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2220      	movs	r2, #32
 800465a:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2200      	movs	r2, #0
 8004660:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	0018      	movs	r0, r3
 8004666:	f7fc f8ed 	bl	8000844 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800466a:	46c0      	nop			@ (mov r8, r8)
 800466c:	46bd      	mov	sp, r7
 800466e:	b006      	add	sp, #24
 8004670:	bd80      	pop	{r7, pc}

08004672 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004672:	b580      	push	{r7, lr}
 8004674:	b082      	sub	sp, #8
 8004676:	af00      	add	r7, sp, #0
 8004678:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800467a:	46c0      	nop			@ (mov r8, r8)
 800467c:	46bd      	mov	sp, r7
 800467e:	b002      	add	sp, #8
 8004680:	bd80      	pop	{r7, pc}

08004682 <memset>:
 8004682:	0003      	movs	r3, r0
 8004684:	1882      	adds	r2, r0, r2
 8004686:	4293      	cmp	r3, r2
 8004688:	d100      	bne.n	800468c <memset+0xa>
 800468a:	4770      	bx	lr
 800468c:	7019      	strb	r1, [r3, #0]
 800468e:	3301      	adds	r3, #1
 8004690:	e7f9      	b.n	8004686 <memset+0x4>
	...

08004694 <__libc_init_array>:
 8004694:	b570      	push	{r4, r5, r6, lr}
 8004696:	2600      	movs	r6, #0
 8004698:	4c0c      	ldr	r4, [pc, #48]	@ (80046cc <__libc_init_array+0x38>)
 800469a:	4d0d      	ldr	r5, [pc, #52]	@ (80046d0 <__libc_init_array+0x3c>)
 800469c:	1b64      	subs	r4, r4, r5
 800469e:	10a4      	asrs	r4, r4, #2
 80046a0:	42a6      	cmp	r6, r4
 80046a2:	d109      	bne.n	80046b8 <__libc_init_array+0x24>
 80046a4:	2600      	movs	r6, #0
 80046a6:	f000 f823 	bl	80046f0 <_init>
 80046aa:	4c0a      	ldr	r4, [pc, #40]	@ (80046d4 <__libc_init_array+0x40>)
 80046ac:	4d0a      	ldr	r5, [pc, #40]	@ (80046d8 <__libc_init_array+0x44>)
 80046ae:	1b64      	subs	r4, r4, r5
 80046b0:	10a4      	asrs	r4, r4, #2
 80046b2:	42a6      	cmp	r6, r4
 80046b4:	d105      	bne.n	80046c2 <__libc_init_array+0x2e>
 80046b6:	bd70      	pop	{r4, r5, r6, pc}
 80046b8:	00b3      	lsls	r3, r6, #2
 80046ba:	58eb      	ldr	r3, [r5, r3]
 80046bc:	4798      	blx	r3
 80046be:	3601      	adds	r6, #1
 80046c0:	e7ee      	b.n	80046a0 <__libc_init_array+0xc>
 80046c2:	00b3      	lsls	r3, r6, #2
 80046c4:	58eb      	ldr	r3, [r5, r3]
 80046c6:	4798      	blx	r3
 80046c8:	3601      	adds	r6, #1
 80046ca:	e7f2      	b.n	80046b2 <__libc_init_array+0x1e>
 80046cc:	08004740 	.word	0x08004740
 80046d0:	08004740 	.word	0x08004740
 80046d4:	08004744 	.word	0x08004744
 80046d8:	08004740 	.word	0x08004740

080046dc <memcpy>:
 80046dc:	2300      	movs	r3, #0
 80046de:	b510      	push	{r4, lr}
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d100      	bne.n	80046e6 <memcpy+0xa>
 80046e4:	bd10      	pop	{r4, pc}
 80046e6:	5ccc      	ldrb	r4, [r1, r3]
 80046e8:	54c4      	strb	r4, [r0, r3]
 80046ea:	3301      	adds	r3, #1
 80046ec:	e7f8      	b.n	80046e0 <memcpy+0x4>
	...

080046f0 <_init>:
 80046f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046f2:	46c0      	nop			@ (mov r8, r8)
 80046f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046f6:	bc08      	pop	{r3}
 80046f8:	469e      	mov	lr, r3
 80046fa:	4770      	bx	lr

080046fc <_fini>:
 80046fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046fe:	46c0      	nop			@ (mov r8, r8)
 8004700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004702:	bc08      	pop	{r3}
 8004704:	469e      	mov	lr, r3
 8004706:	4770      	bx	lr
